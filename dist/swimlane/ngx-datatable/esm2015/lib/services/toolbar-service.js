import { ComponentPortal } from '@angular/cdk/portal';
import { Injectable } from '@angular/core';
import { CustomToolTipComponent } from '../components/ice-custom-tooltip/ice-custom-tooltip.component';
/**
 * service to make DatatableComponent aware of changes to
 * input bindings of DataTableColumnDirective
 */
export class ToolbarService {
  setToolbar(_overlay, _overlayPositionBuilder, _elementRef, iceTooltipHtmlText, duration) {
    if (!this._overlayRef) {
      const positionStrategy = _overlayPositionBuilder.flexibleConnectedTo(_elementRef).withPositions([
        {
          originX: 'start',
          originY: 'top',
          overlayX: 'start',
          overlayY: 'bottom',
          offsetY: -5
        }
      ]);
      this._overlayRef = _overlay.create({ positionStrategy });
    }
    if (!this._overlayRef.hasAttached()) {
      const tooltipRef = this._overlayRef.attach(new ComponentPortal(CustomToolTipComponent));
      this.componentInstance = tooltipRef;
      this.componentInstance.instance.text = iceTooltipHtmlText;
      this.componentInstance.instance.onMouseLeave = () => {
        this.clearTimeout();
        this.setTimeout(duration);
      };
      this.componentInstance.instance.onMouseEnter = () => this.clearTimeout();
    }
  }
  clearTimeout() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
  }
  setTimeout(duration) {
    this.timeout = setTimeout(() => {
      this.closeToolTip();
    }, duration);
  }
  destroy() {
    this.clearTimeout();
    this.closeToolTip();
    this._overlayRef = null;
  }
  closeToolTip() {
    if (this._overlayRef) {
      this._overlayRef.detach();
      this.componentInstance = null;
    }
  }
}
ToolbarService.decorators = [{ type: Injectable }];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL3N3aW1sYW5lL25neC1kYXRhdGFibGUvc3JjLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3Rvb2xiYXItc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFnQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDdkc7OztHQUdHO0FBRUgsTUFBTSxPQUFPLGNBQWM7SUFLekIsVUFBVSxDQUFDLFFBQVEsRUFBRSx1QkFBdUIsRUFBRSxXQUFXLEVBQUUsa0JBQWtCLEVBQUUsUUFBUTtRQUNyRixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixNQUFNLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztnQkFDOUY7b0JBQ0UsT0FBTyxFQUFFLE9BQU87b0JBQ2hCLE9BQU8sRUFBRSxLQUFLO29CQUNkLFFBQVEsRUFBRSxPQUFPO29CQUNqQixRQUFRLEVBQUUsUUFBUTtvQkFDbEIsT0FBTyxFQUFFLENBQUMsQ0FBQztpQkFDWjthQUNGLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztTQUMxRDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ25DLE1BQU0sVUFBVSxHQUF5QyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FDOUUsSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMsQ0FDNUMsQ0FBQztZQUNGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLENBQUM7WUFDcEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLENBQUM7WUFDMUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxFQUFFO2dCQUNsRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUIsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQzFFO0lBQ0gsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsUUFBUTtRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RCLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNmLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFLLENBQUM7U0FDaEM7SUFDSCxDQUFDOzs7WUF4REYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XHJcbmltcG9ydCB7IENvbXBvbmVudFBvcnRhbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ3VzdG9tVG9vbFRpcENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvaWNlLWN1c3RvbS10b29sdGlwL2ljZS1jdXN0b20tdG9vbHRpcC5jb21wb25lbnQnO1xyXG4vKipcclxuICogc2VydmljZSB0byBtYWtlIERhdGF0YWJsZUNvbXBvbmVudCBhd2FyZSBvZiBjaGFuZ2VzIHRvXHJcbiAqIGlucHV0IGJpbmRpbmdzIG9mIERhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVG9vbGJhclNlcnZpY2Uge1xyXG4gIHB1YmxpYyBfb3ZlcmxheVJlZjogT3ZlcmxheVJlZjtcclxuICBwdWJsaWMgdGltZW91dDogYW55O1xyXG4gIHB1YmxpYyBjb21wb25lbnRJbnN0YW5jZTogYW55O1xyXG5cclxuICBzZXRUb29sYmFyKF9vdmVybGF5LCBfb3ZlcmxheVBvc2l0aW9uQnVpbGRlciwgX2VsZW1lbnRSZWYsIGljZVRvb2x0aXBIdG1sVGV4dCwgZHVyYXRpb24pIHtcclxuICAgIGlmICghdGhpcy5fb3ZlcmxheVJlZikge1xyXG4gICAgICBjb25zdCBwb3NpdGlvblN0cmF0ZWd5ID0gX292ZXJsYXlQb3NpdGlvbkJ1aWxkZXIuZmxleGlibGVDb25uZWN0ZWRUbyhfZWxlbWVudFJlZikud2l0aFBvc2l0aW9ucyhbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgb3JpZ2luWDogJ3N0YXJ0JyxcclxuICAgICAgICAgIG9yaWdpblk6ICd0b3AnLFxyXG4gICAgICAgICAgb3ZlcmxheVg6ICdzdGFydCcsXHJcbiAgICAgICAgICBvdmVybGF5WTogJ2JvdHRvbScsXHJcbiAgICAgICAgICBvZmZzZXRZOiAtNVxyXG4gICAgICAgIH1cclxuICAgICAgXSk7XHJcbiAgICAgIHRoaXMuX292ZXJsYXlSZWYgPSBfb3ZlcmxheS5jcmVhdGUoeyBwb3NpdGlvblN0cmF0ZWd5IH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLl9vdmVybGF5UmVmLmhhc0F0dGFjaGVkKCkpIHtcclxuICAgICAgY29uc3QgdG9vbHRpcFJlZjogQ29tcG9uZW50UmVmPEN1c3RvbVRvb2xUaXBDb21wb25lbnQ+ID0gdGhpcy5fb3ZlcmxheVJlZi5hdHRhY2goXHJcbiAgICAgICAgbmV3IENvbXBvbmVudFBvcnRhbChDdXN0b21Ub29sVGlwQ29tcG9uZW50KVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdG9vbHRpcFJlZjtcclxuICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZS5pbnN0YW5jZS50ZXh0ID0gaWNlVG9vbHRpcEh0bWxUZXh0O1xyXG4gICAgICB0aGlzLmNvbXBvbmVudEluc3RhbmNlLmluc3RhbmNlLm9uTW91c2VMZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xyXG4gICAgICAgIHRoaXMuc2V0VGltZW91dChkdXJhdGlvbik7XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuY29tcG9uZW50SW5zdGFuY2UuaW5zdGFuY2Uub25Nb3VzZUVudGVyID0gKCkgPT4gdGhpcy5jbGVhclRpbWVvdXQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsZWFyVGltZW91dCgpIHtcclxuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRUaW1lb3V0KGR1cmF0aW9uKSB7XHJcbiAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5jbG9zZVRvb2xUaXAoKTtcclxuICAgIH0sIGR1cmF0aW9uKTtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xyXG4gICAgdGhpcy5jbG9zZVRvb2xUaXAoKTtcclxuICAgIHRoaXMuX292ZXJsYXlSZWYgPSBudWxsITtcclxuICB9XHJcblxyXG4gIGNsb3NlVG9vbFRpcCgpIHtcclxuICAgIGlmICh0aGlzLl9vdmVybGF5UmVmKSB7XHJcbiAgICAgIHRoaXMuX292ZXJsYXlSZWYuZGV0YWNoKCk7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSBudWxsITtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19
