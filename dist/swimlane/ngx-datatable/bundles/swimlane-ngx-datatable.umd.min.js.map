{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-datatable/lib/services/scrollbar-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/dimensions-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/column-changes.service.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer-template.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/visibility.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/draggable.directive.ts","ng://@swimlane/ngx-datatable/lib/events.ts","ng://@swimlane/ngx-datatable/lib/directives/resizeable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/orderable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/long-press.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/scroller.component.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-header.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-cell.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/tree.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column.directive.ts","ng://@swimlane/ngx-datatable/lib/utils/column.ts","ng://@swimlane/ngx-datatable/lib/types/sort.type.ts","ng://@swimlane/ngx-datatable/lib/types/selection.type.ts","ng://@swimlane/ngx-datatable/lib/utils/camel-case.ts","ng://@swimlane/ngx-datatable/lib/utils/prefixes.ts","ng://@swimlane/ngx-datatable/lib/utils/translate.ts","ng://@swimlane/ngx-datatable/lib/components/header/header.component.ts","ng://@swimlane/ngx-datatable/lib/utils/column-prop-getters.ts","ng://@swimlane/ngx-datatable/lib/types/sort-direction.type.ts","ng://@swimlane/ngx-datatable/lib/utils/sort.ts","ng://@swimlane/ngx-datatable/lib/components/header/header-cell.component.ts","ng://@swimlane/ngx-datatable/lib/utils/row-height-cache.ts","ng://@swimlane/ngx-datatable/lib/components/body/body.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.directive.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/pager.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/progress-bar.component.ts","ng://@swimlane/ngx-datatable/lib/utils/keys.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row-wrapper.component.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-cell.component.ts","ng://@swimlane/ngx-datatable/lib/utils/selection.ts","ng://@swimlane/ngx-datatable/lib/components/body/selection.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/summary/summary-row.component.ts","ng://@swimlane/ngx-datatable/lib/components/ice-custom-tooltip/ice-custom-tooltip.component.ts","ng://@swimlane/ngx-datatable/lib/directives/ice-custom-html-tooltip.directive.ts","ng://@swimlane/ngx-datatable/lib/components/ice-datatable-select/ice-datatable-select.component.ts","ng://@swimlane/ngx-datatable/lib/components/ice-editable-text/ice-editable-text.component.ts","ng://@swimlane/ngx-datatable/lib/utils/tree.ts","ng://@swimlane/ngx-datatable/lib/utils/id.ts","ng://@swimlane/ngx-datatable/lib/utils/column-helper.ts","ng://@swimlane/ngx-datatable/lib/types/column-mode.type.ts","ng://@swimlane/ngx-datatable/lib/types/contextmenu.type.ts","ng://@swimlane/ngx-datatable/lib/utils/math.ts","ng://@swimlane/ngx-datatable/lib/components/datatable.component.ts","ng://@swimlane/ngx-datatable/lib/ngx-datatable.module.ts","ng://@swimlane/ngx-datatable/lib/utils/throttle.ts","ng://@swimlane/ngx-datatable/lib/utils/elm-from-point.ts","ng://@swimlane/ngx-datatable/lib/types/click.type.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ScrollbarHelper","document","width","getWidth","outer","createElement","style","visibility","msOverflowStyle","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","Injectable","Inject","args","DOCUMENT","DimensionsHelper","getDimensions","element","getBoundingClientRect","ColumnChangesService","columnInputChanges","Subject","defineProperty","asObservable","onInputChange","DataTableFooterTemplateDirective","template","Directive","selector","TemplateRef","VisibilityDirective","zone","isVisible","visible","EventEmitter","ngOnInit","runCheck","ngOnDestroy","clearTimeout","timeout","onVisibilityChange","_this","run","emit","check","_a","nativeElement","offsetHeight","runOutsideAngular","setTimeout","ElementRef","NgZone","HostBinding","Output","DraggableDirective","dragX","dragY","dragStart","dragging","dragEnd","isDragging","ngOnChanges","changes","currentValue","dragModel","onMousedown","_destroySubscription","onMouseup","event","classList","remove","subscription","model","contains","preventDefault","mouseDownPos_1","x","clientX","y","clientY","mouseup","fromEvent","subscribe","ev","mouseMoveSub","pipe","takeUntil","move","add","mouseDownPos","left","top","unsubscribe","undefined","Input","window","ResizeableDirective","renderer","resizeEnabled","resize","resizing","ngAfterViewInit","renderer2","node","addClass","closed","clientWidth","isHandle","initialWidth","mouseDownScreenX","screenX","stopPropagation","newWidth","overMinWidth","minWidth","underMaxWidth","maxWidth","host","[class.resizeable]","Renderer2","HostListener","OrderableDirective","differs","reorder","targetChanged","differ","find","create","ngAfterContentInit","updateSubscriptions","draggables","bind","forEach","d","diffs","diff","createMapDiffs","unsubscribe_1","previousValue","forEachAddedItem","onDragStart","onDragging","onDragEnd","forEachRemovedItem","positions","_b","tslib_1.__values","toArray","_c","dragger","elm","parseInt","offsetLeft","toString","prop","right","index","prevPos","target","isTarget","lastDraggingIndex","prevIndex","newIndex","initialIndex","targets","elementsFromPoint","pos","this_1","el","reduce","acc","curr","$$id","KeyValueDiffers","ContentChildren","descendants","LongPressDirective","pressEnabled","duration","longPressStart","longPressing","longPressEnd","mouseX","mouseY","pressing","isLongPressing","onMouseDown","which","pressModel","mouseEvent","onMouseMove","loop","xThres","Math","abs","yThres","endPress","ScrollerComponent","ngZone","scrollbarV","scrollbarH","scroll","scrollYPos","scrollXPos","prevScrollYPos","prevScrollXPos","_scrollEventListener","parentElement","onScrolled","addEventListener","removeEventListener","setOffset","offsetY","scrollTop","dom","requestAnimationFrame","scrollLeft","updateOffset","direction","Component","class","changeDetection","ChangeDetectionStrategy","OnPush","type","DataTableColumnHeaderDirective","DataTableColumnCellDirective","DataTableColumnCellTreeToggle","DataTableColumnDirective","columnChangesService","isFirstChange","_cellTemplateInput","_cellTemplateQuery","_headerTemplateInput","_headerTemplateQuery","_treeToggleTemplateInput","_treeToggleTemplateQuery","ContentChild","read","static","columnsByPin","cols","ret","center","cols_1","cols_1_1","col","frozenLeft","frozenRight","columnGroupWidths","groups","all","columnTotalWidth","total","floor","columns","totalWidth","columns_1","columns_1_1","c","parseFloat","columnsTotalWidth","columns_2","columns_2_1","column","columnsByPinArr","val","colsByPinArr","colsByPin","single","multi","multiClick","cell","checkbox","camelCase","str","replace","trim","toLowerCase","a","b","toUpperCase","deCamelCase","match","styles","pre","cache","testStyle","prefix","getComputedStyle","documentElement","Array","slice","join","RegExp","lowercase","css","js","substr","getVendorPrefixedName","property","name","transform","backfaceVisibility","hasCSSTransforms","hasCSS3DTransforms","ua","navigator","userAgent","isSafari","test","translateXY","DataTableHeaderComponent","cd","sort","select","columnContextmenu","filter","_columnGroupWidths","_styleByGroup","_innerWidth","_columns","colByPin","setStylesByGroup","_headerHeight","_columnsByPin","_offsetX","onLongPressStart","dragEventTarget","onLongPressEnd","innerWidth","trackByGroups","colGroup","columnTrackingFn","onColumnResized","prevValue","newValue","onColumnReordered","getColumn","targetMarkerContext","onTargetChanged","oldColumn","newColumn","leftColumnCount","centerColumnCount","onSort","sorts","calcNewSorts","idx","map","splice","dir","sortType","SortType","calcStylesByGroup","destroyed","detectChanges","group","widths","offsetX","onColumnFilter","ChangeDetectorRef","emptyStringGetter","getterForProp","numericIndexGetter","indexOf","deepValueGetter","shallowValueGetter","row","obj","fieldName","path","current","split","asc","desc","nextSortDir","SortDirection","orderByComparator","Date","isNaN","isFinite","String","sortRows","rows","dirs","rowToIndexMap","Map","set","temp","comparator","cachedDirs","valueGetter","compareFn","rowA","rowB","cachedDirs_1","cachedDirs_1_1","cachedDir","propA","propB","comparison","has","get","DataTableHeaderCellComponent","sortFn","selectFn","filterCache","cellContext","sortDir","allRowsSelected","_allRowsSelected","_column","markForCheck","_sorts","calcSortDir","sortClass","calcSortClass","cls","sortable","resizeable","headerClass","res","keys","keys_1","keys_1_1","k","headerTemplate","checkboxable","headerCheckboxable","selectionType","SelectionType","onContextmenu","$event","sortAscendingIcon","sortDescendingIcon","setFilter","resetFilter","RowHeightCache","treeArray","clearCache","initCache","details","rowHeight","detailRowHeight","externalVirtual","rowCount","rowIndexes","rowExpansions","isFn","isDetailFn","Error","currentRowHeight","expanded","update","getRowIndex","scrollY","calcRowIndex","atRowIndex","byRowHeight","query","atIndex","sum","queryBetween","atIndexA","atIndexB","dataLength","blockSize","pow","nextPos","DataTableBodyComponent","selected","page","activate","detailToggle","rowContextmenu","treeAction","rowHeightsCache","indexes","getDetailRowHeight","rowDetail","rowTrackingFn","trackByProp","_pageSize","recalcLayout","_rows","_offset","_rowCount","_bodyHeight","virtualization","listener","toggle","toggleRowExpansion","toggleAllRows","updateIndexes","updateRows","groupHeader","updateOffsetY","offset","scroller","rowIndex","pageSize","onBodyScroll","updatePage","first","ceil","last","clear","groupedRows","getRowHeight","getGroupHeight","getRowAndDetailHeight","getRowExpanded","getRowsStyles","getBottomSummaryRowStyles","position","hideIndicator","loadingIndicator","height","bodyHeight","externalPaging","max","min","refreshRowHeightCache","Set","getAdjustedViewPortIndex","viewPortFirstRowIndex","rowExpandedIdx","getRowExpandedIdx","currentIndex","stylesByGroup","bodyWidth","groupExpansionDefault","rowId","rowIdentity","findIndex","onTreeAction","ViewChild","DatatableFooterDirective","_templateInput","_templateQuery","DataTableFooterComponent","selectedCount","DataTablePagerComponent","change","_count","_page","_size","pages","calcPages","count","size","canPrevious","canNext","totalPages","prevPage","selectPage","nextPage","startPage","endPage","isMaxSized","maxSize","num","number","text","ProgressBarComponent","up","down","return","escape","DataTableBodyRowComponent","scrollbarHelper","treeStatus","_groupStyles","_element","_rowDiffer","recalculateColumns","buildStylesByGroup","isSelected","rowClass","ngDoCheck","detail","onActivate","cellIndex","rowElement","onKeyDown","keyCode","isTargetRow","Keys","onMouseenter","decorators","SkipSelf","DataTableRowWrapperComponent","groupContext","rowContext","_expanded","rowDiffer","_rowIndex","getGroupHeaderStyle","DatatableRowDetailTemplateDirective","DatatableRowDetailDirective","toggleExpandRow","expandAllRows","collapseAllRows","DatatableGroupHeaderTemplateDirective","DatatableGroupHeaderDirective","toggleExpandGroup","expandAllGroups","collapseAllGroups","DataTableBodyCellComponent","sanitizer","changeDetectorRef","_isEditable","isFocused","onCheckboxChangeFn","onCheckboxChange","activateFn","_rowDetail","_group","checkValueUpdates","_rowHeight","_isSelected","_row","_treeStatus","status","cellClass","icons","cellTemplate","$$valueGetter","userPipe","sanitizedValue","stripHtml","onFocus","onBlur","onClick","cellElement","middleclickEvent","onDblClick","isTargetCell","html","calcLeftMargin","levelIndent","treeLevelIndent","isTreeColumn","level","hasToShowToolTip","field","tooltip","getTooltipValue","getIcons","iconsArray","selectFieldValue","propArray","onClickRowActionButton","action","sanatizeHtml","bypassSecurityTrustHtml","isEditable","id","editable","of","updateSelect","onEdit","editField","onClickField","DomSanitizer","ViewContainerRef","selectRows","comparefn","selectedIndex","selectRowsBetween","reverse","range","start","end","DataTableSelectionComponent","selectRow","selectEnabled","chkbox","shiftKey","getRowSelectedIdx","ctrlKey","metaKey","selectCheck","onKeyboardFocus","isCellSelection","focusCell","focusRow","nextRowElement","getPrevNextRow","focus","focusElement","previousElementSibling","nextElementSibling","children","nextCellElement","getElementsByClassName","getRowSelected","defaultSumFunc","cells","cellsWithValues","some","noopSumFunc","DataTableSummaryRowComponent","summaryRow","updateInternalColumns","updateValues","_internalColumns","summaryTemplate","cellsFromSingleColumn","sumFunc","getSummaryFunction","summaryFunc","CustomToolTipComponent","encapsulation","ViewEncapsulation","None","ToolTipRendererDirective","_overlay","_overlayPositionBuilder","_elementRef","showToolTip","showToolTipOnTextOverflow","show","scrollWidth","_overlayRef","positionStrategy","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","hasAttached","tooltipRef","attach","ComponentPortal","componentInstance","instance","iceTooltipHtmlText","hide","closeToolTip","detach","Overlay","OverlayPositionBuilder","DatatableSelectComponent","editing","active","align","focusOnEnter","editOnFocus","selectDisabled","currentClass","options","_options","option","_value","defaultValue","emitUpdate","ViewChildren","EditableTextComponent","editOnSpace","editOnClick","disabled","errorText","toggleEditing","toggleActive","newText","emitToggleEditing","emitFocus","emitToggleActive","inputEl","content","childNodes","data","optionalGetterForProp","groupRowsByParents","from","to","nodeById","l","TreeNode","uniqIDs","arr","item","toValue","parent_1","fromValue","parent","resolvedRows_1","flatten","f","recursive","child","random","setColumnDefaults","treeColumnFound","isNullOrUndefined","draggable","canAutoResize","translateTemplates","templates","result","templates_1","templates_1_1","props","getOwnPropertyNames","props_1","e_3","props_1_1","standard","flex","force","header","getTotalFlexGrow","totalFlexGrow","flexGrow","adjustColumnWidths","allColumns","expectedWidth","columnsWidth","colsByGroup","attr","e_2","_d","hasMinWidth","remainingWidth","widthPerFlexPoint","_e","_f","scaleColumns","forceFillColumnWidths","startIdx","allowBleed","defaultColWidth","columnsToResize","columnsToResize_1","columnsToResize_1_1","$$oldWidth","additionWidthPerColumn","exceedsWindow","contentWidth","getContentWidth","columnsProcessed","columnsToResize_2","e_5","columnsToResize_2_1","newSize","removeProcessedColumns","columnsProcessed_1","columnsProcessed_1_1","allColumns_1","allColumns_1_1","DatatableComponent","dimensionsHelper","configuration","expandable","columnMode","ColumnMode","headerHeight","footerHeight","externalSorting","reorderable","swapColumns","cssClasses","sortAscending","sortDescending","pagerLeftArrow","pagerRightArrow","pagerPrevious","pagerNext","messages","emptyMessage","totalMessage","selectedMessage","selectAllRowsOnPage","summaryHeight","summaryPosition","tableContextmenu","BehaviorSubject","_subscriptions","recalculate$","_groupRowsBy","key","_internalRows","sortInternalRows","treeFromRelation","treeToRelation","recalculate","groupArrayBy","_limit","_columnTemplates","translateColumns","bodyComponent","rowsOnPage","ResizeSensor","resizeSensor","throttleTime","asyncScheduler","leading","trailing","delay","limit","columnTemplates","v","listenForColumnInputChanges","originalArray","groupBy","recalculatePages","recalculateDims","forceIdx","dims","calcPageSize","calcRowCount","onBodyPage","onFooterPage","onColumnContextmenu","ContextmenuType","onRowContextmenu","onColumnResize","onColumnReorder","prevCol","movedCol","onColumnSort","onHeaderSelect","allSelected","onBodySelect","columnInputChanges$","notifyOnChanges","Optional","NgxDatatableModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","MatTooltipModule","OverlayModule","MatIconModule","MatButtonModule","MatInputModule","MatFormFieldModule","MatSelectModule","FormsModule","ReactiveFormsModule","declarations","exports","entryComponents","throttle","func","wait","context","previous","later","now","remaining","elements","previousPointerEvents","elementFromPoint","getPropertyValue","priority","getPropertyPriority","setProperty","double","descriptor","configurable","enumerable"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class ScrollbarHelper {\r\n  width: number = this.getWidth();\r\n\r\n  constructor(@Inject(DOCUMENT) private document: any) {}\r\n\r\n  getWidth(): number {\r\n    const outer = this.document.createElement('div');\r\n    outer.style.visibility = 'hidden';\r\n    outer.style.width = '100px';\r\n    outer.style.msOverflowStyle = 'scrollbar';\r\n    this.document.body.appendChild(outer);\r\n\r\n    const widthNoScroll = outer.offsetWidth;\r\n    outer.style.overflow = 'scroll';\r\n\r\n    const inner = this.document.createElement('div');\r\n    inner.style.width = '100%';\r\n    outer.appendChild(inner);\r\n\r\n    const widthWithScroll = inner.offsetWidth;\r\n    outer.parentNode.removeChild(outer);\r\n\r\n    return widthNoScroll - widthWithScroll;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class DimensionsHelper {\r\n  getDimensions(element: Element): ClientRect {\r\n    return element.getBoundingClientRect();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n/**\r\n * service to make DatatableComponent aware of changes to\r\n * input bindings of DataTableColumnDirective\r\n */\r\n@Injectable()\r\nexport class ColumnChangesService {\r\n  private columnInputChanges = new Subject<undefined>();\r\n\r\n  get columnInputChanges$(): Observable<undefined> {\r\n    return this.columnInputChanges.asObservable();\r\n  }\r\n\r\n  onInputChange(): void {\r\n    this.columnInputChanges.next();\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-footer-template]' })\r\nexport class DataTableFooterTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, Output, EventEmitter, ElementRef, HostBinding, NgZone, OnInit, OnDestroy } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer Directive\r\n *\r\n * Usage:\r\n *\r\n * \t\t<div\r\n * \t\t\tvisibilityObserver\r\n * \t\t\t(visible)=\"onVisible($event)\">\r\n * \t\t</div>\r\n *\r\n */\r\n@Directive({ selector: '[visibilityObserver]' })\r\nexport class VisibilityDirective implements OnInit, OnDestroy {\r\n  @HostBinding('class.visible')\r\n  isVisible: boolean = false;\r\n\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {}\r\n\r\n  ngOnInit(): void {\r\n    this.runCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 50);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.timeout = setTimeout(() => check());\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n/**\r\n * Draggable Directive for Angular2\r\n *\r\n * Inspiration:\r\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\r\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\r\n *\r\n */\r\n@Directive({ selector: '[draggable]' })\r\nexport class DraggableDirective implements OnDestroy, OnChanges {\r\n  @Input() dragEventTarget: any;\r\n  @Input() dragModel: any;\r\n  @Input() dragX: boolean = true;\r\n  @Input() dragY: boolean = true;\r\n\r\n  @Output() dragStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragging: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  isDragging: boolean = false;\r\n  subscription: Subscription;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\r\n      this.onMousedown(changes['dragEventTarget'].currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  onMouseup(event: MouseEvent): void {\r\n    if (!this.isDragging) return;\r\n\r\n    this.isDragging = false;\r\n    this.element.classList.remove('dragging');\r\n\r\n    if (this.subscription) {\r\n      this._destroySubscription();\r\n      this.dragEnd.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  onMousedown(event: MouseEvent): void {\r\n    // we only want to drag the inner header text\r\n    const isDragElm = (<HTMLElement>event.target).classList.contains('draggable');\r\n\r\n    if (isDragElm && (this.dragX || this.dragY)) {\r\n      event.preventDefault();\r\n      this.isDragging = true;\r\n\r\n      const mouseDownPos = { x: event.clientX, y: event.clientY };\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup(ev));\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((ev: MouseEvent) => this.move(ev, mouseDownPos));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n\r\n      this.dragStart.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, mouseDownPos: { x: number; y: number }): void {\r\n    if (!this.isDragging) return;\r\n\r\n    const x = event.clientX - mouseDownPos.x;\r\n    const y = event.clientY - mouseDownPos.y;\r\n\r\n    if (this.dragX) this.element.style.left = `${x}px`;\r\n    if (this.dragY) this.element.style.top = `${y}px`;\r\n\r\n    this.element.classList.add('dragging');\r\n\r\n    this.dragging.emit({\r\n      event,\r\n      element: this.element,\r\n      model: this.dragModel\r\n    });\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","declare let global: any;\r\n\r\n/* tslint:disable */\r\nexport const MouseEvent = (((typeof window !== 'undefined' && window) as any) || (global as any))\r\n  .MouseEvent as MouseEvent;\r\nexport const KeyboardEvent = (((typeof window !== 'undefined' && window) as any) || (global as any))\r\n  .KeyboardEvent as KeyboardEvent;\r\nexport const Event = (((typeof window !== 'undefined' && window) as any) || (global as any)).Event as Event;\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { MouseEvent } from '../events';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[resizeable]',\r\n  host: {\r\n    '[class.resizeable]': 'resizeEnabled'\r\n  }\r\n})\r\nexport class ResizeableDirective implements OnDestroy, AfterViewInit {\r\n  @Input() resizeEnabled: boolean = true;\r\n  @Input() minWidth: number;\r\n  @Input() maxWidth: number;\r\n\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  subscription: Subscription;\r\n  resizing: boolean = false;\r\n\r\n  constructor(element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const renderer2 = this.renderer;\r\n    const node = renderer2.createElement('span');\r\n    if (this.resizeEnabled) {\r\n      renderer2.addClass(node, 'resize-handle');\r\n    } else {\r\n      renderer2.addClass(node, 'resize-handle--not-resizable');\r\n    }\r\n    renderer2.appendChild(this.element, node);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.resizing = false;\r\n\r\n    if (this.subscription && !this.subscription.closed) {\r\n      this._destroySubscription();\r\n      this.resize.emit(this.element.clientWidth);\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    const isHandle = (<HTMLElement>event.target).classList.contains('resize-handle');\r\n    const initialWidth = this.element.clientWidth;\r\n    const mouseDownScreenX = event.screenX;\r\n\r\n    if (isHandle) {\r\n      event.stopPropagation();\r\n      this.resizing = true;\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((e: MouseEvent) => this.move(e, initialWidth, mouseDownScreenX));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, initialWidth: number, mouseDownScreenX: number): void {\r\n    const movementX = event.screenX - mouseDownScreenX;\r\n    const newWidth = initialWidth + movementX;\r\n\r\n    const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\r\n    const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\r\n\r\n    if (overMinWidth && underMaxWidth) {\r\n      this.element.style.width = `${newWidth}px`;\r\n    }\r\n  }\r\n\r\n  private _destroySubscription() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Output,\r\n  EventEmitter,\r\n  ContentChildren,\r\n  QueryList,\r\n  KeyValueDiffers,\r\n  AfterContentInit,\r\n  OnDestroy,\r\n  Inject\r\n} from '@angular/core';\r\nimport { DraggableDirective } from './draggable.directive';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Directive({ selector: '[orderable]' })\r\nexport class OrderableDirective implements AfterContentInit, OnDestroy {\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() targetChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChildren(DraggableDirective, { descendants: true })\r\n  draggables: QueryList<DraggableDirective>;\r\n\r\n  positions: any;\r\n  differ: any;\r\n  lastDraggingIndex: number;\r\n\r\n  constructor(differs: KeyValueDiffers, @Inject(DOCUMENT) private document: any) {\r\n    this.differ = differs.find({}).create();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    // HACK: Investigate Better Way\r\n    this.updateSubscriptions();\r\n    this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.draggables.forEach(d => {\r\n      d.dragStart.unsubscribe();\r\n      d.dragging.unsubscribe();\r\n      d.dragEnd.unsubscribe();\r\n    });\r\n  }\r\n\r\n  updateSubscriptions(): void {\r\n    const diffs = this.differ.diff(this.createMapDiffs());\r\n\r\n    if (diffs) {\r\n      const subscribe = ({ currentValue, previousValue }: any) => {\r\n        unsubscribe({ previousValue });\r\n\r\n        if (currentValue) {\r\n          currentValue.dragStart.subscribe(this.onDragStart.bind(this));\r\n          currentValue.dragging.subscribe(this.onDragging.bind(this));\r\n          currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\r\n        }\r\n      };\r\n\r\n      const unsubscribe = ({ previousValue }: any) => {\r\n        if (previousValue) {\r\n          previousValue.dragStart.unsubscribe();\r\n          previousValue.dragging.unsubscribe();\r\n          previousValue.dragEnd.unsubscribe();\r\n        }\r\n      };\r\n\r\n      diffs.forEachAddedItem(subscribe);\r\n      // diffs.forEachChangedItem(subscribe.bind(this));\r\n      diffs.forEachRemovedItem(unsubscribe);\r\n    }\r\n  }\r\n\r\n  onDragStart(): void {\r\n    this.positions = {};\r\n\r\n    let i = 0;\r\n    for (const dragger of this.draggables.toArray()) {\r\n      const elm = dragger.element;\r\n      const left = parseInt(elm.offsetLeft.toString(), 0);\r\n      this.positions[dragger.dragModel.prop] = {\r\n        left,\r\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\r\n        index: i++,\r\n        element: elm\r\n      };\r\n    }\r\n  }\r\n\r\n  onDragging({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n    const target = this.isTarget(model, event);\r\n\r\n    if (target) {\r\n      if (this.lastDraggingIndex !== target.i) {\r\n        this.targetChanged.emit({\r\n          prevIndex: this.lastDraggingIndex,\r\n          newIndex: target.i,\r\n          initialIndex: prevPos.index\r\n        });\r\n        this.lastDraggingIndex = target.i;\r\n      }\r\n    } else if (this.lastDraggingIndex !== prevPos.index) {\r\n      this.targetChanged.emit({\r\n        prevIndex: this.lastDraggingIndex,\r\n        initialIndex: prevPos.index\r\n      });\r\n      this.lastDraggingIndex = prevPos.index;\r\n    }\r\n  }\r\n\r\n  onDragEnd({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n\r\n    const target = this.isTarget(model, event);\r\n    if (target) {\r\n      this.reorder.emit({\r\n        prevIndex: prevPos.index,\r\n        newIndex: target.i,\r\n        model\r\n      });\r\n    }\r\n\r\n    this.lastDraggingIndex = undefined;\r\n    element.style.left = 'auto';\r\n  }\r\n\r\n  isTarget(model: any, event: any): any {\r\n    let i = 0;\r\n    const x = event.x || event.clientX;\r\n    const y = event.y || event.clientY;\r\n    const targets = this.document.elementsFromPoint(x, y);\r\n\r\n    for (const prop in this.positions) {\r\n      // current column position which throws event.\r\n      const pos = this.positions[prop];\r\n\r\n      // since we drag the inner span, we need to find it in the elements at the cursor\r\n      if (model.prop !== prop && targets.find((el: any) => el === pos.element)) {\r\n        return {\r\n          pos,\r\n          i\r\n        };\r\n      }\r\n\r\n      i++;\r\n    }\r\n  }\r\n\r\n  private createMapDiffs(): { [key: string]: DraggableDirective } {\r\n    return this.draggables.toArray().reduce((acc, curr) => {\r\n      acc[curr.dragModel.$$id] = curr;\r\n      return acc;\r\n    }, {});\r\n  }\r\n}\r\n","import { Directive, Input, Output, EventEmitter, HostBinding, HostListener, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n@Directive({ selector: '[long-press]' })\r\nexport class LongPressDirective implements OnDestroy {\r\n  @Input() pressEnabled: boolean = true;\r\n  @Input() pressModel: any;\r\n  @Input() duration: number = 500;\r\n\r\n  @Output() longPressStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressing: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  pressing: boolean;\r\n  isLongPressing: boolean;\r\n  timeout: any;\r\n  mouseX: number = 0;\r\n  mouseY: number = 0;\r\n\r\n  subscription: Subscription;\r\n\r\n  @HostBinding('class.press')\r\n  get press(): boolean {\r\n    return this.pressing;\r\n  }\r\n\r\n  @HostBinding('class.longpress')\r\n  get isLongPress(): boolean {\r\n    return this.isLongPressing;\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMouseDown(event: MouseEvent): void {\r\n    // don't do right/middle clicks\r\n    if (event.which !== 1 || !this.pressEnabled) return;\r\n\r\n    // don't start drag if its on resize handle\r\n    const target = <HTMLElement>event.target;\r\n    if (target.classList.contains('resize-handle')) return;\r\n\r\n    this.mouseX = event.clientX;\r\n    this.mouseY = event.clientY;\r\n\r\n    this.pressing = true;\r\n    this.isLongPressing = false;\r\n\r\n    const mouseup = fromEvent(document, 'mouseup');\r\n    this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n    this.timeout = setTimeout(() => {\r\n      this.isLongPressing = true;\r\n      this.longPressStart.emit({\r\n        event,\r\n        model: this.pressModel\r\n      });\r\n\r\n      this.subscription.add(\r\n        fromEvent(document, 'mousemove')\r\n          .pipe(takeUntil(mouseup))\r\n          .subscribe((mouseEvent: MouseEvent) => this.onMouseMove(mouseEvent))\r\n      );\r\n\r\n      this.loop(event);\r\n    }, this.duration);\r\n\r\n    this.loop(event);\r\n  }\r\n\r\n  onMouseMove(event: MouseEvent): void {\r\n    if (this.pressing && !this.isLongPressing) {\r\n      const xThres = Math.abs(event.clientX - this.mouseX) > 10;\r\n      const yThres = Math.abs(event.clientY - this.mouseY) > 10;\r\n\r\n      if (xThres || yThres) {\r\n        this.endPress();\r\n      }\r\n    }\r\n  }\r\n\r\n  loop(event: MouseEvent): void {\r\n    if (this.isLongPressing) {\r\n      this.timeout = setTimeout(() => {\r\n        this.longPressing.emit({\r\n          event,\r\n          model: this.pressModel\r\n        });\r\n        this.loop(event);\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  endPress(): void {\r\n    clearTimeout(this.timeout);\r\n    this.isLongPressing = false;\r\n    this.pressing = false;\r\n    this._destroySubscription();\r\n\r\n    this.longPressEnd.emit({\r\n      model: this.pressModel\r\n    });\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.endPress();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  Renderer2,\r\n  NgZone,\r\n  OnInit,\r\n  OnDestroy,\r\n  HostBinding,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { MouseEvent } from '../../events';\r\n\r\n@Component({\r\n  selector: 'datatable-scroller',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    class: 'datatable-scroll'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScrollerComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean = false;\r\n  @Input() scrollbarH: boolean = false;\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  scrollHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  @Input()\r\n  scrollWidth: number;\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n\r\n  scrollYPos: number = 0;\r\n  scrollXPos: number = 0;\r\n  prevScrollYPos: number = 0;\r\n  prevScrollXPos: number = 0;\r\n  element: any;\r\n  parentElement: any;\r\n  onScrollListener: any;\r\n\r\n  private _scrollEventListener: any = null;\r\n\r\n  constructor(private ngZone: NgZone, element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // manual bind so we don't always listen\r\n    if (this.scrollbarV || this.scrollbarH) {\r\n      const renderer = this.renderer;\r\n      this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\r\n      this._scrollEventListener = this.onScrolled.bind(this);\r\n      this.parentElement.addEventListener('scroll', this._scrollEventListener);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._scrollEventListener) {\r\n      this.parentElement.removeEventListener('scroll', this._scrollEventListener);\r\n      this._scrollEventListener = null;\r\n    }\r\n  }\r\n\r\n  setOffset(offsetY: number): void {\r\n    if (this.parentElement) {\r\n      this.parentElement.scrollTop = offsetY;\r\n    }\r\n  }\r\n\r\n  onScrolled(event: MouseEvent): void {\r\n    const dom: Element = <Element>event.currentTarget;\r\n    requestAnimationFrame(() => {\r\n      this.scrollYPos = dom.scrollTop;\r\n      this.scrollXPos = dom.scrollLeft;\r\n      this.updateOffset();\r\n    });\r\n  }\r\n\r\n  updateOffset(): void {\r\n    let direction: string;\r\n    if (this.scrollYPos < this.prevScrollYPos) {\r\n      direction = 'down';\r\n    } else if (this.scrollYPos > this.prevScrollYPos) {\r\n      direction = 'up';\r\n    }\r\n\r\n    this.scroll.emit({\r\n      direction,\r\n      scrollYPos: this.scrollYPos,\r\n      scrollXPos: this.scrollXPos\r\n    });\r\n\r\n    this.prevScrollYPos = this.scrollYPos;\r\n    this.prevScrollXPos = this.scrollXPos;\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-header-template]' })\r\nexport class DataTableColumnHeaderDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-cell-template]' })\r\nexport class DataTableColumnCellDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-tree-toggle]' })\r\nexport class DataTableColumnCellTreeToggle {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef, ContentChild, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { DataTableColumnHeaderDirective } from './column-header.directive';\r\nimport { DataTableColumnCellDirective } from './column-cell.directive';\r\nimport { DataTableColumnCellTreeToggle } from './tree.directive';\r\nimport { ColumnChangesService } from '../../services/column-changes.service';\r\nimport { TableColumnProp } from '../../types/table-column.type';\r\n\r\n@Directive({ selector: 'ngx-datatable-column' })\r\nexport class DataTableColumnDirective implements OnChanges {\r\n  @Input() name: string;\r\n  @Input() prop: TableColumnProp;\r\n  @Input() frozenLeft: any;\r\n  @Input() frozenRight: any;\r\n  @Input() flexGrow: number;\r\n  @Input() resizeable: boolean;\r\n  @Input() comparator: any;\r\n  @Input() pipe: any;\r\n  @Input() sortable: boolean;\r\n  @Input() draggable: boolean;\r\n  @Input() canAutoResize: boolean;\r\n  @Input() minWidth: number;\r\n  @Input() width: number;\r\n  @Input() maxWidth: number;\r\n  @Input() checkboxable: boolean;\r\n  @Input() headerCheckboxable: boolean;\r\n  @Input() headerClass: string | ((data: any) => string | any);\r\n  @Input() cellClass: string | ((data: any) => string | any);\r\n  @Input() isTreeColumn: boolean;\r\n  @Input() treeLevelIndent: number;\r\n  @Input() summaryFunc: (cells: any[]) => any;\r\n  @Input() summaryTemplate: TemplateRef<any>;\r\n\r\n  @Input('cellTemplate')\r\n  _cellTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })\r\n  _cellTemplateQuery: TemplateRef<any>;\r\n\r\n  get cellTemplate(): TemplateRef<any> {\r\n    return this._cellTemplateInput || this._cellTemplateQuery;\r\n  }\r\n\r\n  @Input('headerTemplate')\r\n  _headerTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })\r\n  _headerTemplateQuery: TemplateRef<any>;\r\n\r\n  get headerTemplate(): TemplateRef<any> {\r\n    return this._headerTemplateInput || this._headerTemplateQuery;\r\n  }\r\n\r\n  @Input('treeToggleTemplate')\r\n  _treeToggleTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })\r\n  _treeToggleTemplateQuery: TemplateRef<any>;\r\n\r\n  get treeToggleTemplate(): TemplateRef<any> {\r\n    return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\r\n  }\r\n\r\n  private isFirstChange = true;\r\n\r\n  constructor(private columnChangesService: ColumnChangesService) {}\r\n\r\n  ngOnChanges() {\r\n    if (this.isFirstChange) {\r\n      this.isFirstChange = false;\r\n    } else {\r\n      this.columnChangesService.onInputChange();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Returns the columns by pin.\r\n */\r\nexport function columnsByPin(cols: any[]) {\r\n  const ret: { left: any; center: any; right: any } = {\r\n    left: [],\r\n    center: [],\r\n    right: []\r\n  };\r\n\r\n  if (cols) {\r\n    for (const col of cols) {\r\n      if (col.frozenLeft) {\r\n        ret.left.push(col);\r\n      } else if (col.frozenRight) {\r\n        ret.right.push(col);\r\n      } else {\r\n        ret.center.push(col);\r\n      }\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Returns the widths of all group sets of a column\r\n */\r\nexport function columnGroupWidths(groups: any, all: any) {\r\n  return {\r\n    left: columnTotalWidth(groups.left),\r\n    center: columnTotalWidth(groups.center),\r\n    right: columnTotalWidth(groups.right),\r\n    total: Math.floor(columnTotalWidth(all))\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnTotalWidth(columns: any[], prop?: string) {\r\n  let totalWidth = 0;\r\n\r\n  if (columns) {\r\n    for (const c of columns) {\r\n      const has = prop && c[prop];\r\n      const width = has ? c[prop] : c.width;\r\n      totalWidth = totalWidth + parseFloat(width);\r\n    }\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnsTotalWidth(columns: any, prop?: any) {\r\n  let totalWidth = 0;\r\n\r\n  for (const column of columns) {\r\n    const has = prop && column[prop];\r\n    totalWidth = totalWidth + (has ? column[prop] : column.width);\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\nexport function columnsByPinArr(val: any) {\r\n  const colsByPinArr = [];\r\n  const colsByPin = columnsByPin(val);\r\n\r\n  colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\r\n  colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\r\n  colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\r\n\r\n  return colsByPinArr;\r\n}\r\n","export enum SortType {\r\n  single = 'single',\r\n  multi = 'multi'\r\n}\r\n","export enum SelectionType {\r\n  single = 'single',\r\n  multi = 'multi',\r\n  multiClick = 'multiClick',\r\n  cell = 'cell',\r\n  checkbox = 'checkbox'\r\n}\r\n","/**\r\n * Converts strings from something to camel case\r\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\r\n */\r\nexport function camelCase(str: string): string {\r\n  // Replace special characters with a space\r\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\r\n  // put a space before an uppercase letter\r\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\r\n\r\n  // Lower case first character and some other stuff\r\n  str = str\r\n    .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\r\n    .trim()\r\n    .toLowerCase();\r\n\r\n  // uppercase characters preceded by a space or number\r\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function(a, b, c) {\r\n    return b.trim() + c.toUpperCase();\r\n  });\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Converts strings from camel case to words\r\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\r\n */\r\nexport function deCamelCase(str: string): string {\r\n  return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\r\n}\r\n","import { camelCase } from './camel-case';\r\n\r\nconst cache = {};\r\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\r\n\r\n// Get Prefix\r\n// http://davidwalsh.name/vendor-prefix\r\nconst prefix = (function() {\r\n  const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\r\n  const match =\r\n    typeof styles !== 'undefined'\r\n      ? Array.prototype.slice\r\n          .call(styles)\r\n          .join('')\r\n          .match(/-(moz|webkit|ms)-/)\r\n      : null;\r\n  const pre = match !== null ? match[1] : undefined;\r\n  // tslint:disable-next-line: tsr-detect-non-literal-regexp\r\n  const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\r\n\r\n  return dom\r\n    ? {\r\n        dom,\r\n        lowercase: pre,\r\n        css: `-${pre}-`,\r\n        js: pre[0].toUpperCase() + pre.substr(1)\r\n      }\r\n    : undefined;\r\n})();\r\n\r\nexport function getVendorPrefixedName(property: string) {\r\n  const name = camelCase(property);\r\n\r\n  if (!cache[name]) {\r\n    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\r\n      cache[name] = prefix.css + property;\r\n    } else if (testStyle[property] !== undefined) {\r\n      cache[name] = property;\r\n    }\r\n  }\r\n\r\n  return cache[name];\r\n}\r\n","import { getVendorPrefixedName } from './prefixes';\r\nimport { camelCase } from './camel-case';\r\n\r\n// browser detection and prefixing tools\r\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\r\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\r\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\r\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\r\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\r\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\r\n\r\nexport function translateXY(styles: any, x: number, y: number) {\r\n  if (typeof transform !== 'undefined' && hasCSSTransforms) {\r\n    if (!isSafari && hasCSS3DTransforms) {\r\n      styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\r\n      styles[backfaceVisibility] = 'hidden';\r\n    } else {\r\n      styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\r\n    }\r\n  } else {\r\n    styles.top = `${y}px`;\r\n    styles.left = `${x}px`;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  ViewRef\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\r\nimport { SortType } from '../../types/sort.type';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { DataTableColumnDirective } from '../columns/column.directive';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-header',\r\n  template: `\r\n    <div\r\n      orderable\r\n      (reorder)=\"onColumnReordered($event)\"\r\n      (targetChanged)=\"onTargetChanged($event)\"\r\n      [style.width.px]=\"_columnGroupWidths.total\"\r\n      class=\"datatable-header-inner\"\r\n    >\r\n      <div\r\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\r\n        [class]=\"'datatable-row-' + colGroup.type\"\r\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\r\n      >\r\n        <datatable-header-cell\r\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\r\n          [ngClass]=\"{ 'filter-template-wrap': column.filter }\"\r\n          resizeable\r\n          [resizeEnabled]=\"column.resizeable\"\r\n          (resize)=\"onColumnResized($event, column)\"\r\n          long-press\r\n          [pressModel]=\"column\"\r\n          [pressEnabled]=\"reorderable && column.draggable\"\r\n          (longPressStart)=\"onLongPressStart($event)\"\r\n          (longPressEnd)=\"onLongPressEnd($event)\"\r\n          draggable\r\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\r\n          [dragY]=\"false\"\r\n          [dragModel]=\"column\"\r\n          [dragEventTarget]=\"dragEventTarget\"\r\n          [headerHeight]=\"headerHeight\"\r\n          [isTarget]=\"column.isTarget\"\r\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\r\n          [targetMarkerContext]=\"column.targetMarkerContext\"\r\n          [column]=\"column\"\r\n          [sortType]=\"sortType\"\r\n          [sorts]=\"sorts\"\r\n          [selectionType]=\"selectionType\"\r\n          [sortAscendingIcon]=\"sortAscendingIcon\"\r\n          [sortDescendingIcon]=\"sortDescendingIcon\"\r\n          [allRowsSelected]=\"allRowsSelected\"\r\n          (sort)=\"onSort($event)\"\r\n          (filter)=\"onColumnFilter($event)\"\r\n          (select)=\"select.emit($event)\"\r\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\r\n        >\r\n        </datatable-header-cell>\r\n      </div>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-header'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableHeaderComponent {\r\n  @Input() sortAscendingIcon: any;\r\n  @Input() sortDescendingIcon: any;\r\n  @Input() scrollbarH: boolean;\r\n  @Input() dealsWithGroup: boolean;\r\n  @Input() targetMarkerTemplate: any;\r\n\r\n  targetMarkerContext: any;\r\n\r\n  @Input() set innerWidth(val: number) {\r\n    this._innerWidth = val;\r\n    setTimeout(() => {\r\n      if (this._columns) {\r\n        const colByPin = columnsByPin(this._columns);\r\n        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n        this.setStylesByGroup();\r\n      }\r\n    });\r\n  }\r\n\r\n  get innerWidth(): number {\r\n    return this._innerWidth;\r\n  }\r\n\r\n  @Input() sorts: any[];\r\n  @Input() sortType: SortType;\r\n  @Input() allRowsSelected: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() reorderable: boolean;\r\n\r\n  dragEventTarget: any;\r\n\r\n  @HostBinding('style.height')\r\n  @Input()\r\n  set headerHeight(val: any) {\r\n    if (val !== 'auto') {\r\n      this._headerHeight = `${val}px`;\r\n    } else {\r\n      this._headerHeight = val;\r\n    }\r\n  }\r\n\r\n  get headerHeight(): any {\r\n    return this._headerHeight;\r\n  }\r\n\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n\r\n    const colsByPin = columnsByPin(val);\r\n    this._columnsByPin = columnsByPinArr(val);\r\n    setTimeout(() => {\r\n      this._columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n      this.setStylesByGroup();\r\n    });\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input()\r\n  set offsetX(val: number) {\r\n    this._offsetX = val;\r\n    this.setStylesByGroup();\r\n  }\r\n  get offsetX() {\r\n    return this._offsetX;\r\n  }\r\n\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\r\n  @Output() filter: EventEmitter<any> = new EventEmitter();\r\n\r\n  _columnsByPin: any;\r\n  _columnGroupWidths: any = {\r\n    total: 100\r\n  };\r\n  _innerWidth: number;\r\n  _offsetX: number;\r\n  _columns: any[];\r\n  _headerHeight: string;\r\n  _styleByGroup: { [prop: string]: {} } = {\r\n    left: {},\r\n    center: {},\r\n    right: {}\r\n  };\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  onLongPressStart({ event, model }: { event: any; model: any }) {\r\n    model.dragging = true;\r\n    this.dragEventTarget = event;\r\n  }\r\n\r\n  onLongPressEnd({ event, model }: { event: any; model: any }) {\r\n    this.dragEventTarget = event;\r\n\r\n    // delay resetting so sort can be\r\n    // prevented if we were dragging\r\n    setTimeout(() => {\r\n      // datatable component creates copies from columns on reorder\r\n      // set dragging to false on new objects\r\n      const column = this._columns.find(c => c.$$id === model.$$id);\r\n      if (column) {\r\n        column.dragging = false;\r\n      }\r\n    }, 5);\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  get headerWidth(): string {\r\n    if (this.scrollbarH) {\r\n      return this.innerWidth + 'px';\r\n    }\r\n\r\n    return '100%';\r\n  }\r\n\r\n  trackByGroups(index: number, colGroup: any): any {\r\n    return colGroup.type;\r\n  }\r\n\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  onColumnResized(width: number, column: DataTableColumnDirective): void {\r\n    if (width <= column.minWidth) {\r\n      width = column.minWidth;\r\n    } else if (width >= column.maxWidth) {\r\n      width = column.maxWidth;\r\n    }\r\n\r\n    this.resize.emit({\r\n      column,\r\n      prevValue: column.width,\r\n      newValue: width\r\n    });\r\n  }\r\n\r\n  onColumnReordered({ prevIndex, newIndex, model }: any): void {\r\n    const column = this.getColumn(newIndex);\r\n    column.isTarget = false;\r\n    column.targetMarkerContext = undefined;\r\n    this.reorder.emit({\r\n      column: model,\r\n      prevValue: prevIndex,\r\n      newValue: newIndex\r\n    });\r\n  }\r\n\r\n  onTargetChanged({ prevIndex, newIndex, initialIndex }: any): void {\r\n    if (prevIndex || prevIndex === 0) {\r\n      const oldColumn = this.getColumn(prevIndex);\r\n      oldColumn.isTarget = false;\r\n      oldColumn.targetMarkerContext = undefined;\r\n    }\r\n    if (newIndex || newIndex === 0) {\r\n      const newColumn = this.getColumn(newIndex);\r\n      newColumn.isTarget = true;\r\n\r\n      if (initialIndex !== newIndex) {\r\n        newColumn.targetMarkerContext = {\r\n          class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  getColumn(index: number): any {\r\n    const leftColumnCount = this._columnsByPin[0].columns.length;\r\n    if (index < leftColumnCount) {\r\n      return this._columnsByPin[0].columns[index];\r\n    }\r\n\r\n    const centerColumnCount = this._columnsByPin[1].columns.length;\r\n    if (index < leftColumnCount + centerColumnCount) {\r\n      return this._columnsByPin[1].columns[index - leftColumnCount];\r\n    }\r\n\r\n    return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\r\n  }\r\n\r\n  onSort({ column, prevValue, newValue }: any): void {\r\n    // if we are dragging don't sort!\r\n    if (column.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sorts = this.calcNewSorts(column, prevValue, newValue);\r\n    this.sort.emit({\r\n      sorts,\r\n      column,\r\n      prevValue,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  calcNewSorts(column: any, prevValue: number, newValue: number): any[] {\r\n    let idx = 0;\r\n\r\n    if (!this.sorts) {\r\n      this.sorts = [];\r\n    }\r\n\r\n    const sorts = this.sorts.map((s, i) => {\r\n      s = { ...s };\r\n      if (s.prop === column.prop) {\r\n        idx = i;\r\n      }\r\n      return s;\r\n    });\r\n\r\n    if (newValue === undefined) {\r\n      sorts.splice(idx, 1);\r\n    } else if (prevValue) {\r\n      sorts[idx].dir = newValue;\r\n    } else {\r\n      if (this.sortType === SortType.single) {\r\n        sorts.splice(0, this.sorts.length);\r\n      }\r\n\r\n      sorts.push({ dir: newValue, prop: column.prop });\r\n    }\r\n\r\n    return sorts;\r\n  }\r\n\r\n  setStylesByGroup() {\r\n    this._styleByGroup.left = this.calcStylesByGroup('left');\r\n    this._styleByGroup.center = this.calcStylesByGroup('center');\r\n    this._styleByGroup.right = this.calcStylesByGroup('right');\r\n    if (!(this.cd as ViewRef).destroyed) {\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  calcStylesByGroup(group: string): any {\r\n    const widths = this._columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'center') {\r\n      translateXY(styles, offsetX * -1, 0);\r\n    } else if (group === 'right') {\r\n      const totalDiff = widths.total - this.innerWidth;\r\n      const offset = totalDiff * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  onColumnFilter(event: any): void {\r\n    this.filter.emit(event);\r\n  }\r\n}\r\n","import { TableColumnProp } from '../types/table-column.type';\r\n\r\n// maybe rename this file to prop-getters.ts\r\n\r\nexport type ValueGetter = (obj: any, prop: TableColumnProp) => any;\r\n\r\n/**\r\n * Always returns the empty string ''\r\n */\r\nexport function emptyStringGetter(): string {\r\n  return '';\r\n}\r\n\r\n/**\r\n * Returns the appropriate getter function for this kind of prop.\r\n * If prop == null, returns the emptyStringGetter.\r\n */\r\nexport function getterForProp(prop: TableColumnProp): ValueGetter {\r\n  if (prop == null) {\r\n    return emptyStringGetter;\r\n  }\r\n\r\n  if (typeof prop === 'number') {\r\n    return numericIndexGetter;\r\n  } else {\r\n    // deep or simple\r\n    if (prop.indexOf('.') !== -1) {\r\n      return deepValueGetter;\r\n    } else {\r\n      return shallowValueGetter;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the value at this numeric index.\r\n * @param row array of values\r\n * @param index numeric index\r\n * @returns any or '' if invalid index\r\n */\r\nexport function numericIndexGetter(row: any[], index: number): any {\r\n  if (row == null) {\r\n    return '';\r\n  }\r\n  // mimic behavior of deepValueGetter\r\n  if (!row || index == null) {\r\n    return row;\r\n  }\r\n\r\n  const value = row[index];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns the value of a field.\r\n * (more efficient than deepValueGetter)\r\n * @param obj object containing the field\r\n * @param fieldName field name string\r\n */\r\nexport function shallowValueGetter(obj: any, fieldName: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !fieldName) {\r\n    return obj;\r\n  }\r\n\r\n  const value = obj[fieldName];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns a deep object given a string. zoo['animal.type']\r\n */\r\nexport function deepValueGetter(obj: any, path: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !path) {\r\n    return obj;\r\n  }\r\n\r\n  // check if path matches a root-level field\r\n  // { \"a.b.c\": 123 }\r\n  let current = obj[path];\r\n  if (current !== undefined) {\r\n    return current;\r\n  }\r\n\r\n  current = obj;\r\n  const split = path.split('.');\r\n\r\n  if (split.length) {\r\n    for (let i = 0; i < split.length; i++) {\r\n      current = current[split[i]];\r\n\r\n      // if found undefined, return empty string\r\n      if (current === undefined || current === null) {\r\n        return '';\r\n      }\r\n    }\r\n  }\r\n\r\n  return current;\r\n}\r\n","export enum SortDirection {\r\n  asc = 'asc',\r\n  desc = 'desc'\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { SortType } from '../types/sort.type';\r\nimport { SortDirection } from '../types/sort-direction.type';\r\nimport { SortPropDir } from '../types/sort-prop-dir.type';\r\n/**\r\n * Gets the next sort direction\r\n */\r\nexport function nextSortDir(sortType: SortType, current: SortDirection): SortDirection | undefined {\r\n  if (sortType === SortType.single) {\r\n    if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else {\r\n      return SortDirection.asc;\r\n    }\r\n  } else {\r\n    if (!current) {\r\n      return SortDirection.asc;\r\n    } else if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else if (current === SortDirection.desc) {\r\n      return undefined;\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Adapted from fueld-ui on 6/216\r\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\r\n */\r\nexport function orderByComparator(a: any, b: any): number {\r\n  if (a === null || typeof a === 'undefined') a = 0;\r\n  if (b === null || typeof b === 'undefined') b = 0;\r\n  if (a instanceof Date && b instanceof Date) {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n  } else if (isNaN(parseFloat(a)) || !isFinite(a) || (isNaN(parseFloat(b)) || !isFinite(b))) {\r\n    // Convert to string in case of a=0 or b=0\r\n    a = String(a);\r\n    b = String(b);\r\n    // Isn't a number so lowercase the string to properly compare\r\n    if (a.toLowerCase() < b.toLowerCase()) return -1;\r\n    if (a.toLowerCase() > b.toLowerCase()) return 1;\r\n  } else {\r\n    // Parse strings as numbers to compare properly\r\n    if (parseFloat(a) < parseFloat(b)) return -1;\r\n    if (parseFloat(a) > parseFloat(b)) return 1;\r\n  }\r\n\r\n  // equal each other\r\n  return 0;\r\n}\r\n\r\n/**\r\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\r\n * does not sort the `rows` argument in place\r\n */\r\nexport function sortRows(rows: any[], columns: any[], dirs: SortPropDir[]): any[] {\r\n  if (!rows) return [];\r\n  if (!dirs || !dirs.length || !columns) return [...rows];\r\n\r\n  /**\r\n   * record the row ordering of results from prior sort operations (if applicable)\r\n   * this is necessary to guarantee stable sorting behavior\r\n   */\r\n  const rowToIndexMap = new Map<any, number>();\r\n  rows.forEach((row, index) => rowToIndexMap.set(row, index));\r\n\r\n  const temp = [...rows];\r\n  const cols = columns.reduce((obj, col) => {\r\n    if (col.comparator && typeof col.comparator === 'function') {\r\n      obj[col.prop] = col.comparator;\r\n    }\r\n    return obj;\r\n  }, {});\r\n\r\n  // cache valueGetter and compareFn so that they\r\n  // do not need to be looked-up in the sort function body\r\n  const cachedDirs = dirs.map(dir => {\r\n    const prop = dir.prop;\r\n    return {\r\n      prop,\r\n      dir: dir.dir,\r\n      valueGetter: getterForProp(prop),\r\n      compareFn: cols[prop] || orderByComparator\r\n    };\r\n  });\r\n\r\n  return temp.sort(function(rowA: any, rowB: any) {\r\n    for (const cachedDir of cachedDirs) {\r\n      // Get property and valuegetters for column to be sorted\r\n      const { prop, valueGetter } = cachedDir;\r\n      // Get A and B cell values from rows based on properties of the columns\r\n      const propA = valueGetter(rowA, prop);\r\n      const propB = valueGetter(rowB, prop);\r\n\r\n      // Compare function gets five parameters:\r\n      // Two cell values to be compared as propA and propB\r\n      // Two rows corresponding to the cells as rowA and rowB\r\n      // Direction of the sort for this column as SortDirection\r\n      // Compare can be a standard JS comparison function (a,b) => -1|0|1\r\n      // as additional parameters are silently ignored. The whole row and sort\r\n      // direction enable more complex sort logic.\r\n      const comparison =\r\n        cachedDir.dir !== SortDirection.desc\r\n          ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\r\n          : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\r\n\r\n      // Don't return 0 yet in case of needing to sort by next property\r\n      if (comparison !== 0) return comparison;\r\n    }\r\n\r\n    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;\r\n\r\n    /**\r\n     * all else being equal, preserve original order of the rows (stable sort)\r\n     */\r\n    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\r\n  });\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  HostBinding,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\nimport { SortType } from '../../types/sort.type';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { TableColumn } from '../../types/table-column.type';\r\nimport { nextSortDir } from '../../utils/sort';\r\nimport { SortDirection } from '../../types/sort-direction.type';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'datatable-header-cell',\r\n  template: `\r\n    <div class=\"datatable-header-cell-template-wrap\">\r\n      <ng-container *ngIf=\"column.filter\">\r\n        <mat-form-field class=\"filter-header\">\r\n          <input\r\n            matInput\r\n            [placeholder]=\"column.name\"\r\n            [(ngModel)]=\"filterCache[column.prop]\"\r\n            (ngModelChange)=\"setFilter(column.prop)\"\r\n          />\r\n          <button\r\n            mat-button\r\n            *ngIf=\"filterCache[column.prop]\"\r\n            matSuffix\r\n            mat-icon-button\r\n            aria-label=\"Clear\"\r\n            (click)=\"resetFilter(column.prop)\"\r\n          >\r\n            <mat-icon class=\"mat-icon material-icons\">close</mat-icon>\r\n          </button>\r\n        </mat-form-field>\r\n        <button mat-icon-button>\r\n          <mat-icon class=\"mat-icon material-icons\" (click)=\"onSort()\">sort</mat-icon>\r\n        </button>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!column.filter\">\r\n        <ng-template\r\n          *ngIf=\"isTarget\"\r\n          [ngTemplateOutlet]=\"targetMarkerTemplate\"\r\n          [ngTemplateOutletContext]=\"targetMarkerContext\"\r\n        >\r\n        </ng-template>\r\n        <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\r\n          <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\r\n        </label>\r\n        <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\r\n          <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\r\n        </span>\r\n        <ng-template\r\n          *ngIf=\"column.headerTemplate\"\r\n          [ngTemplateOutlet]=\"column.headerTemplate\"\r\n          [ngTemplateOutletContext]=\"cellContext\"\r\n        >\r\n        </ng-template>\r\n        <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-header-cell'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableHeaderCellComponent {\r\n  @Input() sortType: SortType;\r\n  @Input() sortAscendingIcon: string;\r\n  @Input() sortDescendingIcon: string;\r\n\r\n  @Input() isTarget: boolean;\r\n  @Input() targetMarkerTemplate: any;\r\n  @Input() targetMarkerContext: any;\r\n\r\n  _allRowsSelected: boolean;\r\n\r\n  @Input() set allRowsSelected(value) {\r\n    this._allRowsSelected = value;\r\n    this.cellContext.allRowsSelected = value;\r\n  }\r\n  get allRowsSelected() {\r\n    return this._allRowsSelected;\r\n  }\r\n\r\n  @Input() selectionType: SelectionType;\r\n\r\n  @Input() set column(column: TableColumn) {\r\n    this._column = column;\r\n    this.cellContext.column = column;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  headerHeight: number;\r\n\r\n  @Input() set sorts(val: any[]) {\r\n    this._sorts = val;\r\n    this.sortDir = this.calcSortDir(val);\r\n    this.cellContext.sortDir = this.sortDir;\r\n    this.sortClass = this.calcSortClass(this.sortDir);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get sorts(): any[] {\r\n    return this._sorts;\r\n  }\r\n\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\r\n  @Output() filter: EventEmitter<any> = new EventEmitter();\r\n\r\n  @HostBinding('class')\r\n  get columnCssClasses(): any {\r\n    let cls = 'datatable-header-cell';\r\n\r\n    if (this.column.sortable) cls += ' sortable';\r\n    if (this.column.resizeable) cls += ' resizeable';\r\n    if (this.column.headerClass) {\r\n      if (typeof this.column.headerClass === 'string') {\r\n        cls += ' ' + this.column.headerClass;\r\n      } else if (typeof this.column.headerClass === 'function') {\r\n        const res = this.column.headerClass({\r\n          column: this.column\r\n        });\r\n\r\n        if (typeof res === 'string') {\r\n          cls += res;\r\n        } else if (typeof res === 'object') {\r\n          const keys = Object.keys(res);\r\n          for (const k of keys) {\r\n            if (res[k] === true) cls += ` ${k}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const sortDir = this.sortDir;\r\n    if (sortDir) {\r\n      cls += ` sort-active sort-${sortDir}`;\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('attr.title')\r\n  get name(): string {\r\n    // guaranteed to have a value by setColumnDefaults() in column-helper.ts\r\n    return this.column.headerTemplate === undefined ? this.column.name : undefined;\r\n  }\r\n\r\n  @HostBinding('style.minWidth.px')\r\n  get minWidth(): number {\r\n    return this.column.minWidth;\r\n  }\r\n\r\n  @HostBinding('style.maxWidth.px')\r\n  get maxWidth(): number {\r\n    return this.column.maxWidth;\r\n  }\r\n\r\n  @HostBinding('style.width.px')\r\n  get width(): number {\r\n    return this.column.width;\r\n  }\r\n\r\n  get isCheckboxable(): boolean {\r\n    return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\r\n  }\r\n\r\n  sortFn = this.onSort.bind(this);\r\n  sortClass: string;\r\n  sortDir: SortDirection;\r\n  selectFn = this.select.emit.bind(this.select);\r\n  filterCache = {};\r\n\r\n  cellContext: any = {\r\n    column: this.column,\r\n    sortDir: this.sortDir,\r\n    sortFn: this.sortFn,\r\n    allRowsSelected: this.allRowsSelected,\r\n    selectFn: this.selectFn\r\n  };\r\n\r\n  private _column: TableColumn;\r\n  private _sorts: any[];\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onContextmenu($event: MouseEvent): void {\r\n    this.columnContextmenu.emit({ event: $event, column: this.column });\r\n  }\r\n\r\n  calcSortDir(sorts: any[]): any {\r\n    if (sorts && this.column) {\r\n      const sort = sorts.find((s: any) => {\r\n        return s.prop === this.column.prop;\r\n      });\r\n\r\n      if (sort) return sort.dir;\r\n    }\r\n  }\r\n\r\n  onSort(): void {\r\n    if (!this.column.sortable) return;\r\n\r\n    const newValue = nextSortDir(this.sortType, this.sortDir);\r\n    this.sort.emit({\r\n      column: this.column,\r\n      prevValue: this.sortDir,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  calcSortClass(sortDir: SortDirection): string {\r\n    if (sortDir === SortDirection.asc) {\r\n      return `sort-btn sort-asc ${this.sortAscendingIcon}`;\r\n    } else if (sortDir === SortDirection.desc) {\r\n      return `sort-btn sort-desc ${this.sortDescendingIcon}`;\r\n    } else {\r\n      return `sort-btn`;\r\n    }\r\n  }\r\n\r\n  setFilter(column) {\r\n    this.filter.emit({\r\n      column,\r\n      value: this.filterCache[column]\r\n    });\r\n  }\r\n\r\n  resetFilter(column) {\r\n    this.filterCache[column] = '';\r\n    this.filter.emit({\r\n      column\r\n    });\r\n  }\r\n}\r\n","/**\r\n * This object contains the cache of the various row heights that are present inside\r\n * the data table.   Its based on Fenwick tree data structure that helps with\r\n * querying sums that have time complexity of log n.\r\n *\r\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\r\n * https://github.com/mikolalysenko/fenwick-tree\r\n *\r\n */\r\nexport class RowHeightCache {\r\n  /**\r\n   * Tree Array stores the cumulative information of the row heights to perform efficient\r\n   * range queries and updates.  Currently the tree is initialized to the base row\r\n   * height instead of the detail row height.\r\n   */\r\n  private treeArray: number[] = [];\r\n\r\n  /**\r\n   * Clear the Tree array.\r\n   */\r\n  clearCache(): void {\r\n    this.treeArray = [];\r\n  }\r\n\r\n  /**\r\n   * Initialize the Fenwick tree with row Heights.\r\n   *\r\n   * @param rows The array of rows which contain the expanded status.\r\n   * @param rowHeight The row height.\r\n   * @param detailRowHeight The detail row height.\r\n   */\r\n  initCache(details: any): void {\r\n    const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\r\n    const isFn = typeof rowHeight === 'function';\r\n    const isDetailFn = typeof detailRowHeight === 'function';\r\n\r\n    if (!isFn && isNaN(rowHeight)) {\r\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\r\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\r\n    }\r\n\r\n    // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\r\n    if (!isDetailFn && isNaN(detailRowHeight)) {\r\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\r\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\r\n    }\r\n\r\n    const n = externalVirtual ? rowCount : rows.length;\r\n    this.treeArray = new Array(n);\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      this.treeArray[i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      const row = rows[i];\r\n      let currentRowHeight = rowHeight;\r\n      if (isFn) {\r\n        currentRowHeight = rowHeight(row);\r\n      }\r\n\r\n      // Add the detail row height to the already expanded rows.\r\n      // This is useful for the table that goes through a filter or sort.\r\n      const expanded = rowExpansions.has(row);\r\n      if (row && expanded) {\r\n        if (isDetailFn) {\r\n          const index = rowIndexes.get(row);\r\n          currentRowHeight += detailRowHeight(row, index);\r\n        } else {\r\n          currentRowHeight += detailRowHeight;\r\n        }\r\n      }\r\n\r\n      this.update(i, currentRowHeight);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given the ScrollY position i.e. sum, provide the rowIndex\r\n   * that is present in the current view port.  Below handles edge cases.\r\n   */\r\n  getRowIndex(scrollY: number): number {\r\n    if (scrollY === 0) return 0;\r\n    return this.calcRowIndex(scrollY);\r\n  }\r\n\r\n  /**\r\n   * When a row is expanded or rowHeight is changed, update the height.  This can\r\n   * be utilized in future when Angular Data table supports dynamic row heights.\r\n   */\r\n  update(atRowIndex: number, byRowHeight: number): void {\r\n    if (!this.treeArray.length) {\r\n      throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\r\n        Row Height cache not initialized.`);\r\n    }\r\n\r\n    const n = this.treeArray.length;\r\n    atRowIndex |= 0;\r\n\r\n    while (atRowIndex < n) {\r\n      this.treeArray[atRowIndex] += byRowHeight;\r\n      atRowIndex |= atRowIndex + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Range Sum query from 1 to the rowIndex\r\n   */\r\n  query(atIndex: number): number {\r\n    if (!this.treeArray.length) {\r\n      throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\r\n    }\r\n\r\n    let sum = 0;\r\n    atIndex |= 0;\r\n\r\n    while (atIndex >= 0) {\r\n      sum += this.treeArray[atIndex];\r\n      atIndex = (atIndex & (atIndex + 1)) - 1;\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Find the total height between 2 row indexes\r\n   */\r\n  queryBetween(atIndexA: number, atIndexB: number): number {\r\n    return this.query(atIndexB) - this.query(atIndexA - 1);\r\n  }\r\n\r\n  /**\r\n   * Given the ScrollY position i.e. sum, provide the rowIndex\r\n   * that is present in the current view port.\r\n   */\r\n  private calcRowIndex(sum: number): number {\r\n    if (!this.treeArray.length) return 0;\r\n\r\n    let pos = -1;\r\n    const dataLength = this.treeArray.length;\r\n\r\n    // Get the highest bit for the block size.\r\n    const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\r\n\r\n    for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\r\n      const nextPos = pos + blockSize;\r\n      if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\r\n        sum -= this.treeArray[nextPos];\r\n        pos = nextPos;\r\n      }\r\n    }\r\n\r\n    return pos + 1;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { ScrollerComponent } from './scroller.component';\r\nimport { MouseEvent } from '../../events';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { columnsByPin, columnGroupWidths } from '../../utils/column';\r\nimport { RowHeightCache } from '../../utils/row-height-cache';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-body',\r\n  template: `\r\n    <datatable-selection\r\n      #selector\r\n      [selected]=\"selected\"\r\n      [rows]=\"rows\"\r\n      [selectCheck]=\"selectCheck\"\r\n      [selectEnabled]=\"selectEnabled\"\r\n      [selectionType]=\"selectionType\"\r\n      [rowIdentity]=\"rowIdentity\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n    >\r\n      <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\r\n      <datatable-scroller\r\n        *ngIf=\"rows?.length\"\r\n        [scrollbarV]=\"scrollbarV\"\r\n        [scrollbarH]=\"scrollbarH\"\r\n        [scrollHeight]=\"scrollHeight\"\r\n        [scrollWidth]=\"columnGroupWidths?.total\"\r\n        (scroll)=\"onBodyScroll($event)\"\r\n      >\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n        <datatable-row-wrapper\r\n          [groupedRows]=\"groupedRows\"\r\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [ngStyle]=\"getRowsStyles(group)\"\r\n          [rowDetail]=\"rowDetail\"\r\n          [groupHeader]=\"groupHeader\"\r\n          [offsetX]=\"offsetX\"\r\n          [detailRowHeight]=\"getDetailRowHeight(group[i], i)\"\r\n          [row]=\"group\"\r\n          [expanded]=\"getRowExpanded(group)\"\r\n          [rowIndex]=\"getRowIndex(group[i])\"\r\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\r\n        >\r\n          <datatable-body-row\r\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\r\n            tabindex=\"-1\"\r\n            [isSelected]=\"selector.getRowSelected(group)\"\r\n            [innerWidth]=\"innerWidth\"\r\n            [offsetX]=\"offsetX\"\r\n            [columns]=\"columns\"\r\n            [rowDetail]=\"rowDetail\"\r\n            [rowHeight]=\"getRowHeight(group)\"\r\n            [row]=\"group\"\r\n            [rowIndex]=\"getRowIndex(group)\"\r\n            [expanded]=\"getRowExpanded(group)\"\r\n            [rowClass]=\"rowClass\"\r\n            [displayCheck]=\"displayCheck\"\r\n            [treeStatus]=\"group.treeStatus\"\r\n            (treeAction)=\"onTreeAction(group)\"\r\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\r\n          >\r\n          </datatable-body-row>\r\n          <ng-template #groupedRowsTemplate>\r\n            <datatable-body-row\r\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\r\n              tabindex=\"-1\"\r\n              [isSelected]=\"selector.getRowSelected(row)\"\r\n              [innerWidth]=\"innerWidth\"\r\n              [offsetX]=\"offsetX\"\r\n              [columns]=\"columns\"\r\n              [rowHeight]=\"getRowHeight(row)\"\r\n              [row]=\"row\"\r\n              [group]=\"group.value\"\r\n              [rowIndex]=\"getRowIndex(row)\"\r\n              [expanded]=\"getRowExpanded(row)\"\r\n              [rowClass]=\"rowClass\"\r\n              (activate)=\"selector.onActivate($event, i)\"\r\n            >\r\n            </datatable-body-row>\r\n          </ng-template>\r\n        </datatable-row-wrapper>\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\r\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n      </datatable-scroller>\r\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\r\n    </datatable-selection>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    class: 'datatable-body'\r\n  }\r\n})\r\nexport class DataTableBodyComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean;\r\n  @Input() scrollbarH: boolean;\r\n  @Input() loadingIndicator: boolean;\r\n  @Input() externalPaging: boolean;\r\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number);\r\n  @Input() offsetX: number;\r\n  @Input() emptyMessage: string;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() selected: any[] = [];\r\n  @Input() rowIdentity: any;\r\n  @Input() rowDetail: any;\r\n  @Input() groupHeader: any;\r\n  @Input() selectCheck: any;\r\n  @Input() displayCheck: any;\r\n  @Input() trackByProp: string;\r\n  @Input() rowClass: any;\r\n  @Input() groupedRows: any;\r\n  @Input() groupExpansionDefault: boolean;\r\n  @Input() innerWidth: number;\r\n  @Input() groupRowsBy: string;\r\n  @Input() virtualization: boolean;\r\n  @Input() summaryRow: boolean;\r\n  @Input() summaryPosition: string;\r\n  @Input() summaryHeight: number;\r\n\r\n  @Input() set pageSize(val: number) {\r\n    this._pageSize = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get pageSize(): number {\r\n    return this._pageSize;\r\n  }\r\n\r\n  @Input() set rows(val: any[]) {\r\n    this._rows = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get rows(): any[] {\r\n    return this._rows;\r\n  }\r\n\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n    const colsByPin = columnsByPin(val);\r\n    this.columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input() set offset(val: number) {\r\n    this._offset = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get offset(): number {\r\n    return this._offset;\r\n  }\r\n\r\n  @Input() set rowCount(val: number) {\r\n    this._rowCount = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get rowCount(): number {\r\n    return this._rowCount;\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  get bodyWidth(): string {\r\n    if (this.scrollbarH) {\r\n      return this.innerWidth + 'px';\r\n    } else {\r\n      return '100%';\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  @HostBinding('style.height')\r\n  set bodyHeight(val) {\r\n    if (this.scrollbarV) {\r\n      this._bodyHeight = val + 'px';\r\n    } else {\r\n      this._bodyHeight = 'auto';\r\n    }\r\n\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get bodyHeight() {\r\n    return this._bodyHeight;\r\n  }\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() detailToggle: EventEmitter<any> = new EventEmitter();\r\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild(ScrollerComponent, { static: false }) scroller: ScrollerComponent;\r\n\r\n  /**\r\n   * Returns if selection is enabled.\r\n   */\r\n  get selectEnabled(): boolean {\r\n    return !!this.selectionType;\r\n  }\r\n\r\n  /**\r\n   * Property that would calculate the height of scroll bar\r\n   * based on the row heights cache for virtual scroll and virtualization. Other scenarios\r\n   * calculate scroll height automatically (as height will be undefined).\r\n   */\r\n  get scrollHeight(): number | undefined {\r\n    if (this.scrollbarV && this.virtualization && this.rowCount) {\r\n      return this.rowHeightsCache.query(this.rowCount - 1);\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n\r\n  rowHeightsCache: RowHeightCache = new RowHeightCache();\r\n  temp: any[] = [];\r\n  offsetY = 0;\r\n  indexes: any = {};\r\n  columnGroupWidths: any;\r\n  columnGroupWidthsWithoutGroup: any;\r\n  rowTrackingFn: any;\r\n  listener: any;\r\n  rowIndexes: any = new Map();\r\n  rowExpansions: any[] = [];\r\n\r\n  _rows: any[];\r\n  _bodyHeight: any;\r\n  _columns: any[];\r\n  _rowCount: number;\r\n  _offset: number;\r\n  _pageSize: number;\r\n\r\n  /**\r\n   * Creates an instance of DataTableBodyComponent.\r\n   */\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    // declare fn here so we can get access to the `this` property\r\n    this.rowTrackingFn = (index: number, row: any): any => {\r\n      const idx = this.getRowIndex(row);\r\n      if (this.trackByProp) {\r\n        return row[this.trackByProp];\r\n      } else {\r\n        return idx;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Called after the constructor, initializing input properties\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.rowDetail) {\r\n      this.listener = this.rowDetail.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\r\n        if (type === 'row') {\r\n          this.toggleRowExpansion(value);\r\n        }\r\n        if (type === 'all') {\r\n          this.toggleAllRows(value);\r\n        }\r\n\r\n        // Refresh rows after toggle\r\n        // Fixes #883\r\n        this.updateIndexes();\r\n        this.updateRows();\r\n        this.cd.markForCheck();\r\n      });\r\n    }\r\n\r\n    if (this.groupHeader) {\r\n      this.listener = this.groupHeader.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\r\n        if (type === 'group') {\r\n          this.toggleRowExpansion(value);\r\n        }\r\n        if (type === 'all') {\r\n          this.toggleAllRows(value);\r\n        }\r\n\r\n        // Refresh rows after toggle\r\n        // Fixes #883\r\n        this.updateIndexes();\r\n        this.updateRows();\r\n        this.cd.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called once, before the instance is destroyed.\r\n   */\r\n  ngOnDestroy(): void {\r\n    if ((this.rowDetail || this.groupHeader) && this.listener) {\r\n      this.listener.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the Y offset given a new offset.\r\n   */\r\n  updateOffsetY(offset?: number): void {\r\n    // scroller is missing on empty table\r\n    if (!this.scroller) {\r\n      return;\r\n    }\r\n\r\n    if (this.scrollbarV && this.virtualization && offset) {\r\n      // First get the row Index that we need to move to.\r\n      const rowIndex = this.pageSize * offset;\r\n      offset = this.rowHeightsCache.query(rowIndex - 1);\r\n    } else if (this.scrollbarV && !this.virtualization) {\r\n      offset = 0;\r\n    }\r\n\r\n    this.scroller.setOffset(offset || 0);\r\n  }\r\n\r\n  /**\r\n   * Body was scrolled, this is mainly useful for\r\n   * when a user is server-side pagination via virtual scroll.\r\n   */\r\n  onBodyScroll(event: any): void {\r\n    const scrollYPos: number = event.scrollYPos;\r\n    const scrollXPos: number = event.scrollXPos;\r\n\r\n    // if scroll change, trigger update\r\n    // this is mainly used for header cell positions\r\n    if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\r\n      this.scroll.emit({\r\n        offsetY: scrollYPos,\r\n        offsetX: scrollXPos\r\n      });\r\n    }\r\n\r\n    this.offsetY = scrollYPos;\r\n    this.offsetX = scrollXPos;\r\n\r\n    this.updateIndexes();\r\n    this.updatePage(event.direction);\r\n    this.updateRows();\r\n  }\r\n\r\n  /**\r\n   * Updates the page given a direction.\r\n   */\r\n  updatePage(direction: string): void {\r\n    let offset = this.indexes.first / this.pageSize;\r\n\r\n    if (direction === 'up') {\r\n      offset = Math.ceil(offset);\r\n    } else if (direction === 'down') {\r\n      offset = Math.floor(offset);\r\n    }\r\n\r\n    if (direction !== undefined && !isNaN(offset)) {\r\n      this.page.emit({ offset });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the rows in the view port\r\n   */\r\n  updateRows(): void {\r\n    const { first, last } = this.indexes;\r\n    let rowIndex = first;\r\n    let idx = 0;\r\n    const temp: any[] = [];\r\n\r\n    this.rowIndexes.clear();\r\n\r\n    // if grouprowsby has been specified treat row paging\r\n    // parameters as group paging parameters ie if limit 10 has been\r\n    // specified treat it as 10 groups rather than 10 rows\r\n    if (this.groupedRows) {\r\n      let maxRowsPerGroup = 3;\r\n      // if there is only one group set the maximum number of\r\n      // rows per group the same as the total number of rows\r\n      if (this.groupedRows.length === 1) {\r\n        maxRowsPerGroup = this.groupedRows[0].value.length;\r\n      }\r\n\r\n      while (rowIndex < last && rowIndex < this.groupedRows.length) {\r\n        // Add the groups into this page\r\n        const group = this.groupedRows[rowIndex];\r\n        temp[idx] = group;\r\n        idx++;\r\n\r\n        // Group index in this context\r\n        rowIndex++;\r\n      }\r\n    } else {\r\n      while (rowIndex < last && rowIndex < this.rowCount) {\r\n        const row = this.rows[rowIndex];\r\n\r\n        if (row) {\r\n          this.rowIndexes.set(row, rowIndex);\r\n          temp[idx] = row;\r\n        }\r\n\r\n        idx++;\r\n        rowIndex++;\r\n      }\r\n    }\r\n\r\n    this.temp = temp;\r\n  }\r\n\r\n  /**\r\n   * Get the row height\r\n   */\r\n  getRowHeight(row: any): number {\r\n    // if its a function return it\r\n    if (typeof this.rowHeight === 'function') {\r\n      return this.rowHeight(row);\r\n    }\r\n\r\n    return this.rowHeight as number;\r\n  }\r\n\r\n  /**\r\n   * @param group the group with all rows\r\n   */\r\n  getGroupHeight(group: any): number {\r\n    let rowHeight = 0;\r\n\r\n    if (group.value) {\r\n      for (let index = 0; index < group.value.length; index++) {\r\n        rowHeight += this.getRowAndDetailHeight(group.value[index]);\r\n      }\r\n    }\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  /**\r\n   * Calculate row height based on the expanded state of the row.\r\n   */\r\n  getRowAndDetailHeight(row: any): number {\r\n    let rowHeight = this.getRowHeight(row);\r\n    const expanded = this.getRowExpanded(row);\r\n\r\n    // Adding detail row height if its expanded.\r\n    if (expanded) {\r\n      rowHeight += this.getDetailRowHeight(row);\r\n    }\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  /**\r\n   * Get the height of the detail row.\r\n   */\r\n  getDetailRowHeight = (row?: any, index?: any): number => {\r\n    if (!this.rowDetail) {\r\n      return 0;\r\n    }\r\n    const rowHeight = this.rowDetail.rowHeight;\r\n    return typeof rowHeight === 'function' ? rowHeight(row, index) : (rowHeight as number);\r\n  };\r\n\r\n  /**\r\n   * Calculates the styles for the row so that the rows can be moved in 2D space\r\n   * during virtual scroll inside the DOM.   In the below case the Y position is\r\n   * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\r\n   * 100 px then following styles are generated:\r\n   *\r\n   * transform: translate3d(0px, 0px, 0px);    ->  row0\r\n   * transform: translate3d(0px, 30px, 0px);   ->  row1\r\n   * transform: translate3d(0px, 130px, 0px);  ->  row2\r\n   *\r\n   * Row heights have to be calculated based on the row heights cache as we wont\r\n   * be able to determine which row is of what height before hand.  In the above\r\n   * case the positionY of the translate3d for row2 would be the sum of all the\r\n   * heights of the rows before it (i.e. row0 and row1).\r\n   *\r\n   * @param rows the row that needs to be placed in the 2D space.\r\n   * @returns the CSS3 style to be applied\r\n   *\r\n   * @memberOf DataTableBodyComponent\r\n   */\r\n  getRowsStyles(rows: any): any {\r\n    const styles: any = {};\r\n\r\n    // only add styles for the group if there is a group\r\n    if (this.groupedRows) {\r\n      styles.width = this.columnGroupWidths.total;\r\n    }\r\n\r\n    if (this.scrollbarV && this.virtualization) {\r\n      let idx = 0;\r\n\r\n      if (this.groupedRows) {\r\n        // Get the latest row rowindex in a group\r\n        const row = rows[rows.length - 1];\r\n        idx = row ? this.getRowIndex(row) : 0;\r\n      } else {\r\n        idx = this.getRowIndex(rows);\r\n      }\r\n\r\n      // const pos = idx * rowHeight;\r\n      // The position of this row would be the sum of all row heights\r\n      // until the previous row position.\r\n      const pos = this.rowHeightsCache.query(idx - 1);\r\n\r\n      translateXY(styles, 0, pos);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Calculate bottom summary row offset for scrollbar mode.\r\n   * For more information about cache and offset calculation\r\n   * see description for `getRowsStyles` method\r\n   *\r\n   * @returns the CSS3 style to be applied\r\n   *\r\n   * @memberOf DataTableBodyComponent\r\n   */\r\n  getBottomSummaryRowStyles(): any {\r\n    if (!this.scrollbarV || !this.rows || !this.rows.length) {\r\n      return null;\r\n    }\r\n\r\n    const styles = { position: 'absolute' };\r\n    const pos = this.rowHeightsCache.query(this.rows.length - 1);\r\n\r\n    translateXY(styles, 0, pos);\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Hides the loading indicator\r\n   */\r\n  hideIndicator(): void {\r\n    setTimeout(() => (this.loadingIndicator = false), 500);\r\n  }\r\n\r\n  /**\r\n   * Updates the index of the rows in the viewport\r\n   */\r\n  updateIndexes(): void {\r\n    let first = 0;\r\n    let last = 0;\r\n\r\n    if (this.scrollbarV) {\r\n      if (this.virtualization) {\r\n        // Calculation of the first and last indexes will be based on where the\r\n        // scrollY position would be at.  The last index would be the one\r\n        // that shows up inside the view port the last.\r\n        const height = parseInt(this.bodyHeight, 0);\r\n        first = this.rowHeightsCache.getRowIndex(this.offsetY);\r\n        last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\r\n      } else {\r\n        // If virtual rows are not needed\r\n        // We render all in one go\r\n        first = 0;\r\n        last = this.rowCount;\r\n      }\r\n    } else {\r\n      // The server is handling paging and will pass an array that begins with the\r\n      // element at a specified offset.  first should always be 0 with external paging.\r\n      if (!this.externalPaging) {\r\n        first = Math.max(this.offset * this.pageSize, 0);\r\n      }\r\n      last = Math.min(first + this.pageSize, this.rowCount);\r\n    }\r\n\r\n    this.indexes = { first, last };\r\n  }\r\n\r\n  /**\r\n   * Refreshes the full Row Height cache.  Should be used\r\n   * when the entire row array state has changed.\r\n   */\r\n  refreshRowHeightCache(): void {\r\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\r\n      return;\r\n    }\r\n\r\n    // clear the previous row height cache if already present.\r\n    // this is useful during sorts, filters where the state of the\r\n    // rows array is changed.\r\n    this.rowHeightsCache.clearCache();\r\n\r\n    // Initialize the tree only if there are rows inside the tree.\r\n    if (this.rows && this.rows.length) {\r\n      const rowExpansions = new Set();\r\n      for (const row of this.rows) {\r\n        if (this.getRowExpanded(row)) {\r\n          rowExpansions.add(row);\r\n        }\r\n      }\r\n\r\n      this.rowHeightsCache.initCache({\r\n        rows: this.rows,\r\n        rowHeight: this.rowHeight,\r\n        detailRowHeight: this.getDetailRowHeight,\r\n        externalVirtual: this.scrollbarV && this.externalPaging,\r\n        rowCount: this.rowCount,\r\n        rowIndexes: this.rowIndexes,\r\n        rowExpansions\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the index for the view port\r\n   */\r\n  getAdjustedViewPortIndex(): number {\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    // If the scroll bar is just below the row which is highlighted then make that as the\r\n    // first index.\r\n    const viewPortFirstRowIndex = this.indexes.first;\r\n\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\r\n      return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\r\n    }\r\n\r\n    return viewPortFirstRowIndex;\r\n  }\r\n\r\n  /**\r\n   * Toggle the Expansion of the row i.e. if the row is expanded then it will\r\n   * collapse and vice versa.   Note that the expanded status is stored as\r\n   * a part of the row object itself as we have to preserve the expanded row\r\n   * status in case of sorting and filtering of the row set.\r\n   */\r\n  toggleRowExpansion(row: any): void {\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n    const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\r\n    const expanded = rowExpandedIdx > -1;\r\n\r\n    // If the detailRowHeight is auto --> only in case of non-virtualized scroll\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\r\n      // const idx = this.rowIndexes.get(row) || 0;\r\n      const idx = this.getRowIndex(row);\r\n      this.rowHeightsCache.update(idx, detailRowHeight);\r\n    }\r\n\r\n    // Update the toggled row and update thive nevere heights in the cache.\r\n    if (expanded) {\r\n      this.rowExpansions.splice(rowExpandedIdx, 1);\r\n    } else {\r\n      this.rowExpansions.push(row);\r\n    }\r\n\r\n    this.detailToggle.emit({\r\n      rows: [row],\r\n      currentIndex: viewPortFirstRowIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand/Collapse all the rows no matter what their state is.\r\n   */\r\n  toggleAllRows(expanded: boolean): void {\r\n    // clear prev expansions\r\n    this.rowExpansions = [];\r\n\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n\r\n    if (expanded) {\r\n      for (const row of this.rows) {\r\n        this.rowExpansions.push(row);\r\n      }\r\n    }\r\n\r\n    if (this.scrollbarV) {\r\n      // Refresh the full row heights cache since every row was affected.\r\n      this.recalcLayout();\r\n    }\r\n\r\n    // Emit all rows that have been expanded.\r\n    this.detailToggle.emit({\r\n      rows: this.rows,\r\n      currentIndex: viewPortFirstRowIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Recalculates the table\r\n   */\r\n  recalcLayout(): void {\r\n    this.refreshRowHeightCache();\r\n    this.updateIndexes();\r\n    this.updateRows();\r\n  }\r\n\r\n  /**\r\n   * Tracks the column\r\n   */\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  /**\r\n   * Gets the row pinning group styles\r\n   */\r\n  stylesByGroup(group: string) {\r\n    const widths = this.columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'left') {\r\n      translateXY(styles, offsetX, 0);\r\n    } else if (group === 'right') {\r\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n      const totalDiff = widths.total - bodyWidth;\r\n      const offsetDiff = totalDiff - offsetX;\r\n      const offset = offsetDiff * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Returns if the row was expanded and set default row expansion when row expansion is empty\r\n   */\r\n  getRowExpanded(row: any): boolean {\r\n    if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\r\n      for (const group of this.groupedRows) {\r\n        this.rowExpansions.push(group);\r\n      }\r\n    }\r\n\r\n    return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\r\n  }\r\n\r\n  getRowExpandedIdx(row: any, expanded: any[]): number {\r\n    if (!expanded || !expanded.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return expanded.findIndex(r => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the row index given a row\r\n   */\r\n  getRowIndex(row: any): number {\r\n    return this.rowIndexes.get(row) || 0;\r\n  }\r\n\r\n  onTreeAction(row: any) {\r\n    this.treeAction.emit({ row });\r\n  }\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DataTableFooterTemplateDirective } from './footer-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-footer' })\r\nexport class DatatableFooterDirective {\r\n  @Input() footerHeight: number;\r\n  @Input() totalMessage: string;\r\n  @Input() selectedMessage: string | boolean;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableFooterTemplateDirective, { read: TemplateRef, static: false })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter, ChangeDetectionStrategy, Input, TemplateRef } from '@angular/core';\r\nimport { DatatableFooterDirective } from './footer.directive';\r\n@Component({\r\n  selector: 'datatable-footer',\r\n  template: `\r\n    <div\r\n      class=\"datatable-footer-inner\"\r\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\r\n      [style.height.px]=\"footerHeight\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"footerTemplate\"\r\n        [ngTemplateOutlet]=\"footerTemplate.template\"\r\n        [ngTemplateOutletContext]=\"{\r\n          rowCount: rowCount,\r\n          pageSize: pageSize,\r\n          selectedCount: selectedCount,\r\n          curPage: curPage,\r\n          offset: offset\r\n        }\"\r\n      >\r\n      </ng-template>\r\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\r\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\r\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\r\n      </div>\r\n      <datatable-pager\r\n        *ngIf=\"!footerTemplate\"\r\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\r\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\r\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\r\n        [pagerNextIcon]=\"pagerNextIcon\"\r\n        [page]=\"curPage\"\r\n        [size]=\"pageSize\"\r\n        [count]=\"rowCount\"\r\n        [hidden]=\"!isVisible\"\r\n        (change)=\"page.emit($event)\"\r\n      >\r\n      </datatable-pager>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-footer'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableFooterComponent {\r\n  @Input() footerHeight: number;\r\n  @Input() rowCount: number;\r\n  @Input() pageSize: number;\r\n  @Input() offset: number;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n  @Input() totalMessage: string;\r\n  @Input() footerTemplate: DatatableFooterDirective;\r\n\r\n  @Input() selectedCount: number = 0;\r\n  @Input() selectedMessage: string | boolean;\r\n\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n\r\n  get isVisible(): boolean {\r\n    return this.rowCount / this.pageSize > 1;\r\n  }\r\n\r\n  get curPage(): number {\r\n    return this.offset + 1;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-pager',\r\n  template: `\r\n    <ul class=\"pager\">\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\r\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\r\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li\r\n        role=\"button\"\r\n        [attr.aria-label]=\"'page ' + pg.number\"\r\n        class=\"pages\"\r\n        *ngFor=\"let pg of pages\"\r\n        [class.active]=\"pg.number === page\"\r\n      >\r\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\r\n          {{ pg.text }}\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\r\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\r\n          <i class=\"{{ pagerNextIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  `,\r\n  host: {\r\n    class: 'datatable-pager'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTablePagerComponent {\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input()\r\n  set size(val: number) {\r\n    this._size = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get size(): number {\r\n    return this._size;\r\n  }\r\n\r\n  @Input()\r\n  set count(val: number) {\r\n    this._count = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n\r\n  @Input()\r\n  set page(val: number) {\r\n    this._page = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  get totalPages(): number {\r\n    const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\r\n    return Math.max(count || 0, 1);\r\n  }\r\n\r\n  @Output() change: EventEmitter<any> = new EventEmitter();\r\n\r\n  _count: number = 0;\r\n  _page: number = 1;\r\n  _size: number = 0;\r\n  pages: any;\r\n\r\n  canPrevious(): boolean {\r\n    return this.page > 1;\r\n  }\r\n\r\n  canNext(): boolean {\r\n    return this.page < this.totalPages;\r\n  }\r\n\r\n  prevPage(): void {\r\n    this.selectPage(this.page - 1);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.selectPage(this.page + 1);\r\n  }\r\n\r\n  selectPage(page: number): void {\r\n    if (page > 0 && page <= this.totalPages && page !== this.page) {\r\n      this.page = page;\r\n\r\n      this.change.emit({\r\n        page\r\n      });\r\n    }\r\n  }\r\n\r\n  calcPages(page?: number): any[] {\r\n    const pages = [];\r\n    let startPage = 1;\r\n    let endPage = this.totalPages;\r\n    const maxSize = 5;\r\n    const isMaxSized = maxSize < this.totalPages;\r\n\r\n    page = page || this.page;\r\n\r\n    if (isMaxSized) {\r\n      startPage = page - Math.floor(maxSize / 2);\r\n      endPage = page + Math.floor(maxSize / 2);\r\n\r\n      if (startPage < 1) {\r\n        startPage = 1;\r\n        endPage = Math.min(startPage + maxSize - 1, this.totalPages);\r\n      } else if (endPage > this.totalPages) {\r\n        startPage = Math.max(this.totalPages - maxSize + 1, 1);\r\n        endPage = this.totalPages;\r\n      }\r\n    }\r\n\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      pages.push({\r\n        number: num,\r\n        text: <string>(<any>num)\r\n      });\r\n    }\r\n\r\n    return pages;\r\n  }\r\n}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-progress',\r\n  template: `\r\n    <div class=\"progress-linear\" role=\"progressbar\">\r\n      <div class=\"container\">\r\n        <div class=\"bar\"></div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProgressBarComponent {}\r\n","export enum Keys {\r\n  up = 38,\r\n  down = 40,\r\n  return = 13,\r\n  escape = 27,\r\n  left = 37,\r\n  right = 39\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  HostBinding,\r\n  ElementRef,\r\n  Output,\r\n  KeyValueDiffers,\r\n  KeyValueDiffer,\r\n  EventEmitter,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  DoCheck,\r\n  SkipSelf\r\n} from '@angular/core';\r\n\r\nimport { TreeStatus } from './body-cell.component';\r\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\r\nimport { Keys } from '../../utils/keys';\r\nimport { ScrollbarHelper } from '../../services/scrollbar-helper.service';\r\nimport { translateXY } from '../../utils/translate';\r\nimport { style } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'datatable-body-row',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div\r\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\r\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\r\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\r\n    >\r\n      <datatable-body-cell\r\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\r\n        tabindex=\"-1\"\r\n        [row]=\"row\"\r\n        [group]=\"group\"\r\n        [rowDetail]=\"rowDetail\"\r\n        [expanded]=\"expanded\"\r\n        [isSelected]=\"isSelected\"\r\n        [rowIndex]=\"rowIndex\"\r\n        [column]=\"column\"\r\n        [rowHeight]=\"rowHeight\"\r\n        [displayCheck]=\"displayCheck\"\r\n        [treeStatus]=\"treeStatus\"\r\n        (activate)=\"onActivate($event, ii)\"\r\n        (treeAction)=\"onTreeAction()\"\r\n      >\r\n      </datatable-body-cell>\r\n    </div>\r\n  `\r\n})\r\nexport class DataTableBodyRowComponent implements DoCheck {\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n    this.recalculateColumns(val);\r\n    this.buildStylesByGroup();\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input() set innerWidth(val: number) {\r\n    if (this._columns) {\r\n      const colByPin = columnsByPin(this._columns);\r\n      this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n    }\r\n\r\n    this._innerWidth = val;\r\n    this.recalculateColumns();\r\n    this.buildStylesByGroup();\r\n  }\r\n\r\n  get innerWidth(): number {\r\n    return this._innerWidth;\r\n  }\r\n\r\n  @Input() expanded: boolean;\r\n  @Input() rowClass: any;\r\n  @Input() row: any;\r\n  @Input() group: any;\r\n  @Input() isSelected: boolean;\r\n  @Input() rowIndex: number;\r\n  @Input() displayCheck: any;\r\n  @Input() treeStatus: TreeStatus = 'collapsed';\r\n  @Input() rowDetail: any;\r\n\r\n  @Input()\r\n  set offsetX(val: number) {\r\n    this._offsetX = val;\r\n    this.buildStylesByGroup();\r\n  }\r\n  get offsetX() {\r\n    return this._offsetX;\r\n  }\r\n\r\n  @HostBinding('class')\r\n  get cssClass() {\r\n    let cls = 'datatable-body-row';\r\n    if (this.isSelected) {\r\n      cls += ' active';\r\n    }\r\n    if (this.rowIndex % 2 !== 0) {\r\n      cls += ' datatable-row-odd';\r\n    }\r\n    if (this.rowIndex % 2 === 0) {\r\n      cls += ' datatable-row-even';\r\n    }\r\n\r\n    if (this.rowClass) {\r\n      const res = this.rowClass(this.row);\r\n      if (typeof res === 'string') {\r\n        cls += ` ${res}`;\r\n      } else if (typeof res === 'object') {\r\n        const keys = Object.keys(res);\r\n        for (const k of keys) {\r\n          if (res[k] === true) {\r\n            cls += ` ${k}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  rowHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  get columnsTotalWidths(): string {\r\n    return this._columnGroupWidths.total;\r\n  }\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  _element: any;\r\n  _columnGroupWidths: any;\r\n  _columnsByPin: any;\r\n  _offsetX: number;\r\n  _columns: any[];\r\n  _innerWidth: number;\r\n  _groupStyles: { [prop: string]: {} } = {\r\n    left: {},\r\n    center: {},\r\n    right: {}\r\n  };\r\n\r\n  private _rowDiffer: KeyValueDiffer<{}, {}>;\r\n\r\n  constructor(\r\n    private differs: KeyValueDiffers,\r\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\r\n    private cd: ChangeDetectorRef,\r\n    element: ElementRef\r\n  ) {\r\n    this._element = element.nativeElement;\r\n    this._rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this._rowDiffer.diff(this.row)) {\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  trackByGroups(index: number, colGroup: any): any {\r\n    return colGroup.type;\r\n  }\r\n\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  buildStylesByGroup() {\r\n    this._groupStyles.left = this.calcStylesByGroup('left');\r\n    this._groupStyles.center = this.calcStylesByGroup('center');\r\n    this._groupStyles.right = this.calcStylesByGroup('right');\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  calcStylesByGroup(group: string) {\r\n    const widths = this._columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (this.row && !!this.row.detail && group === 'left') {\r\n      styles.width = `100%`;\r\n    }\r\n\r\n    if (group === 'left') {\r\n      translateXY(styles, offsetX, 0);\r\n    } else if (group === 'right') {\r\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n      const totalDiff = widths.total - bodyWidth;\r\n      const offsetDiff = totalDiff - offsetX;\r\n      const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  onActivate(event: any, index: number): void {\r\n    event.cellIndex = index;\r\n    event.rowElement = this._element;\r\n    this.activate.emit(event);\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isTargetRow = event.target === this._element;\r\n\r\n    const isAction =\r\n      keyCode === Keys.return ||\r\n      keyCode === Keys.down ||\r\n      keyCode === Keys.up ||\r\n      keyCode === Keys.left ||\r\n      keyCode === Keys.right;\r\n\r\n    if (isAction && isTargetRow) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      this.activate.emit({\r\n        type: 'keydown',\r\n        event,\r\n        row: this.row,\r\n        rowElement: this._element\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter', ['$event'])\r\n  onMouseenter(event: any): void {\r\n    this.activate.emit({\r\n      type: 'mouseenter',\r\n      event,\r\n      row: this.row,\r\n      rowElement: this._element\r\n    });\r\n  }\r\n\r\n  recalculateColumns(val: any[] = this.columns): void {\r\n    this._columns = val;\r\n    const colsByPin = columnsByPin(this._columns);\r\n    this._columnsByPin = columnsByPinArr(this._columns);\r\n    this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\r\n  }\r\n\r\n  onTreeAction() {\r\n    this.treeAction.emit();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  DoCheck,\r\n  ChangeDetectionStrategy,\r\n  KeyValueDiffer,\r\n  ChangeDetectorRef,\r\n  KeyValueDiffers\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\n\r\n@Component({\r\n  selector: 'datatable-row-wrapper',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\r\n      <ng-template\r\n        *ngIf=\"groupHeader && groupHeader.template\"\r\n        [ngTemplateOutlet]=\"groupHeader.template\"\r\n        [ngTemplateOutletContext]=\"groupContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)\">\r\n    </ng-content>\r\n    <div\r\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\r\n      [style.height.px]=\"detailRowHeight\"\r\n      class=\"datatable-row-detail\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"rowDetail && rowDetail.template\"\r\n        [ngTemplateOutlet]=\"rowDetail.template\"\r\n        [ngTemplateOutletContext]=\"rowContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-row-wrapper'\r\n  }\r\n})\r\nexport class DataTableRowWrapperComponent implements DoCheck {\r\n  @Input() innerWidth: number;\r\n  @Input() rowDetail: any;\r\n  @Input() groupHeader: any;\r\n  @Input() offsetX: number;\r\n  @Input() detailRowHeight: any;\r\n  @Input() row: any;\r\n  @Input() groupedRows: any;\r\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\r\n\r\n  @Input() set rowIndex(val: number) {\r\n    this._rowIndex = val;\r\n    this.rowContext.rowIndex = val;\r\n    this.groupContext.rowIndex = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowIndex(): number {\r\n    return this._rowIndex;\r\n  }\r\n\r\n  @Input() set expanded(val: boolean) {\r\n    this._expanded = val;\r\n    this.groupContext.expanded = val;\r\n    this.rowContext.expanded = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  groupContext: any = {\r\n    group: this.row,\r\n    expanded: this.expanded,\r\n    rowIndex: this.rowIndex\r\n  };\r\n\r\n  rowContext: any = {\r\n    row: this.row,\r\n    expanded: this.expanded,\r\n    rowIndex: this.rowIndex\r\n  };\r\n\r\n  private rowDiffer: KeyValueDiffer<{}, {}>;\r\n  private _expanded: boolean = false;\r\n  private _rowIndex: number;\r\n\r\n  constructor(private cd: ChangeDetectorRef, private differs: KeyValueDiffers) {\r\n    this.rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this.rowDiffer.diff(this.row)) {\r\n      this.rowContext.row = this.row;\r\n      this.groupContext.group = this.row;\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onContextmenu($event: MouseEvent): void {\r\n    this.rowContextmenu.emit({ event: $event, row: this.row });\r\n  }\r\n\r\n  getGroupHeaderStyle(): any {\r\n    const styles = {};\r\n\r\n    styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\r\n    styles['backface-visibility'] = 'hidden';\r\n    styles['width'] = this.innerWidth;\r\n\r\n    return styles;\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-row-detail-template]'\r\n})\r\nexport class DatatableRowDetailTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableRowDetailTemplateDirective } from './row-detail-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-row-detail' })\r\nexport class DatatableRowDetailDirective {\r\n  /**\r\n   * The detail row height is required especially\r\n   * when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((row?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Row detail row visbility was toggled.\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of the row\r\n   */\r\n  toggleExpandRow(row: any): void {\r\n    this.toggle.emit({\r\n      type: 'row',\r\n      value: row\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to expand all the rows.\r\n   */\r\n  expandAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to collapse all the rows.\r\n   */\r\n  collapseAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-group-header-template]'\r\n})\r\nexport class DatatableGroupHeaderTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableGroupHeaderTemplateDirective } from './body-group-header-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-group-header' })\r\nexport class DatatableGroupHeaderDirective {\r\n  /**\r\n   * Row height is required when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((group?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Track toggling of group visibility\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of a group\r\n   */\r\n  toggleExpandGroup(group: any): void {\r\n    this.toggle.emit({\r\n      type: 'group',\r\n      value: group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand all groups\r\n   */\r\n  expandAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Collapse all groups\r\n   */\r\n  collapseAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import {\n  Component,\n  Input,\n  PipeTransform,\n  HostBinding,\n  ViewChild,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy,\n  DoCheck,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { TableColumn } from '../../types/table-column.type';\nimport { MouseEvent, KeyboardEvent } from '../../events';\nimport { SortDirection } from '../../types/sort-direction.type';\nimport { Keys } from '../../utils/keys';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\n\nexport type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';\n\n@Component({\n  selector: 'datatable-body-cell',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div\n      class=\"datatable-body-cell-label\"\n      style=\"display: flex; align-items:center; height: 100%;\"\n      [style.margin-left.px]=\"calcLeftMargin(column, row)\"\n    >\n      <a\n        *ngIf=\"column?.prop === 'ice-expandable' && row?.detail?.length > 0\"\n        href=\"javascript:void(0)\"\n        [class.datatable-icon-down]=\"!expanded\"\n        [class.datatable-icon-up]=\"expanded\"\n        style=\"font-size: 18px; display: flex; align-items: center;\"\n        title=\"Expand/Collapse Row\"\n        (dblclick)=\"toggleExpandRow(row, $event)\"\n        (click)=\"toggleExpandRow(row, $event)\"\n      >\n      </a>\n      <ng-container *ngIf=\"column?.prop !== 'ice-expandable'\">\n        <label\n          *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n          class=\"datatable-checkbox\"\n        >\n          <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n        </label>\n        <ng-container *ngIf=\"column.isTreeColumn\">\n          <button\n            *ngIf=\"!column.treeToggleTemplate\"\n            class=\"datatable-tree-button\"\n            [disabled]=\"treeStatus === 'disabled'\"\n            (click)=\"onTreeAction()\"\n          >\n            <span>\n              <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n              <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n              <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n            </span>\n          </button>\n          <ng-template\n            *ngIf=\"column.treeToggleTemplate\"\n            [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n            [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n          >\n          </ng-template>\n        </ng-container>\n\n        <div\n          *ngIf=\"column.icons && getIcons(row, column.icons)\"\n          style=\"display: flex; flex-direction: column; margin-right: 10px;\"\n        >\n          <mat-icon\n            *ngFor=\"let i of getIcons(row, column.icons)\"\n            [innerHTML]=\"i.icon\"\n            [matTooltip]=\"i.text\"\n            (click)=\"\n              !!i.onClickAction\n                ? onClickField(row, column.onClickAction || column.action, $event)\n                : i.action && i.action(row)\n            \"\n            [style.cursor]=\"i.action ? 'pointer' : 'auto'\"\n            class=\"{{ i.class }} mat-icon material-icons ice-ml-10\"\n          ></mat-icon>\n        </div>\n\n        <mat-icon\n          *ngIf=\"\n            column.iconCustomTooltipHtmlText &&\n            column.prop &&\n            selectFieldValue(row, column.iconCustomTooltipHtmlText) as customHtml\n          \"\n          iceCustomHtmlToolTip\n          [iceTooltipHtmlText]=\"sanatizeHtml(customHtml)\"\n          [duration]=\"1500\"\n          class=\"material-icons\"\n          [ngClass]=\"column.prop && selectFieldValue(row, column.iconColor)\"\n          >priority_high</mat-icon\n        >\n\n        <mat-icon\n          *ngIf=\"column.prop && row[column.prop.toString() + 'InfoTooltip']\"\n          [matTooltip]=\"column.prop && row[column.prop.toString() + 'InfoTooltip']\"\n          class=\"mat-icon material-icons\"\n          >info</mat-icon\n        >\n\n        <mat-icon\n          *ngIf=\"column.prop && row[column.prop.toString() + 'Excluded']\"\n          [matTooltip]=\"column.prop && row[column.prop.toString() + 'Excluded']\"\n          class=\"mat-icon material-icons\"\n          >block</mat-icon\n        >\n\n        <span\n          *ngIf=\"\n            !column.actionButtonIcon &&\n            !column.cellTemplate &&\n            (!column.selectOptions || (column.hideIfEmpty && column.hideIfEmpty(row))) &&\n            (!column.editable || !(isEditable(column, row) | async))\n          \"\n          class=\"ice-data-table-row\"\n          iceCustomHtmlToolTip\n          [iceTooltipHtmlText]=\"getTooltipValue(value, row, column)\"\n          [showToolTipOnTextOverflow]=\"true\"\n          [showToolTip]=\"hasToShowToolTip(row, column)\"\n          [innerHTML]=\"value\"\n          (click)=\"onClickField(row, column.onClickAction || column.action, $event)\"\n        ></span>\n\n        <button\n          *ngIf=\"column.actionButtonIcon && !(column.hideActionButton && column.hideActionButton(row) | async)\"\n          mat-icon-button\n          [matTooltip]=\"column.actionButtonTooltip\"\n          (click)=\"onClickRowActionButton($event, column, row)\"\n        >\n          <mat-icon class=\"mat-icon material-icons\">{{ column.actionButtonIcon }}</mat-icon>\n        </button>\n\n        <ice-datatable-row-select\n          style=\"width:100%;\"\n          [ngClass]=\"column.cellClass\"\n          (update)=\"updateSelect(column, row, $event)\"\n          [options]=\"column.selectOptions(row)\"\n          [value]=\"value\"\n          [defaultValue]=\"column.defaultValue\"\n          [selectDisabled]=\"column.disabled\"\n          *ngIf=\"column.selectOptions && !(column.hideIfEmpty && column.hideIfEmpty(row))\"\n        ></ice-datatable-row-select>\n\n        <ng-container *ngIf=\"!column.selectOptions && (column.editable && isEditable(column, row) | async)\">\n          <mat-icon class=\"mat-icon material-icons\" *ngIf=\"!column.hideEditIcon\">edit</mat-icon>\n          <ice-editable-text\n            [ngClass]=\"column.cellClass\"\n            (update)=\"editField(column, row, $event)\"\n            [errorText]=\"selectFieldValue(row, column.errorMessageField)\"\n            [value]=\"value\"\n          >\n            {{ value }}\n          </ice-editable-text>\n        </ng-container>\n\n        <ng-template\n          #cellTemplate\n          *ngIf=\"column.cellTemplate\"\n          [ngTemplateOutlet]=\"column.cellTemplate\"\n          [ngTemplateOutletContext]=\"cellContext\"\n        >\n        </ng-template>\n      </ng-container>\n    </div>\n  `\n})\nexport class DataTableBodyCellComponent implements DoCheck, OnDestroy {\n  @Input() displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;\n\n  @Input() set rowDetail(rowDetail: any) {\n    this._rowDetail = rowDetail;\n  }\n\n  get rowDetail(): any {\n    return this._rowDetail;\n  }\n\n  @Input() set group(group: any) {\n    this._group = group;\n    this.cellContext.group = group;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get group() {\n    return this._group;\n  }\n\n  @Input() set rowHeight(val: number) {\n    this._rowHeight = val;\n    this.cellContext.rowHeight = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  @Input() set isSelected(val: boolean) {\n    this._isSelected = val;\n    this.cellContext.isSelected = val;\n    this.cd.markForCheck();\n  }\n\n  get isSelected(): boolean {\n    return this._isSelected;\n  }\n\n  @Input() set expanded(val: boolean) {\n    this._expanded = val;\n    this.cellContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() set rowIndex(val: number) {\n    this._rowIndex = val;\n    this.cellContext.rowIndex = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowIndex(): number {\n    return this._rowIndex;\n  }\n\n  @Input() set column(column: TableColumn) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  @Input() set row(row: any) {\n    this._row = row;\n    this.cellContext.row = row;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get row(): any {\n    return this._row;\n  }\n\n  @Input() set sorts(val: any[]) {\n    this._sorts = val;\n    this.calcSortDir = this.calcSortDir(val);\n  }\n\n  get sorts(): any[] {\n    return this._sorts;\n  }\n\n  @Input() set treeStatus(status: TreeStatus) {\n    if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n      this._treeStatus = 'collapsed';\n    } else {\n      this._treeStatus = status;\n    }\n    this.cellContext.treeStatus = this._treeStatus;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get treeStatus(): TreeStatus {\n    return this._treeStatus;\n  }\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild('cellTemplate', { read: ViewContainerRef, static: true })\n  cellTemplate: ViewContainerRef;\n\n  @HostBinding('class')\n  get columnCssClasses(): any {\n    let cls = 'datatable-body-cell';\n    if (this.column.cellClass) {\n      if (typeof this.column.cellClass === 'string') {\n        cls += ' ' + this.column.cellClass;\n      } else if (typeof this.column.cellClass === 'function') {\n        const res = this.column.cellClass({\n          row: this.row,\n          group: this.group,\n          column: this.column,\n          value: this.value,\n          rowHeight: this.rowHeight\n        });\n\n        if (typeof res === 'string') {\n          cls += res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n          for (const k of keys) {\n            if (res[k] === true) {\n              cls += ` ${k}`;\n            }\n          }\n        }\n      }\n    }\n    if (!this.sortDir) {\n      cls += ' sort-active';\n    }\n    if (this.isFocused && !this.column.icons) {\n      cls += ' active';\n    }\n    if (this.sortDir === SortDirection.asc) {\n      cls += ' sort-asc';\n    }\n    if (this.sortDir === SortDirection.desc) {\n      cls += ' sort-desc';\n    }\n    return cls;\n  }\n\n  @HostBinding('style.width.px')\n  get width(): number {\n    return this.column.width;\n  }\n\n  @HostBinding('style.minWidth.px')\n  get minWidth(): number {\n    return this.column.minWidth;\n  }\n\n  @HostBinding('style.maxWidth.px')\n  get maxWidth(): number {\n    return this.column.maxWidth;\n  }\n\n  @HostBinding('style.height')\n  get height(): string | number {\n    const height = this.rowHeight;\n    if (isNaN(height)) {\n      return height;\n    }\n    return height + 'px';\n  }\n  _isEditable: { [a: string]: Observable<boolean> } = {};\n  sanitizedValue: any;\n  value: any;\n  sortDir: SortDirection;\n  isFocused = false;\n  onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n  activateFn = this.activate.emit.bind(this.activate);\n\n  cellContext: any = {\n    onCheckboxChangeFn: this.onCheckboxChangeFn,\n    activateFn: this.activateFn,\n    row: this.row,\n    group: this.group,\n    value: this.value,\n    column: this.column,\n    rowHeight: this.rowHeight,\n    isSelected: this.isSelected,\n    rowIndex: this.rowIndex,\n    treeStatus: this.treeStatus,\n    onTreeAction: this.onTreeAction.bind(this)\n  };\n\n  private _isSelected: boolean;\n  private _sorts: any[];\n  private _column: TableColumn;\n  private _row: any;\n  private _rowDetail: any;\n  private _group: any;\n  private _rowHeight: number;\n  private _rowIndex: number;\n  private _expanded: boolean;\n  private _element: any;\n  private _treeStatus: TreeStatus;\n\n  constructor(\n    element: ElementRef,\n    private cd: ChangeDetectorRef,\n    private sanitizer: DomSanitizer,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n    this._element = element.nativeElement;\n  }\n\n  ngDoCheck(): void {\n    this.checkValueUpdates();\n  }\n\n  ngOnDestroy(): void {\n    if (this.cellTemplate) {\n      this.cellTemplate.clear();\n    }\n  }\n\n  checkValueUpdates(): void {\n    let value = '';\n\n    if (!this.row || !this.column) {\n      value = '';\n    } else {\n      const val = this.column.$$valueGetter(this.row, this.column.prop);\n      const userPipe: PipeTransform = this.column.pipe;\n\n      if (userPipe) {\n        value = userPipe.transform(val);\n      } else if (value !== undefined) {\n        value = val;\n      }\n    }\n\n    if (this.value !== value) {\n      this.value = value;\n      this.cellContext.value = value;\n      this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n      this.cd.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus(): void {\n    this.isFocused = true;\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    this.isFocused = false;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): void {\n    this.activate.emit({\n      type: 'click',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  @HostListener('mouseup', ['$event'])\n  middleclickEvent(event) {\n    if (event.which === 2) {\n      this.activate.emit({\n        type: 'middleclick',\n        event,\n        row: this.row,\n        group: this.group,\n        rowHeight: this.rowHeight,\n        column: this.column,\n        value: this.value,\n        cellElement: this._element\n      });\n    }\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDblClick(event: MouseEvent): void {\n    this.activate.emit({\n      type: 'dblclick',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isTargetCell = event.target === this._element;\n\n    const isAction =\n      keyCode === Keys.return ||\n      keyCode === Keys.down ||\n      keyCode === Keys.up ||\n      keyCode === Keys.left ||\n      keyCode === Keys.right;\n\n    if (isAction && isTargetCell) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        group: this.group,\n        rowHeight: this.rowHeight,\n        column: this.column,\n        value: this.value,\n        cellElement: this._element\n      });\n    }\n  }\n\n  onCheckboxChange(event: any): void {\n    this.activate.emit({\n      type: 'checkbox',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element,\n      treeStatus: 'collapsed'\n    });\n  }\n\n  calcSortDir(sorts: any[]): any {\n    if (!sorts) {\n      return;\n    }\n\n    const sort = sorts.find((s: any) => {\n      return s.prop === this.column.prop;\n    });\n\n    if (sort) {\n      return sort.dir;\n    }\n  }\n\n  stripHtml(html: string): string {\n    if (!html.replace) {\n      return html;\n    }\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\n  }\n\n  onTreeAction() {\n    this.treeAction.emit(this.row);\n  }\n\n  calcLeftMargin(column: any, row: any) {\n    const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n    return column.isTreeColumn ? row.level * levelIndent : 0;\n  }\n\n  hasToShowToolTip(row, field) {\n    return row && field && field.tooltip && field.tooltip.length > 0;\n  }\n\n  getTooltipValue(value, row, field) {\n    if (row && field && field.tooltip && field.tooltip.length > 0) {\n      return row[`${field.tooltip}`] || field.tooltip;\n    }\n    return value;\n  }\n\n  getIcons(row, icons) {\n    if (row && icons) {\n      const iconsArray = icons.split('.');\n      return iconsArray.length > 1 && row[iconsArray[0]] ? row[iconsArray[0]][iconsArray[1]] || [] : row[icons] || [];\n    }\n    return null;\n  }\n\n  selectFieldValue(row, prop) {\n    if (row && prop) {\n      const propArray = prop.split('.');\n      return propArray.length > 1 && row[propArray[0]] ? row[propArray[0]][propArray[1]] : row[prop];\n    }\n    return ' ';\n  }\n\n  onClickRowActionButton(event, field, row) {\n    if (field && row) {\n      event.preventDefault();\n      event.stopPropagation();\n      field.action(row);\n    }\n  }\n\n  sanatizeHtml(html: string) {\n    return this.sanitizer.bypassSecurityTrustHtml(html) as string;\n  }\n\n  isEditable(field: any, row: any): Observable<boolean> {\n    if (field && row) {\n      if (!this._isEditable[field.prop + row.id]) {\n        this._isEditable[field.prop + row.id] = field.editable(row);\n      }\n      return this._isEditable[field.prop + row.id];\n    }\n    return of(false);\n  }\n\n  updateSelect(field, row: any, newValue: any) {\n    if (row[field.prop] !== newValue) {\n      row[field.prop] = newValue;\n      if (field.onEdit) {\n        field.onEdit(row);\n      }\n    }\n  }\n\n  editField(field, row: any, newValue: any) {\n    field.onEdit({ ...row, [field.prop]: newValue });\n  }\n\n  toggleExpandRow(row, event) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.rowDetail) {\n      this.rowDetail.toggleExpandRow(row);\n    }\n  }\n\n  onClickField(row, action, event) {\n    if (row && action) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      action(row);\n    }\n  }\n}\n","export function selectRows(selected: any[], row: any, comparefn: any) {\r\n  const selectedIndex = comparefn(row, selected);\r\n\r\n  if (selectedIndex > -1) {\r\n    selected.splice(selectedIndex, 1);\r\n  } else {\r\n    selected.push(row);\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport function selectRowsBetween(\r\n  selected: any[],\r\n  rows: any[],\r\n  index: number,\r\n  prevIndex: number,\r\n  comparefn: any\r\n): any[] {\r\n  const reverse = index < prevIndex;\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const row = rows[i];\r\n    const greater = i >= prevIndex && i <= index;\r\n    const lesser = i <= prevIndex && i >= index;\r\n\r\n    let range = { start: 0, end: 0 };\r\n    if (reverse) {\r\n      range = {\r\n        start: index,\r\n        end: prevIndex\r\n      };\r\n    } else {\r\n      range = {\r\n        start: prevIndex,\r\n        end: index + 1\r\n      };\r\n    }\r\n\r\n    if ((reverse && lesser) || (!reverse && greater)) {\r\n      // if in the positive range to be added to `selected`, and\r\n      // not already in the selected array, add it\r\n      if (i >= range.start && i <= range.end) {\r\n        selected.push(row);\r\n      }\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { selectRowsBetween, selectRows } from '../../utils/selection';\r\nimport { Keys } from '../../utils/keys';\r\n\r\nexport interface Model {\r\n  type: string;\r\n  event: MouseEvent | KeyboardEvent;\r\n  row: any;\r\n  rowElement: any;\r\n  cellElement: any;\r\n  cellIndex: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-selection',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableSelectionComponent {\r\n  @Input() rows: any[];\r\n  @Input() selected: any[];\r\n  @Input() selectEnabled: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() rowIdentity: any;\r\n  @Input() selectCheck: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n\r\n  prevIndex: number;\r\n\r\n  selectRow(event: KeyboardEvent | MouseEvent, index: number, row: any): void {\r\n    if (!this.selectEnabled) return;\r\n\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const multi = this.selectionType === SelectionType.multi;\r\n    const multiClick = this.selectionType === SelectionType.multiClick;\r\n    let selected: any[] = [];\r\n\r\n    if (multi || chkbox || multiClick) {\r\n      if (event.shiftKey) {\r\n        selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\r\n      } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\r\n        selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\r\n      } else {\r\n        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n      }\r\n    } else {\r\n      selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n    }\r\n\r\n    if (typeof this.selectCheck === 'function') {\r\n      selected = selected.filter(this.selectCheck.bind(this));\r\n    }\r\n\r\n    this.selected.splice(0, this.selected.length);\r\n    this.selected.push(...selected);\r\n\r\n    this.prevIndex = index;\r\n\r\n    this.select.emit({\r\n      selected\r\n    });\r\n  }\r\n\r\n  onActivate(model: Model, index: number): void {\r\n    const { type, event, row } = model;\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\r\n\r\n    if (select) {\r\n      this.selectRow(event, index, row);\r\n    } else if (type === 'keydown') {\r\n      if ((<KeyboardEvent>event).keyCode === Keys.return) {\r\n        this.selectRow(event, index, row);\r\n      } else {\r\n        this.onKeyboardFocus(model);\r\n      }\r\n    }\r\n    this.activate.emit(model);\r\n  }\r\n\r\n  onKeyboardFocus(model: Model): void {\r\n    const { keyCode } = <KeyboardEvent>model.event;\r\n    const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\r\n\r\n    if (shouldFocus) {\r\n      const isCellSelection = this.selectionType === SelectionType.cell;\r\n\r\n      if (!model.cellElement || !isCellSelection) {\r\n        this.focusRow(model.rowElement, keyCode);\r\n      } else if (isCellSelection) {\r\n        this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  focusRow(rowElement: any, keyCode: number): void {\r\n    const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n    if (nextRowElement) nextRowElement.focus();\r\n  }\r\n\r\n  getPrevNextRow(rowElement: any, keyCode: number): any {\r\n    const parentElement = rowElement.parentElement;\r\n\r\n    if (parentElement) {\r\n      let focusElement: HTMLElement;\r\n      if (keyCode === Keys.up) {\r\n        focusElement = parentElement.previousElementSibling;\r\n      } else if (keyCode === Keys.down) {\r\n        focusElement = parentElement.nextElementSibling;\r\n      }\r\n\r\n      if (focusElement && focusElement.children.length) {\r\n        return focusElement.children[0];\r\n      }\r\n    }\r\n  }\r\n\r\n  focusCell(cellElement: any, rowElement: any, keyCode: number, cellIndex: number): void {\r\n    let nextCellElement: HTMLElement;\r\n\r\n    if (keyCode === Keys.left) {\r\n      nextCellElement = cellElement.previousElementSibling;\r\n    } else if (keyCode === Keys.right) {\r\n      nextCellElement = cellElement.nextElementSibling;\r\n    } else if (keyCode === Keys.up || keyCode === Keys.down) {\r\n      const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n      if (nextRowElement) {\r\n        const children = nextRowElement.getElementsByClassName('datatable-body-cell');\r\n        if (children.length) nextCellElement = children[cellIndex];\r\n      }\r\n    }\r\n\r\n    if (nextCellElement) nextCellElement.focus();\r\n  }\r\n\r\n  getRowSelected(row: any): boolean {\r\n    return this.getRowSelectedIdx(row, this.selected) > -1;\r\n  }\r\n\r\n  getRowSelectedIdx(row: any, selected: any[]): number {\r\n    if (!selected || !selected.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return selected.findIndex(r => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, PipeTransform, TemplateRef } from '@angular/core';\r\n\r\nexport interface ISummaryColumn {\r\n  summaryFunc?: (cells: any[]) => any;\r\n  summaryTemplate?: TemplateRef<any>;\r\n\r\n  prop: string;\r\n  pipe?: PipeTransform;\r\n}\r\n\r\nfunction defaultSumFunc(cells: any[]): any {\r\n  const cellsWithValues = cells.filter(cell => !!cell);\r\n\r\n  if (!cellsWithValues.length) {\r\n    return null;\r\n  }\r\n  if (cellsWithValues.some(cell => typeof cell !== 'number')) {\r\n    return null;\r\n  }\r\n\r\n  return cellsWithValues.reduce((res, cell) => res + cell);\r\n}\r\n\r\nfunction noopSumFunc(cells: any[]): void {\r\n  return null;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-summary-row',\r\n  template: `\r\n    <datatable-body-row\r\n      *ngIf=\"summaryRow && _internalColumns\"\r\n      tabindex=\"-1\"\r\n      [innerWidth]=\"innerWidth\"\r\n      [offsetX]=\"offsetX\"\r\n      [columns]=\"_internalColumns\"\r\n      [rowHeight]=\"rowHeight\"\r\n      [row]=\"summaryRow\"\r\n      [rowIndex]=\"-1\"\r\n    >\r\n    </datatable-body-row>\r\n  `,\r\n  host: {\r\n    class: 'datatable-summary-row'\r\n  }\r\n})\r\nexport class DataTableSummaryRowComponent implements OnChanges {\r\n  @Input() rows: any[];\r\n  @Input() columns: ISummaryColumn[];\r\n\r\n  @Input() rowHeight: number;\r\n  @Input() offsetX: number;\r\n  @Input() innerWidth: number;\r\n\r\n  _internalColumns: ISummaryColumn[];\r\n  summaryRow: any = {};\r\n\r\n  ngOnChanges() {\r\n    if (!this.columns || !this.rows) {\r\n      return;\r\n    }\r\n    this.updateInternalColumns();\r\n    this.updateValues();\r\n  }\r\n\r\n  private updateInternalColumns() {\r\n    this._internalColumns = this.columns.map(col => ({\r\n      ...col,\r\n      cellTemplate: col.summaryTemplate\r\n    }));\r\n  }\r\n\r\n  private updateValues() {\r\n    this.summaryRow = {};\r\n\r\n    this.columns\r\n      .filter(col => !col.summaryTemplate)\r\n      .forEach(col => {\r\n        const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\r\n        const sumFunc = this.getSummaryFunction(col);\r\n\r\n        this.summaryRow[col.prop] = col.pipe\r\n          ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\r\n          : sumFunc(cellsFromSingleColumn);\r\n      });\r\n  }\r\n\r\n  private getSummaryFunction(column: ISummaryColumn): (a: any[]) => any {\r\n    if (column.summaryFunc === undefined) {\r\n      return defaultSumFunc;\r\n    } else if (column.summaryFunc === null) {\r\n      return noopSumFunc;\r\n    } else {\r\n      return column.summaryFunc;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ice-custom-tooltip',\r\n  templateUrl: './ice-custom-tooltip.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./ice-custom-tooltip.component.scss'],\r\n  host: {\r\n    class: 'ice-custom-tooltip'\r\n  }\r\n})\r\nexport class CustomToolTipComponent {\r\n  @Input() text: string;\r\n}\r\n","import { Overlay, OverlayPositionBuilder, OverlayRef } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { ComponentRef, Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\r\nimport { CustomToolTipComponent } from '../components/ice-custom-tooltip/ice-custom-tooltip.component';\r\n\r\n@Directive({\r\n  selector: '[iceCustomHtmlToolTip]'\r\n})\r\nexport class ToolTipRendererDirective implements OnDestroy {\r\n  @Input() iceTooltipHtmlText: string;\r\n  @Input() showToolTip = true;\r\n  @Input() showToolTipOnTextOverflow = false;\r\n  @Input() duration = 0;\r\n\r\n  private _overlayRef: OverlayRef;\r\n  private timeout: any;\r\n  private componentInstance: any;\r\n\r\n  constructor(\r\n    private _overlay: Overlay,\r\n    private _overlayPositionBuilder: OverlayPositionBuilder,\r\n    private _elementRef: ElementRef\r\n  ) {}\r\n\r\n  @HostListener('mouseenter')\r\n  show() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n    if (\r\n      (this.showToolTipOnTextOverflow &&\r\n        this._elementRef.nativeElement.offsetWidth < this._elementRef.nativeElement.scrollWidth) ||\r\n      this.showToolTip\r\n    ) {\r\n      if (!this._overlayRef) {\r\n        const positionStrategy = this._overlayPositionBuilder.flexibleConnectedTo(this._elementRef).withPositions([\r\n          {\r\n            originX: 'start',\r\n            originY: 'top',\r\n            overlayX: 'start',\r\n            overlayY: 'bottom',\r\n            offsetY: -5\r\n          }\r\n        ]);\r\n        this._overlayRef = this._overlay.create({ positionStrategy });\r\n      }\r\n      if (!this._overlayRef.hasAttached()) {\r\n        const tooltipRef: ComponentRef<CustomToolTipComponent> = this._overlayRef.attach(\r\n          new ComponentPortal(CustomToolTipComponent)\r\n        );\r\n        this.componentInstance = tooltipRef;\r\n        tooltipRef.instance.text = this.iceTooltipHtmlText;\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hide() {\r\n    this.timeout = setTimeout(() => {\r\n      this.closeToolTip();\r\n    }, this.duration);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n    this.closeToolTip();\r\n    this._overlayRef = null!;\r\n  }\r\n\r\n  private closeToolTip() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.detach();\r\n      this.componentInstance = null!;\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, ViewChildren } from '@angular/core';\n\n@Component({\n  selector: 'ice-datatable-row-select',\n  templateUrl: './ice-datatable-select.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableSelectComponent implements OnInit {\n  editing = false;\n  active = false;\n  rows = [];\n\n  @Input() align = 'left';\n  @Input() focusOnEnter = false;\n  @Input() defaultValue: string;\n  @Input() editOnFocus = false;\n  @Input() selectDisabled = false;\n  @Input() title;\n  @Output() update = new EventEmitter<string>();\n  @Input() set options(options) {\n    if (!this._options) {\n      this.currentClass = (options.find(option => option.value === this.value) || { class: 'none' }).class;\n      this._options = options;\n    }\n  }\n  @Input() default: string;\n  @Input() set value(value) {\n    this.currentClass = (this._options.find(option => option.value === value) || { class: 'none' }).class;\n    this._value = value;\n  }\n  get value() {\n    return this._value;\n  }\n  @ViewChildren('selectElement') selectEl;\n  currentClass = 'initial';\n  _options;\n  _value;\n\n  ngOnInit() {\n    if (!this.value) {\n      this.value = this.defaultValue;\n    }\n    if (this.value) {\n      this.update.emit(this.value);\n    }\n  }\n\n  emitUpdate(newValue) {\n    this.currentClass = (this._options.find(option => option.value === newValue) || { class: 'none' }).class;\n    this.update.emit(newValue);\n  }\n}\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n  ViewChildren,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ice-editable-text',\r\n  templateUrl: './ice-editable-text.component.html',\r\n  styleUrls: ['./ice-editable-text.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'ice-editable-text'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EditableTextComponent implements AfterViewInit {\r\n  editing = false;\r\n  active = false;\r\n\r\n  @Input() align = 'left';\r\n  @Input() editOnSpace = true;\r\n  @Input() editOnClick = true;\r\n  @Input() focusOnEnter = true;\r\n  @Input() editOnFocus = false;\r\n  @Input() disabled = false;\r\n  @Input() value: string;\r\n  @Input() errorText = '';\r\n  @Output() focus = new EventEmitter<null>();\r\n  @Output() toggleEditing = new EventEmitter<null>();\r\n  @Output() toggleActive = new EventEmitter<null>();\r\n  @Output() update = new EventEmitter<string>();\r\n  @ViewChildren('inputElement') inputEl;\r\n  @ViewChild('contentWrapper', { static: false }) content: ElementRef;\r\n\r\n  emitUpdate(newText) {\r\n    if (!this.disabled) {\r\n      this.update.emit(newText);\r\n    }\r\n  }\r\n\r\n  emitToggleEditing($event) {\r\n    $event.stopPropagation();\r\n    if (!this.disabled) {\r\n      this.editing = !this.editing;\r\n    }\r\n  }\r\n\r\n  emitFocus() {\r\n    if (this.focus) {\r\n      this.focus.emit(null);\r\n    }\r\n  }\r\n\r\n  emitToggleActive($event) {\r\n    $event.stopPropagation();\r\n    if (!this.disabled) {\r\n      this.active = !this.active;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.inputEl.changes.subscribe(d => {\r\n      return d.last && d.last.nativeElement.focus();\r\n    });\r\n    if (this.value == null) {\r\n      this.value =\r\n        this.content &&\r\n        this.content.nativeElement.childNodes.length > 0 &&\r\n        this.content.nativeElement.childNodes[0].data;\r\n    }\r\n  }\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { TableColumnProp } from '../types/table-column.type';\r\n\r\nexport type OptionalValueGetter = (row: any) => any | undefined;\r\nexport function optionalGetterForProp(prop: TableColumnProp): OptionalValueGetter {\r\n  return prop && (row => getterForProp(prop)(row, prop));\r\n}\r\n\r\n/**\r\n * This functions rearrange items by their parents\r\n * Also sets the level value to each of the items\r\n *\r\n * Note: Expecting each item has a property called parentId\r\n * Note: This algorithm will fail if a list has two or more items with same ID\r\n * NOTE: This algorithm will fail if there is a deadlock of relationship\r\n *\r\n * For example,\r\n *\r\n * Input\r\n *\r\n * id -> parent\r\n * 1  -> 0\r\n * 2  -> 0\r\n * 3  -> 1\r\n * 4  -> 1\r\n * 5  -> 2\r\n * 7  -> 8\r\n * 6  -> 3\r\n *\r\n *\r\n * Output\r\n * id -> level\r\n * 1      -> 0\r\n * --3    -> 1\r\n * ----6  -> 2\r\n * --4    -> 1\r\n * 2      -> 0\r\n * --5    -> 1\r\n * 7     -> 8\r\n *\r\n *\r\n * @param rows\r\n *\r\n */\r\nexport function groupRowsByParents(rows: any[], from?: OptionalValueGetter, to?: OptionalValueGetter): any[] {\r\n  if (from && to) {\r\n    const nodeById = {};\r\n    const l = rows.length;\r\n    let node: TreeNode | null = null;\r\n\r\n    nodeById[0] = new TreeNode(); // that's the root node\r\n\r\n    const uniqIDs = rows.reduce((arr, item) => {\r\n      const toValue = to(item);\r\n      if (arr.indexOf(toValue) === -1) {\r\n        arr.push(toValue);\r\n      }\r\n      return arr;\r\n    }, []);\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // make TreeNode objects for each item\r\n      nodeById[to(rows[i])] = new TreeNode(rows[i]);\r\n    }\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // link all TreeNode objects\r\n      node = nodeById[to(rows[i])];\r\n      let parent = 0;\r\n      const fromValue = from(node.row);\r\n      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\r\n        parent = fromValue;\r\n      }\r\n      node.parent = nodeById[parent];\r\n      node.row['level'] = node.parent.row['level'] + 1;\r\n      node.parent.children.push(node);\r\n    }\r\n\r\n    let resolvedRows: any[] = [];\r\n    nodeById[0].flatten(function() {\r\n      resolvedRows = [...resolvedRows, this.row];\r\n    }, true);\r\n\r\n    return resolvedRows;\r\n  } else {\r\n    return rows;\r\n  }\r\n}\r\n\r\nclass TreeNode {\r\n  public row: any;\r\n  public parent: any;\r\n  public children: any[];\r\n\r\n  constructor(row: any | null = null) {\r\n    if (!row) {\r\n      row = {\r\n        level: -1,\r\n        treeStatus: 'expanded'\r\n      };\r\n    }\r\n    this.row = row;\r\n    this.parent = null;\r\n    this.children = [];\r\n  }\r\n\r\n  flatten(f: any, recursive: boolean) {\r\n    if (this.row['treeStatus'] === 'expanded') {\r\n      for (let i = 0, l = this.children.length; i < l; i++) {\r\n        const child = this.children[i];\r\n        f.apply(child, Array.prototype.slice.call(arguments, 2));\r\n        if (recursive) child.flatten.apply(child, arguments);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Creates a unique object id.\r\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n */\r\nexport function id() {\r\n  return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n}\r\n","import { camelCase, deCamelCase } from './camel-case';\r\nimport { id } from './id';\r\nimport { getterForProp } from './column-prop-getters';\r\nimport { TableColumn } from '../types/table-column.type';\r\nimport { DataTableColumnDirective } from '../components/columns/column.directive';\r\n\r\n/**\r\n * Sets the column defaults\r\n */\r\nexport function setColumnDefaults(columns: TableColumn[]) {\r\n  if (!columns) return;\r\n\r\n  // Only one column should hold the tree view\r\n  // Thus if multiple columns are provided with\r\n  // isTreeColumn as true we take only the first one\r\n  let treeColumnFound: boolean = false;\r\n\r\n  for (const column of columns) {\r\n    if (!column.$$id) {\r\n      column.$$id = id();\r\n    }\r\n\r\n    // prop can be numeric; zero is valid not a missing prop\r\n    // translate name => prop\r\n    if (isNullOrUndefined(column.prop) && column.name) {\r\n      column.prop = camelCase(column.name);\r\n    }\r\n\r\n    if (!column.$$valueGetter) {\r\n      column.$$valueGetter = getterForProp(column.prop);\r\n    }\r\n\r\n    // format props if no name passed\r\n    if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = deCamelCase(String(column.prop));\r\n    }\r\n\r\n    if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = ''; // Fixes IE and Edge displaying `null`\r\n    }\r\n\r\n    if (!column.hasOwnProperty('resizeable')) {\r\n      column.resizeable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('sortable')) {\r\n      column.sortable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('draggable')) {\r\n      column.draggable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('canAutoResize')) {\r\n      column.canAutoResize = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('width')) {\r\n      column.width = 150;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('isTreeColumn')) {\r\n      column.isTreeColumn = false;\r\n    } else {\r\n      if (column.isTreeColumn && !treeColumnFound) {\r\n        // If the first column with isTreeColumn is true found\r\n        // we mark that treeCoulmn is found\r\n        treeColumnFound = true;\r\n      } else {\r\n        // After that isTreeColumn property for any other column\r\n        // will be set as false\r\n        column.isTreeColumn = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function isNullOrUndefined<T>(value: T | null | undefined): value is null | undefined {\r\n  return value === null || value === undefined;\r\n}\r\n\r\n/**\r\n * Translates templates definitions to objects\r\n */\r\nexport function translateTemplates(templates: DataTableColumnDirective[]): any[] {\r\n  const result: any[] = [];\r\n  for (const temp of templates) {\r\n    const col: any = {};\r\n\r\n    const props = Object.getOwnPropertyNames(temp);\r\n    for (const prop of props) {\r\n      col[prop] = temp[prop];\r\n    }\r\n\r\n    if (temp.headerTemplate) {\r\n      col.headerTemplate = temp.headerTemplate;\r\n    }\r\n\r\n    if (temp.cellTemplate) {\r\n      col.cellTemplate = temp.cellTemplate;\r\n    }\r\n\r\n    if (temp.summaryFunc) {\r\n      col.summaryFunc = temp.summaryFunc;\r\n    }\r\n\r\n    if (temp.summaryTemplate) {\r\n      col.summaryTemplate = temp.summaryTemplate;\r\n    }\r\n\r\n    result.push(col);\r\n  }\r\n\r\n  return result;\r\n}\r\n","export enum ColumnMode {\r\n  standard = 'standard',\r\n  flex = 'flex',\r\n  force = 'force'\r\n}\r\n","export enum ContextmenuType {\r\n  header = 'header',\r\n  body = 'body'\r\n}\r\n","import { columnsByPin, columnsTotalWidth } from './column';\r\n\r\n/**\r\n * Calculates the Total Flex Grow\r\n */\r\nexport function getTotalFlexGrow(columns: any[]) {\r\n  let totalFlexGrow = 0;\r\n\r\n  for (const c of columns) {\r\n    totalFlexGrow += c.flexGrow || 0;\r\n  }\r\n\r\n  return totalFlexGrow;\r\n}\r\n\r\n/**\r\n * Adjusts the column widths.\r\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\r\n */\r\nexport function adjustColumnWidths(allColumns: any, expectedWidth: any) {\r\n  const columnsWidth = columnsTotalWidth(allColumns);\r\n  const totalFlexGrow = getTotalFlexGrow(allColumns);\r\n  const colsByGroup = columnsByPin(allColumns);\r\n\r\n  if (columnsWidth !== expectedWidth) {\r\n    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\r\n  }\r\n}\r\n\r\n/**\r\n * Resizes columns based on the flexGrow property, while respecting manually set widths\r\n */\r\nfunction scaleColumns(colsByGroup: any, maxWidth: any, totalFlexGrow: any) {\r\n  // calculate total width and flexgrow points for coulumns that can be resized\r\n  for (const attr in colsByGroup) {\r\n    for (const column of colsByGroup[attr]) {\r\n      if (!column.canAutoResize) {\r\n        maxWidth -= column.width;\r\n        totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\r\n      } else {\r\n        column.width = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const hasMinWidth = {};\r\n  let remainingWidth = maxWidth;\r\n\r\n  // resize columns until no width is left to be distributed\r\n  do {\r\n    const widthPerFlexPoint = remainingWidth / totalFlexGrow;\r\n    remainingWidth = 0;\r\n\r\n    for (const attr in colsByGroup) {\r\n      for (const column of colsByGroup[attr]) {\r\n        // if the column can be resize and it hasn't reached its minimum width yet\r\n        if (column.canAutoResize && !hasMinWidth[column.prop]) {\r\n          const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\r\n          if (column.minWidth !== undefined && newWidth < column.minWidth) {\r\n            remainingWidth += newWidth - column.minWidth;\r\n            column.width = column.minWidth;\r\n            hasMinWidth[column.prop] = true;\r\n          } else {\r\n            column.width = newWidth;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } while (remainingWidth !== 0);\r\n}\r\n\r\n/**\r\n * Forces the width of the columns to\r\n * distribute equally but overflowing when necessary\r\n *\r\n * Rules:\r\n *\r\n *  - If combined withs are less than the total width of the grid,\r\n *    proportion the widths given the min / max / normal widths to fill the width.\r\n *\r\n *  - If the combined widths, exceed the total width of the grid,\r\n *    use the standard widths.\r\n *\r\n *  - If a column is resized, it should always use that width\r\n *\r\n *  - The proportional widths should never fall below min size if specified.\r\n *\r\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\r\n *    the width should use the original width; not the newly proportioned widths.\r\n */\r\nexport function forceFillColumnWidths(\r\n  allColumns: any[],\r\n  expectedWidth: number,\r\n  startIdx: number,\r\n  allowBleed: boolean,\r\n  defaultColWidth: number = 300\r\n) {\r\n  const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\r\n    return c.canAutoResize !== false;\r\n  });\r\n\r\n  for (const column of columnsToResize) {\r\n    if (!column.$$oldWidth) {\r\n      column.$$oldWidth = column.width;\r\n    }\r\n  }\r\n\r\n  let additionWidthPerColumn = 0;\r\n  let exceedsWindow = false;\r\n  let contentWidth = getContentWidth(allColumns, defaultColWidth);\r\n  let remainingWidth = expectedWidth - contentWidth;\r\n  const columnsProcessed: any[] = [];\r\n  const remainingWidthLimit = 1; // when to stop\r\n\r\n  // This loop takes care of the\r\n  do {\r\n    additionWidthPerColumn = remainingWidth / columnsToResize.length;\r\n    exceedsWindow = contentWidth >= expectedWidth;\r\n\r\n    for (const column of columnsToResize) {\r\n      if (exceedsWindow && allowBleed) {\r\n        column.width = column.$$oldWidth || column.width || defaultColWidth;\r\n      } else {\r\n        const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\r\n\r\n        if (column.minWidth && newSize < column.minWidth) {\r\n          column.width = column.minWidth;\r\n          columnsProcessed.push(column);\r\n        } else if (column.maxWidth && newSize > column.maxWidth) {\r\n          column.width = column.maxWidth;\r\n          columnsProcessed.push(column);\r\n        } else {\r\n          column.width = newSize;\r\n        }\r\n      }\r\n\r\n      column.width = Math.max(0, column.width);\r\n    }\r\n\r\n    contentWidth = getContentWidth(allColumns);\r\n    remainingWidth = expectedWidth - contentWidth;\r\n    removeProcessedColumns(columnsToResize, columnsProcessed);\r\n  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\r\n}\r\n\r\n/**\r\n * Remove the processed columns from the current active columns.\r\n */\r\nfunction removeProcessedColumns(columnsToResize: any[], columnsProcessed: any[]) {\r\n  for (const column of columnsProcessed) {\r\n    const index = columnsToResize.indexOf(column);\r\n    columnsToResize.splice(index, 1);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the width of the columns\r\n */\r\nfunction getContentWidth(allColumns: any, defaultColWidth: number = 300): number {\r\n  let contentWidth = 0;\r\n\r\n  for (const column of allColumns) {\r\n    contentWidth += column.width || defaultColWidth;\r\n  }\r\n\r\n  return contentWidth;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ElementRef,\r\n  EventEmitter,\r\n  ViewChild,\r\n  HostListener,\r\n  ContentChildren,\r\n  OnInit,\r\n  QueryList,\r\n  AfterViewInit,\r\n  HostBinding,\r\n  ContentChild,\r\n  DoCheck,\r\n  KeyValueDiffers,\r\n  KeyValueDiffer,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SkipSelf,\r\n  OnDestroy,\r\n  Optional,\r\n  Inject,\r\n  ViewRef\r\n} from '@angular/core';\r\n\r\nimport { DatatableGroupHeaderDirective } from './body/body-group-header.directive';\r\n\r\nimport { BehaviorSubject, Subscription, Subject, asyncScheduler } from 'rxjs';\r\nimport { INgxDatatableConfig } from '../ngx-datatable.module';\r\nimport { groupRowsByParents, optionalGetterForProp } from '../utils/tree';\r\nimport { TableColumn } from '../types/table-column.type';\r\nimport { setColumnDefaults, translateTemplates } from '../utils/column-helper';\r\nimport { ColumnMode } from '../types/column-mode.type';\r\nimport { SelectionType } from '../types/selection.type';\r\nimport { SortType } from '../types/sort.type';\r\nimport { ContextmenuType } from '../types/contextmenu.type';\r\nimport { DataTableColumnDirective } from './columns/column.directive';\r\nimport { DatatableRowDetailDirective } from './row-detail/row-detail.directive';\r\nimport { DatatableFooterDirective } from './footer/footer.directive';\r\nimport { DataTableBodyComponent } from './body/body.component';\r\nimport { DataTableHeaderComponent } from './header/header.component';\r\nimport { ScrollbarHelper } from '../services/scrollbar-helper.service';\r\nimport { ColumnChangesService } from '../services/column-changes.service';\r\nimport { DimensionsHelper } from '../services/dimensions-helper.service';\r\nimport { throttleable } from '../utils/throttle';\r\nimport { forceFillColumnWidths, adjustColumnWidths } from '../utils/math';\r\nimport { sortRows } from '../utils/sort';\r\nimport { ResizeSensor } from 'css-element-queries';\r\nimport { throttleTime, debounceTime, delay } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'ngx-datatable',\r\n  templateUrl: './datatable.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./datatable.component.scss'],\r\n  host: {\r\n    class: 'ngx-datatable'\r\n  }\r\n})\r\nexport class DatatableComponent implements OnInit, DoCheck, AfterViewInit {\r\n  /**\r\n   * Template for the target marker of drag target columns.\r\n   */\r\n  @Input() targetMarkerTemplate: any;\r\n\r\n  /**\r\n   * Rows that are displayed in the table.\r\n   */\r\n  @Input() set rows(val: any) {\r\n    this._rows = val;\r\n\r\n    if (val) {\r\n      this._internalRows = [...val];\r\n    }\r\n\r\n    // auto sort on new updates\r\n    if (!this.externalSorting) {\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // auto group by parent on new update\r\n    this._internalRows = groupRowsByParents(\r\n      this._internalRows,\r\n      optionalGetterForProp(this.treeFromRelation),\r\n      optionalGetterForProp(this.treeToRelation)\r\n    );\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n\r\n    if (this._rows && this._groupRowsBy) {\r\n      // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\r\n      this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Gets the rows.\r\n   */\r\n  get rows(): any {\r\n    return this._rows;\r\n  }\r\n\r\n  /**\r\n   * This attribute allows the user to set the name of the column to group the data with\r\n   */\r\n  @Input() set groupRowsBy(val: string) {\r\n    if (val) {\r\n      this._groupRowsBy = val;\r\n      if (this._rows && this._groupRowsBy) {\r\n        // cretes a new array with the data grouped\r\n        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\r\n      }\r\n    }\r\n  }\r\n\r\n  get groupRowsBy() {\r\n    return this._groupRowsBy;\r\n  }\r\n\r\n  /**\r\n   * This attribute allows the user to set a grouped array in the following format:\r\n   *  [\r\n   *    {groupid=1} [\r\n   *      {id=1 name=\"test1\"},\r\n   *      {id=2 name=\"test2\"},\r\n   *      {id=3 name=\"test3\"}\r\n   *    ]},\r\n   *    {groupid=2>[\r\n   *      {id=4 name=\"test4\"},\r\n   *      {id=5 name=\"test5\"},\r\n   *      {id=6 name=\"test6\"}\r\n   *    ]}\r\n   *  ]\r\n   */\r\n  @Input() groupedRows: any[];\r\n\r\n  @Input() expandable: boolean = false;\r\n\r\n  /**\r\n   * Columns to be displayed.\r\n   */\r\n  @Input() set columns(val: TableColumn[]) {\r\n    val = [\r\n      ...(this.expandable\r\n        ? [\r\n            {\r\n              width: 50,\r\n              prop: 'ice-expandable',\r\n              name: '',\r\n              resizeable: false,\r\n              canAutoResize: false,\r\n              draggable: false,\r\n              sortable: false\r\n            }\r\n          ]\r\n        : []),\r\n      ...val\r\n    ];\r\n    if (val) {\r\n      this._internalColumns = [...val];\r\n      setColumnDefaults(this._internalColumns);\r\n      this.recalculateColumns();\r\n    }\r\n\r\n    this._columns = val;\r\n  }\r\n\r\n  /**\r\n   * Get the columns.\r\n   */\r\n  get columns(): TableColumn[] {\r\n    return this._columns;\r\n  }\r\n\r\n  /**\r\n   * List of row objects that should be\r\n   * represented as selected in the grid.\r\n   * Default value: `[]`\r\n   */\r\n  @Input() selected: any[] = [];\r\n\r\n  /**\r\n   * Enable vertical scrollbars\r\n   */\r\n  @Input() scrollbarV: boolean = false;\r\n\r\n  /**\r\n   * Enable horz scrollbars\r\n   */\r\n  @Input() scrollbarH: boolean = false;\r\n\r\n  /**\r\n   * The row height; which is necessary\r\n   * to calculate the height for the lazy rendering.\r\n   */\r\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number) = 30;\r\n\r\n  /**\r\n   * Type of column width distribution formula.\r\n   * Example: flex, force, standard\r\n   */\r\n  @Input() columnMode: ColumnMode = ColumnMode.standard;\r\n\r\n  /**\r\n   * The minimum header height in pixels.\r\n   * Pass a falsey for no header\r\n   */\r\n  @Input() headerHeight: any = 30;\r\n\r\n  /**\r\n   * The minimum footer height in pixels.\r\n   * Pass falsey for no footer\r\n   */\r\n  @Input() footerHeight: number = 0;\r\n\r\n  /**\r\n   * If the table should use external paging\r\n   * otherwise its assumed that all data is preloaded.\r\n   */\r\n  @Input() externalPaging: boolean = false;\r\n\r\n  /**\r\n   * If the table should use external sorting or\r\n   * the built-in basic sorting.\r\n   */\r\n  @Input() externalSorting: boolean = false;\r\n\r\n  /**\r\n   * The page size to be shown.\r\n   * Default value: `undefined`\r\n   */\r\n  @Input() set limit(val: number | undefined) {\r\n    this._limit = val;\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Gets the limit.\r\n   */\r\n  get limit(): number | undefined {\r\n    return this._limit;\r\n  }\r\n\r\n  /**\r\n   * The total count of all rows.\r\n   * Default value: `0`\r\n   */\r\n  @Input() set count(val: number) {\r\n    this._count = val;\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Gets the count.\r\n   */\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n\r\n  /**\r\n   * The current offset ( page - 1 ) shown.\r\n   * Default value: `0`\r\n   */\r\n  @Input() set offset(val: number) {\r\n    this._offset = val;\r\n  }\r\n  get offset(): number {\r\n    return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\r\n  }\r\n\r\n  /**\r\n   * Show the linear loading bar.\r\n   * Default value: `false`\r\n   */\r\n  @Input() loadingIndicator: boolean = false;\r\n\r\n  /**\r\n   * Type of row selection. Options are:\r\n   *\r\n   *  - `single`\r\n   *  - `multi`\r\n   *  - `checkbox`\r\n   *  - `multiClick`\r\n   *  - `cell`\r\n   *\r\n   * For no selection pass a `falsey`.\r\n   * Default value: `undefined`\r\n   */\r\n  @Input() selectionType: SelectionType;\r\n\r\n  /**\r\n   * Enable/Disable ability to re-order columns\r\n   * by dragging them.\r\n   */\r\n  @Input() reorderable: boolean = true;\r\n\r\n  /**\r\n   * Swap columns on re-order columns or\r\n   * move them.\r\n   */\r\n  @Input() swapColumns: boolean = true;\r\n\r\n  /**\r\n   * The type of sorting\r\n   */\r\n  @Input() sortType: SortType = SortType.single;\r\n\r\n  /**\r\n   * Array of sorted columns by property and type.\r\n   * Default value: `[]`\r\n   */\r\n  @Input() sorts: any[] = [];\r\n\r\n  /**\r\n   * Css class overrides\r\n   */\r\n  @Input() cssClasses: any = {\r\n    sortAscending: 'datatable-icon-up',\r\n    sortDescending: 'datatable-icon-down',\r\n    pagerLeftArrow: 'datatable-icon-left',\r\n    pagerRightArrow: 'datatable-icon-right',\r\n    pagerPrevious: 'datatable-icon-prev',\r\n    pagerNext: 'datatable-icon-skip'\r\n  };\r\n\r\n  /**\r\n   * Message overrides for localization\r\n   *\r\n   * emptyMessage     [default] = 'No data to display'\r\n   * totalMessage     [default] = 'total'\r\n   * selectedMessage  [default] = 'selected'\r\n   */\r\n  @Input() messages: any = {\r\n    // Message to show when array is presented\r\n    // but contains no values\r\n    emptyMessage: 'No data to display',\r\n\r\n    // Footer total message\r\n    totalMessage: 'total',\r\n\r\n    // Footer selected message\r\n    selectedMessage: 'selected'\r\n  };\r\n\r\n  /**\r\n   * Row specific classes.\r\n   * Similar implementation to ngClass.\r\n   *\r\n   *  [rowClass]=\"'first second'\"\r\n   *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\r\n   */\r\n  @Input() rowClass: any;\r\n\r\n  /**\r\n   * A boolean/function you can use to check whether you want\r\n   * to select a particular row based on a criteria. Example:\r\n   *\r\n   *    (selection) => {\r\n   *      return selection !== 'Ethel Price';\r\n   *    }\r\n   */\r\n  @Input() selectCheck: any;\r\n\r\n  /**\r\n   * A function you can use to check whether you want\r\n   * to show the checkbox for a particular row based on a criteria. Example:\r\n   *\r\n   *    (row, column, value) => {\r\n   *      return row.name !== 'Ethel Price';\r\n   *    }\r\n   */\r\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean;\r\n\r\n  /**\r\n   * A boolean you can use to set the detault behaviour of rows and groups\r\n   * whether they will start expanded or not. If ommited the default is NOT expanded.\r\n   *\r\n   */\r\n  @Input() groupExpansionDefault: boolean = false;\r\n\r\n  /**\r\n   * Property to which you can use for custom tracking of rows.\r\n   * Example: 'name'\r\n   */\r\n  @Input() trackByProp: string;\r\n\r\n  /**\r\n   * Property to which you can use for determining select all\r\n   * rows on current page or not.\r\n   *\r\n   * @memberOf DatatableComponent\r\n   */\r\n  @Input() selectAllRowsOnPage = false;\r\n\r\n  /**\r\n   * A flag for row virtualization on / off\r\n   */\r\n  @Input() virtualization: boolean = true;\r\n\r\n  /**\r\n   * Tree from relation\r\n   */\r\n  @Input() treeFromRelation: string;\r\n\r\n  /**\r\n   * Tree to relation\r\n   */\r\n  @Input() treeToRelation: string;\r\n\r\n  /**\r\n   * A flag for switching summary row on / off\r\n   */\r\n  @Input() summaryRow: boolean = false;\r\n\r\n  /**\r\n   * A height of summary row\r\n   */\r\n  @Input() summaryHeight: number = 30;\r\n\r\n  /**\r\n   * A property holds a summary row position: top/bottom\r\n   */\r\n  @Input() summaryPosition: string = 'top';\r\n\r\n  /**\r\n   * Body was scrolled typically in a `scrollbarV:true` scenario.\r\n   */\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * A cell or row was focused via keyboard or mouse click.\r\n   */\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * A cell or row was selected.\r\n   */\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Column sort was invoked.\r\n   */\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Ice column filter was invoked.\r\n   */\r\n  @Output() filter: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * The table was paged either triggered by the pager or the body scroll.\r\n   */\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Columns were re-ordered.\r\n   */\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Column was resized.\r\n   */\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * The context menu was invoked on the table.\r\n   * type indicates whether the header or the body was clicked.\r\n   * content contains either the column or the row that was clicked.\r\n   */\r\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent; type: ContextmenuType; content: any }>(false);\r\n\r\n  /**\r\n   * A row was expanded ot collapsed for tree\r\n   */\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * CSS class applied if the header height if fixed height.\r\n   */\r\n  @HostBinding('class.fixed-header')\r\n  get isFixedHeader(): boolean {\r\n    const headerHeight: number | string = this.headerHeight;\r\n    return typeof headerHeight === 'string' ? <string>headerHeight !== 'auto' : true;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to the root element if\r\n   * the row heights are fixed heights.\r\n   */\r\n  @HostBinding('class.fixed-row')\r\n  get isFixedRow(): boolean {\r\n    return this.rowHeight !== 'auto';\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element if\r\n   * vertical scrolling is enabled.\r\n   */\r\n  @HostBinding('class.scroll-vertical')\r\n  get isVertScroll(): boolean {\r\n    return this.scrollbarV;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element if\r\n   * virtualization is enabled.\r\n   */\r\n  @HostBinding('class.virtualized')\r\n  get isVirtualized(): boolean {\r\n    return this.virtualization;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to the root element\r\n   * if the horziontal scrolling is enabled.\r\n   */\r\n  @HostBinding('class.scroll-horz')\r\n  get isHorScroll(): boolean {\r\n    return this.scrollbarH;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element is selectable.\r\n   */\r\n  @HostBinding('class.selectable')\r\n  get isSelectable(): boolean {\r\n    return this.selectionType !== undefined;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root is checkbox selection.\r\n   */\r\n  @HostBinding('class.checkbox-selection')\r\n  get isCheckboxSelection(): boolean {\r\n    return this.selectionType === SelectionType.checkbox;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root if cell selection.\r\n   */\r\n  @HostBinding('class.cell-selection')\r\n  get isCellSelection(): boolean {\r\n    return this.selectionType === SelectionType.cell;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root if single select.\r\n   */\r\n  @HostBinding('class.single-selection')\r\n  get isSingleSelection(): boolean {\r\n    return this.selectionType === SelectionType.single;\r\n  }\r\n\r\n  /**\r\n   * CSS class added to root element if mulit select\r\n   */\r\n  @HostBinding('class.multi-selection')\r\n  get isMultiSelection(): boolean {\r\n    return this.selectionType === SelectionType.multi;\r\n  }\r\n\r\n  /**\r\n   * CSS class added to root element if mulit click select\r\n   */\r\n  @HostBinding('class.multi-click-selection')\r\n  get isMultiClickSelection(): boolean {\r\n    return this.selectionType === SelectionType.multiClick;\r\n  }\r\n\r\n  /**\r\n   * Column templates gathered from `ContentChildren`\r\n   * if described in your markup.\r\n   */\r\n  @ContentChildren(DataTableColumnDirective)\r\n  set columnTemplates(val: QueryList<DataTableColumnDirective>) {\r\n    this._columnTemplates = val;\r\n    this.translateColumns(val);\r\n  }\r\n\r\n  /**\r\n   * Returns the column templates.\r\n   */\r\n  get columnTemplates(): QueryList<DataTableColumnDirective> {\r\n    return this._columnTemplates;\r\n  }\r\n\r\n  /**\r\n   * Row Detail templates gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableRowDetailDirective, { static: false })\r\n  rowDetail: DatatableRowDetailDirective;\r\n\r\n  /**\r\n   * Group Header templates gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableGroupHeaderDirective, { static: false })\r\n  groupHeader: DatatableGroupHeaderDirective;\r\n\r\n  /**\r\n   * Footer template gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableFooterDirective, { static: false })\r\n  footer: DatatableFooterDirective;\r\n\r\n  /**\r\n   * Reference to the body component for manually\r\n   * invoking functions on the body.\r\n   */\r\n  @ViewChild(DataTableBodyComponent, { static: false })\r\n  bodyComponent: DataTableBodyComponent;\r\n\r\n  /**\r\n   * Reference to the header component for manually\r\n   * invoking functions on the header.\r\n   *\r\n   * @memberOf DatatableComponent\r\n   */\r\n  @ViewChild(DataTableHeaderComponent, { static: false })\r\n  headerComponent: DataTableHeaderComponent;\r\n\r\n  /**\r\n   * Returns if all rows are selected.\r\n   */\r\n  get allRowsSelected(): boolean {\r\n    let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\r\n\r\n    if (this.selectAllRowsOnPage) {\r\n      const indexes = this.bodyComponent.indexes;\r\n      const rowsOnPage = indexes.last - indexes.first;\r\n      allRowsSelected = this.selected.length === rowsOnPage;\r\n    }\r\n\r\n    return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\r\n  }\r\n\r\n  element: HTMLElement;\r\n  _innerWidth: number;\r\n  pageSize: number;\r\n  bodyHeight: number;\r\n  rowCount: number = 0;\r\n  rowDiffer: KeyValueDiffer<{}, {}>;\r\n\r\n  _offsetX = new BehaviorSubject(0);\r\n  _limit: number | undefined;\r\n  _count: number = 0;\r\n  _offset: number = 0;\r\n  _rows: any[];\r\n  _groupRowsBy: string;\r\n  _internalRows: any[];\r\n  _internalColumns: TableColumn[];\r\n  _columns: TableColumn[];\r\n  _columnTemplates: QueryList<DataTableColumnDirective>;\r\n  _subscriptions: Subscription[] = [];\r\n  resizeSensor: ResizeSensor;\r\n  recalculate$ = new Subject();\r\n\r\n  constructor(\r\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\r\n    @SkipSelf() private dimensionsHelper: DimensionsHelper,\r\n    private cd: ChangeDetectorRef,\r\n    element: ElementRef,\r\n    differs: KeyValueDiffers,\r\n    private columnChangesService: ColumnChangesService,\r\n    @Optional() @Inject('configuration') private configuration: INgxDatatableConfig\r\n  ) {\r\n    // get ref to elm for measuring\r\n    this.element = element.nativeElement;\r\n    this.rowDiffer = differs.find({}).create();\r\n\r\n    // apply global settings from Module.forRoot\r\n    if (this.configuration && this.configuration.messages) {\r\n      this.messages = { ...this.configuration.messages };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after data-bound\r\n   * properties of a directive are initialized.\r\n   */\r\n  ngOnInit(): void {\r\n    // need to call this immediatly to size\r\n    // if the table is hidden the visibility\r\n    // listener will invoke this itself upon show\r\n    this.recalculate();\r\n    if (ResizeSensor) {\r\n      this.resizeSensor = new ResizeSensor(this.element, () => this.recalculate$.next());\r\n    }\r\n    this._subscriptions.push(\r\n      this.recalculate$\r\n        .pipe(\r\n          throttleTime(250, asyncScheduler, { leading: true, trailing: true }),\r\n          delay(100)\r\n        )\r\n        .subscribe(() => this.recalculate())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after a component's\r\n   * view has been fully initialized.\r\n   */\r\n  ngAfterViewInit(): void {\r\n    if (!this.externalSorting) {\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // this has to be done to prevent the change detection\r\n    // tree from freaking out because we are readjusting\r\n    if (typeof requestAnimationFrame === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      this.recalculate();\r\n\r\n      // emit page for virtual server-side kickoff\r\n      if (this.externalPaging && this.scrollbarV) {\r\n        this.page.emit({\r\n          count: this.count,\r\n          pageSize: this.pageSize,\r\n          limit: this.limit,\r\n          offset: 0\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after a component's\r\n   * content has been fully initialized.\r\n   */\r\n  ngAfterContentInit() {\r\n    this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\r\n    this.listenForColumnInputChanges();\r\n  }\r\n\r\n  /**\r\n   * This will be used when displaying or selecting rows.\r\n   * when tracking/comparing them, we'll use the value of this fn,\r\n   *\r\n   * (`fn(x) === fn(y)` instead of `x === y`)\r\n   */\r\n  @Input() rowIdentity: (x: any) => any = (x: any) => {\r\n    if (this._groupRowsBy) {\r\n      // each group in groupedRows are stored as {key, value: [rows]},\r\n      // where key is the groupRowsBy index\r\n      return x.key;\r\n    } else {\r\n      return x;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Translates the templates to the column objects\r\n   */\r\n  translateColumns(val: any) {\r\n    if (val) {\r\n      const arr = val.toArray();\r\n      if (arr.length) {\r\n        this._internalColumns = translateTemplates(arr);\r\n        setColumnDefaults(this._internalColumns);\r\n        this.recalculateColumns();\r\n        this.sortInternalRows();\r\n        this.cd.markForCheck();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a map with the data grouped by the user choice of grouping index\r\n   *\r\n   * @param originalArray the original array passed via parameter\r\n   * @param groupByIndex  the index of the column to group the data by\r\n   */\r\n  groupArrayBy(originalArray: any, groupBy: any) {\r\n    // create a map to hold groups with their corresponding results\r\n    const map = new Map();\r\n    let i: number = 0;\r\n\r\n    originalArray.forEach((item: any) => {\r\n      const key = item[groupBy];\r\n      if (!map.has(key)) {\r\n        map.set(key, [item]);\r\n      } else {\r\n        map.get(key).push(item);\r\n      }\r\n      i++;\r\n    });\r\n\r\n    const addGroup = (key: any, value: any) => {\r\n      return { key, value };\r\n    };\r\n\r\n    // convert map back to a simple array of objects\r\n    return Array.from(map, x => addGroup(x[0], x[1]));\r\n  }\r\n\r\n  /*\r\n   * Lifecycle hook that is called when Angular dirty checks a directive.\r\n   */\r\n  ngDoCheck(): void {\r\n    if (this.rowDiffer.diff(this.rows)) {\r\n      if (!this.externalSorting) {\r\n        this.sortInternalRows();\r\n      } else {\r\n        this._internalRows = [...this.rows];\r\n      }\r\n\r\n      // auto group by parent on new update\r\n      this._internalRows = groupRowsByParents(\r\n        this._internalRows,\r\n        optionalGetterForProp(this.treeFromRelation),\r\n        optionalGetterForProp(this.treeToRelation)\r\n      );\r\n\r\n      this.recalculatePages();\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalc's the sizes of the grid.\r\n   *\r\n   * Updated automatically on changes to:\r\n   *\r\n   *  - Columns\r\n   *  - Rows\r\n   *  - Paging related\r\n   *\r\n   * Also can be manually invoked or upon window resize.\r\n   */\r\n  recalculate(): void {\r\n    this.recalculateDims();\r\n    this.recalculateColumns();\r\n    requestAnimationFrame(() => {\r\n      if (!(this.cd as ViewRef).destroyed) {\r\n        this.cd.detectChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Recalulcates the column widths based on column width\r\n   * distribution mode and scrollbar offsets.\r\n   */\r\n  recalculateColumns(\r\n    columns: any[] = this._internalColumns,\r\n    forceIdx: number = -1,\r\n    allowBleed: boolean = this.scrollbarH\r\n  ): any[] | undefined {\r\n    if (!columns) return undefined;\r\n\r\n    let width = this._innerWidth;\r\n    if (this.scrollbarV) {\r\n      width = width - this.scrollbarHelper.width;\r\n    }\r\n\r\n    if (this.columnMode === ColumnMode.force) {\r\n      forceFillColumnWidths(columns, width, forceIdx, allowBleed);\r\n    } else if (this.columnMode === ColumnMode.flex) {\r\n      adjustColumnWidths(columns, width);\r\n    }\r\n\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Recalculates the dimensions of the table size.\r\n   * Internally calls the page size and row count calcs too.\r\n   *\r\n   */\r\n  recalculateDims(): void {\r\n    const dims = this.dimensionsHelper.getDimensions(this.element);\r\n    this._innerWidth = Math.floor(dims.width);\r\n\r\n    if (this.scrollbarV) {\r\n      let height = dims.height;\r\n      if (this.headerHeight) height = height - this.headerHeight;\r\n      if (this.footerHeight) height = height - this.footerHeight;\r\n      this.bodyHeight = height;\r\n    }\r\n\r\n    this.recalculatePages();\r\n  }\r\n\r\n  /**\r\n   * Recalculates the pages after a update.\r\n   */\r\n  recalculatePages(): void {\r\n    this.pageSize = this.calcPageSize();\r\n    this.rowCount = this.calcRowCount();\r\n  }\r\n\r\n  /**\r\n   * Body triggered a page event.\r\n   */\r\n  onBodyPage({ offset }: any): void {\r\n    // Avoid pagination caming from body events like scroll when the table\r\n    // has no virtualization and the external paging is enable.\r\n    // This means, let's the developer handle pagination by my him(her) self\r\n    if (this.externalPaging && !this.virtualization) {\r\n      return;\r\n    }\r\n\r\n    this.offset = offset;\r\n\r\n    this.page.emit({\r\n      count: this.count,\r\n      pageSize: this.pageSize,\r\n      limit: this.limit,\r\n      offset: this.offset\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The body triggered a scroll event.\r\n   */\r\n  onBodyScroll(event: MouseEvent): void {\r\n    this._offsetX.next(event.offsetX);\r\n    this.scroll.emit(event);\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * The footer triggered a page event.\r\n   */\r\n  onFooterPage(event: any) {\r\n    this.offset = event.page - 1;\r\n    this.bodyComponent.updateOffsetY(this.offset);\r\n\r\n    this.page.emit({\r\n      count: this.count,\r\n      pageSize: this.pageSize,\r\n      limit: this.limit,\r\n      offset: this.offset\r\n    });\r\n\r\n    if (this.selectAllRowsOnPage) {\r\n      this.selected = [];\r\n      this.select.emit({\r\n        selected: this.selected\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalculates the sizes of the page\r\n   */\r\n  calcPageSize(val: any[] = this.rows): number {\r\n    // Keep the page size constant even if the row has been expanded.\r\n    // This is because an expanded row is still considered to be a child of\r\n    // the original row.  Hence calculation would use rowHeight only.\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const size = Math.ceil(this.bodyHeight / (this.rowHeight as number));\r\n      return Math.max(size, 0);\r\n    }\r\n\r\n    // if limit is passed, we are paging\r\n    if (this.limit !== undefined) {\r\n      return this.limit;\r\n    }\r\n\r\n    // otherwise use row length\r\n    if (val) {\r\n      return val.length;\r\n    }\r\n\r\n    // other empty :(\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Calculates the row count.\r\n   */\r\n  calcRowCount(val: any[] = this.rows): number {\r\n    if (!this.externalPaging) {\r\n      if (!val) return 0;\r\n\r\n      if (this.groupedRows) {\r\n        return this.groupedRows.length;\r\n      } else if (this.treeFromRelation != null && this.treeToRelation != null) {\r\n        return this._internalRows.length;\r\n      } else {\r\n        return val.length;\r\n      }\r\n    }\r\n\r\n    return this.count;\r\n  }\r\n\r\n  /**\r\n   * The header triggered a contextmenu event.\r\n   */\r\n  onColumnContextmenu({ event, column }: any): void {\r\n    this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\r\n  }\r\n\r\n  /**\r\n   * The body triggered a contextmenu event.\r\n   */\r\n  onRowContextmenu({ event, row }: any): void {\r\n    this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column resize event.\r\n   */\r\n  onColumnResize({ column, newValue }: any): void {\r\n    /* Safari/iOS 10.2 workaround */\r\n    if (column === undefined) {\r\n      return;\r\n    }\r\n\r\n    let idx: number;\r\n    const cols = this._internalColumns.map((c, i) => {\r\n      c = { ...c };\r\n\r\n      if (c.$$id === column.$$id) {\r\n        idx = i;\r\n        c.width = newValue;\r\n\r\n        // set this so we can force the column\r\n        // width distribution to be to this value\r\n        c.$$oldWidth = newValue;\r\n      }\r\n\r\n      return c;\r\n    });\r\n\r\n    this.recalculateColumns(cols, idx);\r\n    this._internalColumns = cols;\r\n\r\n    this.resize.emit({\r\n      column,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column re-order event.\r\n   */\r\n  onColumnReorder({ column, newValue, prevValue }: any): void {\r\n    const cols = this._internalColumns.map(c => {\r\n      return { ...c };\r\n    });\r\n\r\n    if (this.swapColumns) {\r\n      const prevCol = cols[newValue];\r\n      cols[newValue] = column;\r\n      cols[prevValue] = prevCol;\r\n    } else {\r\n      if (newValue > prevValue) {\r\n        const movedCol = cols[prevValue];\r\n        for (let i = prevValue; i < newValue; i++) {\r\n          cols[i] = cols[i + 1];\r\n        }\r\n        cols[newValue] = movedCol;\r\n      } else {\r\n        const movedCol = cols[prevValue];\r\n        for (let i = prevValue; i > newValue; i--) {\r\n          cols[i] = cols[i - 1];\r\n        }\r\n        cols[newValue] = movedCol;\r\n      }\r\n    }\r\n\r\n    this._internalColumns = cols;\r\n\r\n    this.reorder.emit({\r\n      column,\r\n      newValue,\r\n      prevValue\r\n    });\r\n  }\r\n\r\n  onColumnFilter(event: any): void {\r\n    this.filter.emit(event);\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column sort event.\r\n   */\r\n  onColumnSort(event: any): void {\r\n    // clean selected rows\r\n    if (this.selectAllRowsOnPage) {\r\n      this.selected = [];\r\n      this.select.emit({\r\n        selected: this.selected\r\n      });\r\n    }\r\n\r\n    this.sorts = event.sorts;\r\n\r\n    // this could be optimized better since it will resort\r\n    // the rows again on the 'push' detection...\r\n    if (this.externalSorting === false) {\r\n      // don't use normal setter so we don't resort\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // auto group by parent on new update\r\n    this._internalRows = groupRowsByParents(\r\n      this._internalRows,\r\n      optionalGetterForProp(this.treeFromRelation),\r\n      optionalGetterForProp(this.treeToRelation)\r\n    );\r\n\r\n    // Always go to first page when sorting to see the newly sorted data\r\n    this.offset = 0;\r\n    this.bodyComponent.updateOffsetY(this.offset);\r\n    this.sort.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Toggle all row selection\r\n   */\r\n  onHeaderSelect(event: any): void {\r\n    if (this.selectAllRowsOnPage) {\r\n      // before we splice, chk if we currently have all selected\r\n      const first = this.bodyComponent.indexes.first;\r\n      const last = this.bodyComponent.indexes.last;\r\n      const allSelected = this.selected.length === last - first;\r\n\r\n      // remove all existing either way\r\n      this.selected = [];\r\n\r\n      // do the opposite here\r\n      if (!allSelected) {\r\n        this.selected.push(...this._internalRows.slice(first, last));\r\n      }\r\n    } else {\r\n      // before we splice, chk if we currently have all selected\r\n      const allSelected = this.selected.length === this.rows.length;\r\n      // remove all existing either way\r\n      this.selected = [];\r\n      // do the opposite here\r\n      if (!allSelected) {\r\n        this.selected.push(...this.rows);\r\n      }\r\n    }\r\n\r\n    this.select.emit({\r\n      selected: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A row was selected from body\r\n   */\r\n  onBodySelect(event: any): void {\r\n    this.select.emit(event);\r\n  }\r\n\r\n  /**\r\n   * A row was expanded or collapsed for tree\r\n   */\r\n  onTreeAction(event: any) {\r\n    const row = event.row;\r\n    // TODO: For duplicated items this will not work\r\n    const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\r\n    this.treeAction.emit({ row, rowIndex });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    if (this.resizeSensor) {\r\n      this.resizeSensor.detach();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * listen for changes to input bindings of all DataTableColumnDirective and\r\n   * trigger the columnTemplates.changes observable to emit\r\n   */\r\n  private listenForColumnInputChanges(): void {\r\n    this._subscriptions.push(\r\n      this.columnChangesService.columnInputChanges$.subscribe(() => {\r\n        if (this.columnTemplates) {\r\n          this.columnTemplates.notifyOnChanges();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private sortInternalRows(): void {\r\n    this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ScrollbarHelper } from './services/scrollbar-helper.service';\nimport { DimensionsHelper } from './services/dimensions-helper.service';\nimport { ColumnChangesService } from './services/column-changes.service';\nimport { DataTableFooterTemplateDirective } from './components/footer/footer-template.directive';\nimport { VisibilityDirective } from './directives/visibility.directive';\nimport { DraggableDirective } from './directives/draggable.directive';\nimport { ResizeableDirective } from './directives/resizeable.directive';\nimport { OrderableDirective } from './directives/orderable.directive';\nimport { LongPressDirective } from './directives/long-press.directive';\nimport { ScrollerComponent } from './components/body/scroller.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { DataTableColumnDirective } from './components/columns/column.directive';\nimport { DataTableHeaderComponent } from './components/header/header.component';\nimport { DataTableHeaderCellComponent } from './components/header/header-cell.component';\nimport { DataTableBodyComponent } from './components/body/body.component';\nimport { DataTableFooterComponent } from './components/footer/footer.component';\nimport { DataTablePagerComponent } from './components/footer/pager.component';\nimport { ProgressBarComponent } from './components/body/progress-bar.component';\nimport { DataTableBodyRowComponent } from './components/body/body-row.component';\nimport { DataTableRowWrapperComponent } from './components/body/body-row-wrapper.component';\nimport { DatatableRowDetailDirective } from './components/row-detail/row-detail.directive';\nimport { DatatableGroupHeaderDirective } from './components/body/body-group-header.directive';\nimport { DatatableRowDetailTemplateDirective } from './components/row-detail/row-detail-template.directive';\nimport { DataTableBodyCellComponent } from './components/body/body-cell.component';\nimport { DataTableSelectionComponent } from './components/body/selection.component';\nimport { DataTableColumnHeaderDirective } from './components/columns/column-header.directive';\nimport { DataTableColumnCellDirective } from './components/columns/column-cell.directive';\nimport { DataTableColumnCellTreeToggle } from './components/columns/tree.directive';\nimport { DatatableFooterDirective } from './components/footer/footer.directive';\nimport { DatatableGroupHeaderTemplateDirective } from './components/body/body-group-header-template.directive';\nimport { DataTableSummaryRowComponent } from './components/body/summary/summary-row.component';\nimport { ToolTipRendererDirective } from './directives/ice-custom-html-tooltip.directive';\nimport { CustomToolTipComponent } from './components/ice-custom-tooltip/ice-custom-tooltip.component';\nimport { DatatableSelectComponent } from './components/ice-datatable-select/ice-datatable-select.component';\nimport { EditableTextComponent } from './components/ice-editable-text/ice-editable-text.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { DatatableComponent } from './components/datatable.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { MatSelectModule } from '@angular/material';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTooltipModule,\n    OverlayModule,\n    MatIconModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n  declarations: [\n    DataTableFooterTemplateDirective,\n    VisibilityDirective,\n    DraggableDirective,\n    ResizeableDirective,\n    OrderableDirective,\n    LongPressDirective,\n    ToolTipRendererDirective,\n    ScrollerComponent,\n    DatatableComponent,\n    DataTableColumnDirective,\n    DataTableHeaderComponent,\n    DataTableHeaderCellComponent,\n    DataTableBodyComponent,\n    DataTableFooterComponent,\n    DataTablePagerComponent,\n    ProgressBarComponent,\n    DataTableBodyRowComponent,\n    DataTableRowWrapperComponent,\n    CustomToolTipComponent,\n    DatatableSelectComponent,\n    EditableTextComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableBodyCellComponent,\n    DataTableSelectionComponent,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DatatableFooterDirective,\n    DatatableGroupHeaderTemplateDirective,\n    DataTableSummaryRowComponent\n  ],\n  exports: [\n    DatatableComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableColumnDirective,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DataTableFooterTemplateDirective,\n    DatatableFooterDirective,\n    DataTablePagerComponent,\n    DatatableGroupHeaderTemplateDirective\n  ],\n  entryComponents: [CustomToolTipComponent]\n})\nexport class NgxDatatableModule {\n  /**\n   * Configure global configuration via INgxDatatableConfig\n   * @param configuration\n   */\n  static forRoot(configuration: INgxDatatableConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxDatatableModule,\n      providers: [{ provide: 'configuration', useValue: configuration }]\n    };\n  }\n}\n\n/**\n * Interface definition for INgxDatatableConfig global configuration\n */\nexport interface INgxDatatableConfig {\n  messages: {\n    emptyMessage: string; // Message to show when array is presented, but contains no values\n    totalMessage: string; // Footer total message\n    selectedMessage: string; // Footer selected message\n  };\n}\n","/**\r\n * Throttle a function\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context: any;\r\n  let args: any;\r\n  let result: any;\r\n  let timeout: any = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function(this: any) {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target: any, key: PropertyKey, descriptor: PropertyDescriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","if (typeof document !== 'undefined' && !document.elementsFromPoint) {\r\n  document.elementsFromPoint = elementsFromPoint;\r\n}\r\n\r\n/*tslint:disable*/\r\n/**\r\n * Polyfill for `elementsFromPoint`\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\r\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\r\n * https://gist.github.com/oslego/7265412\r\n */\r\nexport function elementsFromPoint(x: number, y: number) {\r\n  const elements = [];\r\n  const previousPointerEvents = [];\r\n  let current: any; // TODO: window.getComputedStyle should be used with inferred type (Element)\r\n  let i;\r\n  let d;\r\n\r\n  //if (document === undefined) return elements;\r\n\r\n  // get all elements via elementFromPoint, and remove them from hit-testing in order\r\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\r\n    // push the element and its current style\r\n    elements.push(current);\r\n    previousPointerEvents.push({\r\n      value: current.style.getPropertyValue('pointer-events'),\r\n      priority: current.style.getPropertyPriority('pointer-events')\r\n    });\r\n\r\n    // add \"pointer-events: none\", to get to the underlying element\r\n    current.style.setProperty('pointer-events', 'none', 'important');\r\n  }\r\n\r\n  // restore the previous pointer-events values\r\n  for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]); ) {\r\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\r\n  }\r\n\r\n  // return our results\r\n  return elements;\r\n}\r\n/*tslint:enable*/\r\n","export enum ClickType {\r\n  single = 'single',\r\n  double = 'double'\r\n}\r\n"]}