{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-datatable/lib/services/scrollbar-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/dimensions-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/column-changes.service.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer-template.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/visibility.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/draggable.directive.ts","ng://@swimlane/ngx-datatable/lib/events.ts","ng://@swimlane/ngx-datatable/lib/directives/resizeable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/orderable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/long-press.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/scroller.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header.directive.ts","ng://@swimlane/ngx-datatable/lib/utils/column-prop-getters.ts","ng://@swimlane/ngx-datatable/lib/utils/tree.ts","ng://@swimlane/ngx-datatable/lib/utils/camel-case.ts","ng://@swimlane/ngx-datatable/lib/utils/id.ts","ng://@swimlane/ngx-datatable/lib/utils/column-helper.ts","ng://@swimlane/ngx-datatable/lib/types/column-mode.type.ts","ng://@swimlane/ngx-datatable/lib/types/selection.type.ts","ng://@swimlane/ngx-datatable/lib/types/sort.type.ts","ng://@swimlane/ngx-datatable/lib/types/contextmenu.type.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-header.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-cell.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/tree.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column.directive.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail.directive.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.directive.ts","ng://@swimlane/ngx-datatable/lib/utils/column.ts","ng://@swimlane/ngx-datatable/lib/utils/row-height-cache.ts","ng://@swimlane/ngx-datatable/lib/utils/prefixes.ts","ng://@swimlane/ngx-datatable/lib/utils/translate.ts","ng://@swimlane/ngx-datatable/lib/components/body/body.component.ts","ng://@swimlane/ngx-datatable/lib/components/header/header.component.ts","ng://@swimlane/ngx-datatable/lib/utils/throttle.ts","ng://@swimlane/ngx-datatable/lib/utils/math.ts","ng://@swimlane/ngx-datatable/lib/types/sort-direction.type.ts","ng://@swimlane/ngx-datatable/lib/utils/sort.ts","ng://@swimlane/ngx-datatable/lib/components/datatable.component.ts","ng://@swimlane/ngx-datatable/lib/components/header/header-cell.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/pager.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/progress-bar.component.ts","ng://@swimlane/ngx-datatable/lib/utils/keys.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row-wrapper.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-cell.component.ts","ng://@swimlane/ngx-datatable/lib/utils/selection.ts","ng://@swimlane/ngx-datatable/lib/components/body/selection.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/summary/summary-row.component.ts","ng://@swimlane/ngx-datatable/lib/components/ice-custom-tooltip/ice-custom-tooltip.component.ts","ng://@swimlane/ngx-datatable/lib/directives/ice-custom-html-tooltip.directive.ts","ng://@swimlane/ngx-datatable/lib/components/ice-datatable-select/ice-datatable-select.component.ts","ng://@swimlane/ngx-datatable/lib/components/ice-editable-text/ice-editable-text.component.ts","ng://@swimlane/ngx-datatable/lib/ngx-datatable.module.ts","ng://@swimlane/ngx-datatable/lib/utils/elm-from-point.ts","ng://@swimlane/ngx-datatable/lib/types/click.type.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__metadata","metadataKey","metadataValue","Reflect","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ScrollbarHelper","document","width","getWidth","outer","createElement","style","visibility","msOverflowStyle","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","Injectable","Inject","args","DOCUMENT","DimensionsHelper","getDimensions","element","getBoundingClientRect","ColumnChangesService","columnInputChanges","Subject","defineProperty","asObservable","onInputChange","DataTableFooterTemplateDirective","template","Directive","selector","TemplateRef","VisibilityDirective","zone","isVisible","visible","EventEmitter","ngOnInit","runCheck","ngOnDestroy","clearTimeout","timeout","onVisibilityChange","_this","run","emit","check","_a","nativeElement","offsetHeight","runOutsideAngular","setTimeout","ElementRef","NgZone","HostBinding","Output","DraggableDirective","dragX","dragY","dragStart","dragging","dragEnd","isDragging","ngOnChanges","changes","currentValue","dragModel","onMousedown","_destroySubscription","onMouseup","event","classList","remove","subscription","model","contains","preventDefault","mouseDownPos_1","x","clientX","y","clientY","mouseup","fromEvent","subscribe","ev","mouseMoveSub","pipe","takeUntil","move","add","mouseDownPos","left","top","unsubscribe","undefined","Input","window","ResizeableDirective","renderer","resizeEnabled","resize","resizing","ngAfterViewInit","renderer2","node","addClass","closed","clientWidth","isHandle","initialWidth","mouseDownScreenX","screenX","stopPropagation","newWidth","overMinWidth","minWidth","underMaxWidth","maxWidth","host","[class.resizeable]","Renderer2","HostListener","OrderableDirective","differs","reorder","targetChanged","differ","find","create","ngAfterContentInit","updateSubscriptions","draggables","bind","forEach","d","diffs","diff","createMapDiffs","unsubscribe_1","previousValue","forEachAddedItem","onDragStart","onDragging","onDragEnd","forEachRemovedItem","positions","_b","tslib_1.__values","toArray","_c","dragger","elm","parseInt","offsetLeft","toString","prop","right","index","prevPos","target","isTarget","lastDraggingIndex","prevIndex","newIndex","initialIndex","targets","elementsFromPoint","pos","this_1","el","reduce","acc","curr","$$id","KeyValueDiffers","ContentChildren","descendants","LongPressDirective","pressEnabled","duration","longPressStart","longPressing","longPressEnd","mouseX","mouseY","pressing","isLongPressing","onMouseDown","which","pressModel","mouseEvent","onMouseMove","loop","xThres","Math","abs","yThres","endPress","ScrollerComponent","ngZone","scrollbarV","scrollbarH","scroll","scrollYPos","scrollXPos","prevScrollYPos","prevScrollXPos","_scrollEventListener","parentElement","onScrolled","addEventListener","removeEventListener","setOffset","offsetY","scrollTop","dom","requestAnimationFrame","scrollLeft","updateOffset","direction","Component","class","changeDetection","ChangeDetectionStrategy","OnPush","type","DatatableGroupHeaderTemplateDirective","DatatableGroupHeaderDirective","rowHeight","toggle","_templateInput","_templateQuery","toggleExpandGroup","group","expandAllGroups","collapseAllGroups","ContentChild","read","static","emptyStringGetter","getterForProp","numericIndexGetter","indexOf","deepValueGetter","shallowValueGetter","row","obj","fieldName","path","current","split","optionalGetterForProp","groupRowsByParents","rows","from","to","nodeById","l","TreeNode","uniqIDs","arr","item","toValue","parent_1","fromValue","parent","children","resolvedRows_1","flatten","level","treeStatus","f","recursive","child","Array","slice","camelCase","str","replace","trim","toLowerCase","a","b","c","toUpperCase","deCamelCase","match","id","random","pow","setColumnDefaults","columns","treeColumnFound","columns_1","columns_1_1","column","isNullOrUndefined","name","$$valueGetter","String","resizeable","sortable","draggable","canAutoResize","isTreeColumn","translateTemplates","templates","result","templates_1","templates_1_1","temp","col","props","getOwnPropertyNames","props_1","e_3","props_1_1","headerTemplate","cellTemplate","summaryFunc","summaryTemplate","standard","flex","force","single","multi","multiClick","cell","checkbox","header","DataTableColumnHeaderDirective","DataTableColumnCellDirective","DataTableColumnCellTreeToggle","DataTableColumnDirective","columnChangesService","isFirstChange","_cellTemplateInput","_cellTemplateQuery","_headerTemplateInput","_headerTemplateQuery","_treeToggleTemplateInput","_treeToggleTemplateQuery","DatatableRowDetailTemplateDirective","DatatableRowDetailDirective","toggleExpandRow","expandAllRows","collapseAllRows","DatatableFooterDirective","columnsByPin","cols","ret","center","cols_1","cols_1_1","frozenLeft","frozenRight","columnGroupWidths","groups","all","columnTotalWidth","total","floor","totalWidth","parseFloat","columnsTotalWidth","columns_2","columns_2_1","columnsByPinArr","val","colsByPinArr","colsByPin","RowHeightCache","treeArray","clearCache","initCache","details","detailRowHeight","externalVirtual","rowCount","rowIndexes","rowExpansions","isFn","isDetailFn","isNaN","Error","currentRowHeight","expanded","has","get","update","getRowIndex","scrollY","calcRowIndex","atRowIndex","byRowHeight","query","atIndex","sum","queryBetween","atIndexA","atIndexB","dataLength","blockSize","nextPos","styles","pre","cache","testStyle","prefix","getComputedStyle","documentElement","join","RegExp","lowercase","css","js","substr","getVendorPrefixedName","property","transform","backfaceVisibility","hasCSSTransforms","hasCSS3DTransforms","ua","navigator","userAgent","isSafari","test","translateXY","DataTableBodyComponent","cd","selected","page","activate","select","detailToggle","rowContextmenu","treeAction","rowHeightsCache","indexes","Map","getDetailRowHeight","rowDetail","rowTrackingFn","idx","trackByProp","_pageSize","recalcLayout","_rows","_columns","_offset","_rowCount","innerWidth","_bodyHeight","selectionType","virtualization","listener","toggleRowExpansion","toggleAllRows","updateIndexes","updateRows","markForCheck","groupHeader","updateOffsetY","offset","scroller","rowIndex","pageSize","onBodyScroll","offsetX","updatePage","first","ceil","last","clear","groupedRows","set","getRowHeight","getGroupHeight","getRowAndDetailHeight","getRowExpanded","getRowsStyles","getBottomSummaryRowStyles","position","hideIndicator","loadingIndicator","height","bodyHeight","externalPaging","max","min","refreshRowHeightCache","Set","getAdjustedViewPortIndex","viewPortFirstRowIndex","rowExpandedIdx","getRowExpandedIdx","splice","currentIndex","columnTrackingFn","stylesByGroup","widths","bodyWidth","groupExpansionDefault","rowId","rowIdentity","findIndex","onTreeAction","ChangeDetectorRef","ViewChild","DataTableHeaderComponent","sort","columnContextmenu","_columnGroupWidths","_styleByGroup","_innerWidth","colByPin","setStylesByGroup","_headerHeight","_columnsByPin","_offsetX","onLongPressStart","dragEventTarget","onLongPressEnd","trackByGroups","colGroup","onColumnResized","prevValue","newValue","onColumnReordered","getColumn","targetMarkerContext","onTargetChanged","oldColumn","newColumn","leftColumnCount","centerColumnCount","onSort","sorts","calcNewSorts","map","dir","sortType","SortType","calcStylesByGroup","destroyed","detectChanges","throttle","func","wait","options","context","previous","later","leading","Date","now","remaining","trailing","throttleable","key","descriptor","configurable","enumerable","getTotalFlexGrow","totalFlexGrow","flexGrow","adjustColumnWidths","allColumns","expectedWidth","columnsWidth","colsByGroup","attr","e_2","_d","hasMinWidth","remainingWidth","widthPerFlexPoint","_e","_f","scaleColumns","forceFillColumnWidths","startIdx","allowBleed","defaultColWidth","columnsToResize","filter","columnsToResize_1","columnsToResize_1_1","$$oldWidth","additionWidthPerColumn","exceedsWindow","contentWidth","getContentWidth","columnsProcessed","columnsToResize_2","e_5","columnsToResize_2_1","newSize","removeProcessedColumns","columnsProcessed_1","columnsProcessed_1_1","allColumns_1","allColumns_1_1","asc","desc","nextSortDir","SortDirection","orderByComparator","isFinite","sortRows","dirs","rowToIndexMap","comparator","cachedDirs","valueGetter","compareFn","rowA","rowB","cachedDirs_1","cachedDirs_1_1","cachedDir","propA","propB","comparison","DatatableComponent","scrollbarHelper","dimensionsHelper","configuration","columnMode","ColumnMode","headerHeight","footerHeight","externalSorting","reorderable","swapColumns","cssClasses","sortAscending","sortDescending","pagerLeftArrow","pagerRightArrow","pagerPrevious","pagerNext","messages","emptyMessage","totalMessage","selectedMessage","selectAllRowsOnPage","summaryRow","summaryHeight","summaryPosition","tableContextmenu","BehaviorSubject","_count","_subscriptions","_groupRowsBy","rowDiffer","_internalRows","sortInternalRows","treeFromRelation","treeToRelation","recalculate","groupArrayBy","_internalColumns","recalculateColumns","_limit","SelectionType","_columnTemplates","translateColumns","allRowsSelected","bodyComponent","rowsOnPage","count","limit","columnTemplates","v","listenForColumnInputChanges","originalArray","groupBy","ngDoCheck","recalculatePages","recalculateDims","onWindowResize","forceIdx","dims","calcPageSize","calcRowCount","onBodyPage","onFooterPage","size","onColumnContextmenu","ContextmenuType","content","onRowContextmenu","onColumnResize","onColumnReorder","prevCol","movedCol","onColumnSort","onHeaderSelect","allSelected","onBodySelect","columnInputChanges$","notifyOnChanges","encapsulation","ViewEncapsulation","None","decorators","SkipSelf","Optional","getOwnPropertyDescriptor","decorate","tslib_1.__decorate","DataTableHeaderCellComponent","sortFn","selectFn","cellContext","sortDir","_allRowsSelected","_column","_sorts","calcSortDir","sortClass","calcSortClass","cls","headerClass","res","keys","keys_1","keys_1_1","k","checkboxable","headerCheckboxable","onContextmenu","$event","sortAscendingIcon","sortDescendingIcon","DataTableFooterComponent","selectedCount","DataTablePagerComponent","change","_page","_size","pages","calcPages","canPrevious","canNext","totalPages","prevPage","selectPage","nextPage","startPage","endPage","isMaxSized","maxSize","num","number","text","ProgressBarComponent","up","down","return","escape","DataTableBodyRowComponent","_groupStyles","_element","_rowDiffer","buildStylesByGroup","isSelected","rowClass","onActivate","cellIndex","rowElement","onKeyDown","keyCode","isTargetRow","Keys","onMouseenter","DataTableRowWrapperComponent","groupContext","rowContext","_expanded","_rowIndex","getGroupHeaderStyle","DataTableBodyCellComponent","sanitizer","_isEditable","isFocused","onCheckboxChangeFn","onCheckboxChange","activateFn","_group","checkValueUpdates","_rowHeight","_isSelected","_row","_treeStatus","status","cellClass","userPipe","sanitizedValue","stripHtml","onFocus","onBlur","onClick","cellElement","onDblClick","isTargetCell","html","calcLeftMargin","levelIndent","treeLevelIndent","hasToShowToolTip","field","tooltip","getTooltipValue","getIcons","icons","iconsArray","selectFieldValue","propArray","onClickRowActionButton","action","sanatizeHtml","bypassSecurityTrustHtml","isEditable","editable","of","updateSelect","onEdit","editField","DomSanitizer","ViewContainerRef","selectRows","comparefn","selectedIndex","selectRowsBetween","reverse","range","start","end","DataTableSelectionComponent","selectRow","selectEnabled","chkbox","shiftKey","getRowSelectedIdx","ctrlKey","metaKey","selectCheck","onKeyboardFocus","isCellSelection","focusCell","focusRow","nextRowElement","getPrevNextRow","focus","focusElement","previousElementSibling","nextElementSibling","nextCellElement","getElementsByClassName","getRowSelected","defaultSumFunc","cells","cellsWithValues","some","noopSumFunc","DataTableSummaryRowComponent","updateInternalColumns","updateValues","cellsFromSingleColumn","sumFunc","getSummaryFunction","CustomToolTipComponent","ToolTipRendererDirective","_overlay","_overlayPositionBuilder","_elementRef","showToolTip","showToolTipOnTextOverflow","show","scrollWidth","_overlayRef","positionStrategy","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","hasAttached","tooltipRef","attach","ComponentPortal","componentInstance","instance","iceTooltipHtmlText","hide","closeToolTip","detach","Overlay","OverlayPositionBuilder","DatatableSelectComponent","editing","active","align","focusOnEnter","editOnFocus","selectDisabled","emitUpdate","ViewChildren","EditableTextComponent","editOnSpace","editOnClick","disabled","errorText","toggleEditing","toggleActive","newText","emitToggleEditing","emitFocus","emitToggleActive","inputEl","childNodes","data","NgxDatatableModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","MatTooltipModule","OverlayModule","MatIconModule","MatButtonModule","declarations","exports","entryComponents","elements","previousPointerEvents","elementFromPoint","getPropertyValue","priority","getPropertyPriority","setProperty","double"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class ScrollbarHelper {\r\n  width: number = this.getWidth();\r\n\r\n  constructor(@Inject(DOCUMENT) private document: any) {}\r\n\r\n  getWidth(): number {\r\n    const outer = this.document.createElement('div');\r\n    outer.style.visibility = 'hidden';\r\n    outer.style.width = '100px';\r\n    outer.style.msOverflowStyle = 'scrollbar';\r\n    this.document.body.appendChild(outer);\r\n\r\n    const widthNoScroll = outer.offsetWidth;\r\n    outer.style.overflow = 'scroll';\r\n\r\n    const inner = this.document.createElement('div');\r\n    inner.style.width = '100%';\r\n    outer.appendChild(inner);\r\n\r\n    const widthWithScroll = inner.offsetWidth;\r\n    outer.parentNode.removeChild(outer);\r\n\r\n    return widthNoScroll - widthWithScroll;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class DimensionsHelper {\r\n  getDimensions(element: Element): ClientRect {\r\n    return element.getBoundingClientRect();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n/**\r\n * service to make DatatableComponent aware of changes to\r\n * input bindings of DataTableColumnDirective\r\n */\r\n@Injectable()\r\nexport class ColumnChangesService {\r\n  private columnInputChanges = new Subject<undefined>();\r\n\r\n  get columnInputChanges$(): Observable<undefined> {\r\n    return this.columnInputChanges.asObservable();\r\n  }\r\n\r\n  onInputChange(): void {\r\n    this.columnInputChanges.next();\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-footer-template]' })\r\nexport class DataTableFooterTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, Output, EventEmitter, ElementRef, HostBinding, NgZone, OnInit, OnDestroy } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer Directive\r\n *\r\n * Usage:\r\n *\r\n * \t\t<div\r\n * \t\t\tvisibilityObserver\r\n * \t\t\t(visible)=\"onVisible($event)\">\r\n * \t\t</div>\r\n *\r\n */\r\n@Directive({ selector: '[visibilityObserver]' })\r\nexport class VisibilityDirective implements OnInit, OnDestroy {\r\n  @HostBinding('class.visible')\r\n  isVisible: boolean = false;\r\n\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {}\r\n\r\n  ngOnInit(): void {\r\n    this.runCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 50);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.timeout = setTimeout(() => check());\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n/**\r\n * Draggable Directive for Angular2\r\n *\r\n * Inspiration:\r\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\r\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\r\n *\r\n */\r\n@Directive({ selector: '[draggable]' })\r\nexport class DraggableDirective implements OnDestroy, OnChanges {\r\n  @Input() dragEventTarget: any;\r\n  @Input() dragModel: any;\r\n  @Input() dragX: boolean = true;\r\n  @Input() dragY: boolean = true;\r\n\r\n  @Output() dragStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragging: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  isDragging: boolean = false;\r\n  subscription: Subscription;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\r\n      this.onMousedown(changes['dragEventTarget'].currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  onMouseup(event: MouseEvent): void {\r\n    if (!this.isDragging) return;\r\n\r\n    this.isDragging = false;\r\n    this.element.classList.remove('dragging');\r\n\r\n    if (this.subscription) {\r\n      this._destroySubscription();\r\n      this.dragEnd.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  onMousedown(event: MouseEvent): void {\r\n    // we only want to drag the inner header text\r\n    const isDragElm = (<HTMLElement>event.target).classList.contains('draggable');\r\n\r\n    if (isDragElm && (this.dragX || this.dragY)) {\r\n      event.preventDefault();\r\n      this.isDragging = true;\r\n\r\n      const mouseDownPos = { x: event.clientX, y: event.clientY };\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup(ev));\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((ev: MouseEvent) => this.move(ev, mouseDownPos));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n\r\n      this.dragStart.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, mouseDownPos: { x: number; y: number }): void {\r\n    if (!this.isDragging) return;\r\n\r\n    const x = event.clientX - mouseDownPos.x;\r\n    const y = event.clientY - mouseDownPos.y;\r\n\r\n    if (this.dragX) this.element.style.left = `${x}px`;\r\n    if (this.dragY) this.element.style.top = `${y}px`;\r\n\r\n    this.element.classList.add('dragging');\r\n\r\n    this.dragging.emit({\r\n      event,\r\n      element: this.element,\r\n      model: this.dragModel\r\n    });\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","declare let global: any;\r\n\r\n/* tslint:disable */\r\nexport const MouseEvent = (((typeof window !== 'undefined' && window) as any) || (global as any))\r\n  .MouseEvent as MouseEvent;\r\nexport const KeyboardEvent = (((typeof window !== 'undefined' && window) as any) || (global as any))\r\n  .KeyboardEvent as KeyboardEvent;\r\nexport const Event = (((typeof window !== 'undefined' && window) as any) || (global as any)).Event as Event;\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { MouseEvent } from '../events';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[resizeable]',\r\n  host: {\r\n    '[class.resizeable]': 'resizeEnabled'\r\n  }\r\n})\r\nexport class ResizeableDirective implements OnDestroy, AfterViewInit {\r\n  @Input() resizeEnabled: boolean = true;\r\n  @Input() minWidth: number;\r\n  @Input() maxWidth: number;\r\n\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  subscription: Subscription;\r\n  resizing: boolean = false;\r\n\r\n  constructor(element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const renderer2 = this.renderer;\r\n    const node = renderer2.createElement('span');\r\n    if (this.resizeEnabled) {\r\n      renderer2.addClass(node, 'resize-handle');\r\n    } else {\r\n      renderer2.addClass(node, 'resize-handle--not-resizable');\r\n    }\r\n    renderer2.appendChild(this.element, node);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.resizing = false;\r\n\r\n    if (this.subscription && !this.subscription.closed) {\r\n      this._destroySubscription();\r\n      this.resize.emit(this.element.clientWidth);\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    const isHandle = (<HTMLElement>event.target).classList.contains('resize-handle');\r\n    const initialWidth = this.element.clientWidth;\r\n    const mouseDownScreenX = event.screenX;\r\n\r\n    if (isHandle) {\r\n      event.stopPropagation();\r\n      this.resizing = true;\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((e: MouseEvent) => this.move(e, initialWidth, mouseDownScreenX));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, initialWidth: number, mouseDownScreenX: number): void {\r\n    const movementX = event.screenX - mouseDownScreenX;\r\n    const newWidth = initialWidth + movementX;\r\n\r\n    const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\r\n    const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\r\n\r\n    if (overMinWidth && underMaxWidth) {\r\n      this.element.style.width = `${newWidth}px`;\r\n    }\r\n  }\r\n\r\n  private _destroySubscription() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Output,\r\n  EventEmitter,\r\n  ContentChildren,\r\n  QueryList,\r\n  KeyValueDiffers,\r\n  AfterContentInit,\r\n  OnDestroy,\r\n  Inject\r\n} from '@angular/core';\r\nimport { DraggableDirective } from './draggable.directive';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Directive({ selector: '[orderable]' })\r\nexport class OrderableDirective implements AfterContentInit, OnDestroy {\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() targetChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChildren(DraggableDirective, { descendants: true })\r\n  draggables: QueryList<DraggableDirective>;\r\n\r\n  positions: any;\r\n  differ: any;\r\n  lastDraggingIndex: number;\r\n\r\n  constructor(differs: KeyValueDiffers, @Inject(DOCUMENT) private document: any) {\r\n    this.differ = differs.find({}).create();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    // HACK: Investigate Better Way\r\n    this.updateSubscriptions();\r\n    this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.draggables.forEach(d => {\r\n      d.dragStart.unsubscribe();\r\n      d.dragging.unsubscribe();\r\n      d.dragEnd.unsubscribe();\r\n    });\r\n  }\r\n\r\n  updateSubscriptions(): void {\r\n    const diffs = this.differ.diff(this.createMapDiffs());\r\n\r\n    if (diffs) {\r\n      const subscribe = ({ currentValue, previousValue }: any) => {\r\n        unsubscribe({ previousValue });\r\n\r\n        if (currentValue) {\r\n          currentValue.dragStart.subscribe(this.onDragStart.bind(this));\r\n          currentValue.dragging.subscribe(this.onDragging.bind(this));\r\n          currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\r\n        }\r\n      };\r\n\r\n      const unsubscribe = ({ previousValue }: any) => {\r\n        if (previousValue) {\r\n          previousValue.dragStart.unsubscribe();\r\n          previousValue.dragging.unsubscribe();\r\n          previousValue.dragEnd.unsubscribe();\r\n        }\r\n      };\r\n\r\n      diffs.forEachAddedItem(subscribe);\r\n      // diffs.forEachChangedItem(subscribe.bind(this));\r\n      diffs.forEachRemovedItem(unsubscribe);\r\n    }\r\n  }\r\n\r\n  onDragStart(): void {\r\n    this.positions = {};\r\n\r\n    let i = 0;\r\n    for (const dragger of this.draggables.toArray()) {\r\n      const elm = dragger.element;\r\n      const left = parseInt(elm.offsetLeft.toString(), 0);\r\n      this.positions[dragger.dragModel.prop] = {\r\n        left,\r\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\r\n        index: i++,\r\n        element: elm\r\n      };\r\n    }\r\n  }\r\n\r\n  onDragging({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n    const target = this.isTarget(model, event);\r\n\r\n    if (target) {\r\n      if (this.lastDraggingIndex !== target.i) {\r\n        this.targetChanged.emit({\r\n          prevIndex: this.lastDraggingIndex,\r\n          newIndex: target.i,\r\n          initialIndex: prevPos.index\r\n        });\r\n        this.lastDraggingIndex = target.i;\r\n      }\r\n    } else if (this.lastDraggingIndex !== prevPos.index) {\r\n      this.targetChanged.emit({\r\n        prevIndex: this.lastDraggingIndex,\r\n        initialIndex: prevPos.index\r\n      });\r\n      this.lastDraggingIndex = prevPos.index;\r\n    }\r\n  }\r\n\r\n  onDragEnd({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n\r\n    const target = this.isTarget(model, event);\r\n    if (target) {\r\n      this.reorder.emit({\r\n        prevIndex: prevPos.index,\r\n        newIndex: target.i,\r\n        model\r\n      });\r\n    }\r\n\r\n    this.lastDraggingIndex = undefined;\r\n    element.style.left = 'auto';\r\n  }\r\n\r\n  isTarget(model: any, event: any): any {\r\n    let i = 0;\r\n    const x = event.x || event.clientX;\r\n    const y = event.y || event.clientY;\r\n    const targets = this.document.elementsFromPoint(x, y);\r\n\r\n    for (const prop in this.positions) {\r\n      // current column position which throws event.\r\n      const pos = this.positions[prop];\r\n\r\n      // since we drag the inner span, we need to find it in the elements at the cursor\r\n      if (model.prop !== prop && targets.find((el: any) => el === pos.element)) {\r\n        return {\r\n          pos,\r\n          i\r\n        };\r\n      }\r\n\r\n      i++;\r\n    }\r\n  }\r\n\r\n  private createMapDiffs(): { [key: string]: DraggableDirective } {\r\n    return this.draggables.toArray().reduce((acc, curr) => {\r\n      acc[curr.dragModel.$$id] = curr;\r\n      return acc;\r\n    }, {});\r\n  }\r\n}\r\n","import { Directive, Input, Output, EventEmitter, HostBinding, HostListener, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n@Directive({ selector: '[long-press]' })\r\nexport class LongPressDirective implements OnDestroy {\r\n  @Input() pressEnabled: boolean = true;\r\n  @Input() pressModel: any;\r\n  @Input() duration: number = 500;\r\n\r\n  @Output() longPressStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressing: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  pressing: boolean;\r\n  isLongPressing: boolean;\r\n  timeout: any;\r\n  mouseX: number = 0;\r\n  mouseY: number = 0;\r\n\r\n  subscription: Subscription;\r\n\r\n  @HostBinding('class.press')\r\n  get press(): boolean {\r\n    return this.pressing;\r\n  }\r\n\r\n  @HostBinding('class.longpress')\r\n  get isLongPress(): boolean {\r\n    return this.isLongPressing;\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMouseDown(event: MouseEvent): void {\r\n    // don't do right/middle clicks\r\n    if (event.which !== 1 || !this.pressEnabled) return;\r\n\r\n    // don't start drag if its on resize handle\r\n    const target = <HTMLElement>event.target;\r\n    if (target.classList.contains('resize-handle')) return;\r\n\r\n    this.mouseX = event.clientX;\r\n    this.mouseY = event.clientY;\r\n\r\n    this.pressing = true;\r\n    this.isLongPressing = false;\r\n\r\n    const mouseup = fromEvent(document, 'mouseup');\r\n    this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n    this.timeout = setTimeout(() => {\r\n      this.isLongPressing = true;\r\n      this.longPressStart.emit({\r\n        event,\r\n        model: this.pressModel\r\n      });\r\n\r\n      this.subscription.add(\r\n        fromEvent(document, 'mousemove')\r\n          .pipe(takeUntil(mouseup))\r\n          .subscribe((mouseEvent: MouseEvent) => this.onMouseMove(mouseEvent))\r\n      );\r\n\r\n      this.loop(event);\r\n    }, this.duration);\r\n\r\n    this.loop(event);\r\n  }\r\n\r\n  onMouseMove(event: MouseEvent): void {\r\n    if (this.pressing && !this.isLongPressing) {\r\n      const xThres = Math.abs(event.clientX - this.mouseX) > 10;\r\n      const yThres = Math.abs(event.clientY - this.mouseY) > 10;\r\n\r\n      if (xThres || yThres) {\r\n        this.endPress();\r\n      }\r\n    }\r\n  }\r\n\r\n  loop(event: MouseEvent): void {\r\n    if (this.isLongPressing) {\r\n      this.timeout = setTimeout(() => {\r\n        this.longPressing.emit({\r\n          event,\r\n          model: this.pressModel\r\n        });\r\n        this.loop(event);\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  endPress(): void {\r\n    clearTimeout(this.timeout);\r\n    this.isLongPressing = false;\r\n    this.pressing = false;\r\n    this._destroySubscription();\r\n\r\n    this.longPressEnd.emit({\r\n      model: this.pressModel\r\n    });\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.endPress();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  Renderer2,\r\n  NgZone,\r\n  OnInit,\r\n  OnDestroy,\r\n  HostBinding,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { MouseEvent } from '../../events';\r\n\r\n@Component({\r\n  selector: 'datatable-scroller',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    class: 'datatable-scroll'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScrollerComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean = false;\r\n  @Input() scrollbarH: boolean = false;\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  scrollHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  @Input()\r\n  scrollWidth: number;\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n\r\n  scrollYPos: number = 0;\r\n  scrollXPos: number = 0;\r\n  prevScrollYPos: number = 0;\r\n  prevScrollXPos: number = 0;\r\n  element: any;\r\n  parentElement: any;\r\n  onScrollListener: any;\r\n\r\n  private _scrollEventListener: any = null;\r\n\r\n  constructor(private ngZone: NgZone, element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // manual bind so we don't always listen\r\n    if (this.scrollbarV || this.scrollbarH) {\r\n      const renderer = this.renderer;\r\n      this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\r\n      this._scrollEventListener = this.onScrolled.bind(this);\r\n      this.parentElement.addEventListener('scroll', this._scrollEventListener);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._scrollEventListener) {\r\n      this.parentElement.removeEventListener('scroll', this._scrollEventListener);\r\n      this._scrollEventListener = null;\r\n    }\r\n  }\r\n\r\n  setOffset(offsetY: number): void {\r\n    if (this.parentElement) {\r\n      this.parentElement.scrollTop = offsetY;\r\n    }\r\n  }\r\n\r\n  onScrolled(event: MouseEvent): void {\r\n    const dom: Element = <Element>event.currentTarget;\r\n    requestAnimationFrame(() => {\r\n      this.scrollYPos = dom.scrollTop;\r\n      this.scrollXPos = dom.scrollLeft;\r\n      this.updateOffset();\r\n    });\r\n  }\r\n\r\n  updateOffset(): void {\r\n    let direction: string;\r\n    if (this.scrollYPos < this.prevScrollYPos) {\r\n      direction = 'down';\r\n    } else if (this.scrollYPos > this.prevScrollYPos) {\r\n      direction = 'up';\r\n    }\r\n\r\n    this.scroll.emit({\r\n      direction,\r\n      scrollYPos: this.scrollYPos,\r\n      scrollXPos: this.scrollXPos\r\n    });\r\n\r\n    this.prevScrollYPos = this.scrollYPos;\r\n    this.prevScrollXPos = this.scrollXPos;\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-group-header-template]'\r\n})\r\nexport class DatatableGroupHeaderTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableGroupHeaderTemplateDirective } from './body-group-header-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-group-header' })\r\nexport class DatatableGroupHeaderDirective {\r\n  /**\r\n   * Row height is required when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((group?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Track toggling of group visibility\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of a group\r\n   */\r\n  toggleExpandGroup(group: any): void {\r\n    this.toggle.emit({\r\n      type: 'group',\r\n      value: group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand all groups\r\n   */\r\n  expandAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Collapse all groups\r\n   */\r\n  collapseAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import { TableColumnProp } from '../types/table-column.type';\r\n\r\n// maybe rename this file to prop-getters.ts\r\n\r\nexport type ValueGetter = (obj: any, prop: TableColumnProp) => any;\r\n\r\n/**\r\n * Always returns the empty string ''\r\n */\r\nexport function emptyStringGetter(): string {\r\n  return '';\r\n}\r\n\r\n/**\r\n * Returns the appropriate getter function for this kind of prop.\r\n * If prop == null, returns the emptyStringGetter.\r\n */\r\nexport function getterForProp(prop: TableColumnProp): ValueGetter {\r\n  if (prop == null) {\r\n    return emptyStringGetter;\r\n  }\r\n\r\n  if (typeof prop === 'number') {\r\n    return numericIndexGetter;\r\n  } else {\r\n    // deep or simple\r\n    if (prop.indexOf('.') !== -1) {\r\n      return deepValueGetter;\r\n    } else {\r\n      return shallowValueGetter;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the value at this numeric index.\r\n * @param row array of values\r\n * @param index numeric index\r\n * @returns any or '' if invalid index\r\n */\r\nexport function numericIndexGetter(row: any[], index: number): any {\r\n  if (row == null) {\r\n    return '';\r\n  }\r\n  // mimic behavior of deepValueGetter\r\n  if (!row || index == null) {\r\n    return row;\r\n  }\r\n\r\n  const value = row[index];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns the value of a field.\r\n * (more efficient than deepValueGetter)\r\n * @param obj object containing the field\r\n * @param fieldName field name string\r\n */\r\nexport function shallowValueGetter(obj: any, fieldName: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !fieldName) {\r\n    return obj;\r\n  }\r\n\r\n  const value = obj[fieldName];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns a deep object given a string. zoo['animal.type']\r\n */\r\nexport function deepValueGetter(obj: any, path: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !path) {\r\n    return obj;\r\n  }\r\n\r\n  // check if path matches a root-level field\r\n  // { \"a.b.c\": 123 }\r\n  let current = obj[path];\r\n  if (current !== undefined) {\r\n    return current;\r\n  }\r\n\r\n  current = obj;\r\n  const split = path.split('.');\r\n\r\n  if (split.length) {\r\n    for (let i = 0; i < split.length; i++) {\r\n      current = current[split[i]];\r\n\r\n      // if found undefined, return empty string\r\n      if (current === undefined || current === null) {\r\n        return '';\r\n      }\r\n    }\r\n  }\r\n\r\n  return current;\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { TableColumnProp } from '../types/table-column.type';\r\n\r\nexport type OptionalValueGetter = (row: any) => any | undefined;\r\nexport function optionalGetterForProp(prop: TableColumnProp): OptionalValueGetter {\r\n  return prop && (row => getterForProp(prop)(row, prop));\r\n}\r\n\r\n/**\r\n * This functions rearrange items by their parents\r\n * Also sets the level value to each of the items\r\n *\r\n * Note: Expecting each item has a property called parentId\r\n * Note: This algorithm will fail if a list has two or more items with same ID\r\n * NOTE: This algorithm will fail if there is a deadlock of relationship\r\n *\r\n * For example,\r\n *\r\n * Input\r\n *\r\n * id -> parent\r\n * 1  -> 0\r\n * 2  -> 0\r\n * 3  -> 1\r\n * 4  -> 1\r\n * 5  -> 2\r\n * 7  -> 8\r\n * 6  -> 3\r\n *\r\n *\r\n * Output\r\n * id -> level\r\n * 1      -> 0\r\n * --3    -> 1\r\n * ----6  -> 2\r\n * --4    -> 1\r\n * 2      -> 0\r\n * --5    -> 1\r\n * 7     -> 8\r\n *\r\n *\r\n * @param rows\r\n *\r\n */\r\nexport function groupRowsByParents(rows: any[], from?: OptionalValueGetter, to?: OptionalValueGetter): any[] {\r\n  if (from && to) {\r\n    const nodeById = {};\r\n    const l = rows.length;\r\n    let node: TreeNode | null = null;\r\n\r\n    nodeById[0] = new TreeNode(); // that's the root node\r\n\r\n    const uniqIDs = rows.reduce((arr, item) => {\r\n      const toValue = to(item);\r\n      if (arr.indexOf(toValue) === -1) {\r\n        arr.push(toValue);\r\n      }\r\n      return arr;\r\n    }, []);\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // make TreeNode objects for each item\r\n      nodeById[to(rows[i])] = new TreeNode(rows[i]);\r\n    }\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // link all TreeNode objects\r\n      node = nodeById[to(rows[i])];\r\n      let parent = 0;\r\n      const fromValue = from(node.row);\r\n      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\r\n        parent = fromValue;\r\n      }\r\n      node.parent = nodeById[parent];\r\n      node.row['level'] = node.parent.row['level'] + 1;\r\n      node.parent.children.push(node);\r\n    }\r\n\r\n    let resolvedRows: any[] = [];\r\n    nodeById[0].flatten(function() {\r\n      resolvedRows = [...resolvedRows, this.row];\r\n    }, true);\r\n\r\n    return resolvedRows;\r\n  } else {\r\n    return rows;\r\n  }\r\n}\r\n\r\nclass TreeNode {\r\n  public row: any;\r\n  public parent: any;\r\n  public children: any[];\r\n\r\n  constructor(row: any | null = null) {\r\n    if (!row) {\r\n      row = {\r\n        level: -1,\r\n        treeStatus: 'expanded'\r\n      };\r\n    }\r\n    this.row = row;\r\n    this.parent = null;\r\n    this.children = [];\r\n  }\r\n\r\n  flatten(f: any, recursive: boolean) {\r\n    if (this.row['treeStatus'] === 'expanded') {\r\n      for (let i = 0, l = this.children.length; i < l; i++) {\r\n        const child = this.children[i];\r\n        f.apply(child, Array.prototype.slice.call(arguments, 2));\r\n        if (recursive) child.flatten.apply(child, arguments);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Converts strings from something to camel case\r\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\r\n */\r\nexport function camelCase(str: string): string {\r\n  // Replace special characters with a space\r\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\r\n  // put a space before an uppercase letter\r\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\r\n\r\n  // Lower case first character and some other stuff\r\n  str = str\r\n    .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\r\n    .trim()\r\n    .toLowerCase();\r\n\r\n  // uppercase characters preceded by a space or number\r\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function(a, b, c) {\r\n    return b.trim() + c.toUpperCase();\r\n  });\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Converts strings from camel case to words\r\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\r\n */\r\nexport function deCamelCase(str: string): string {\r\n  return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\r\n}\r\n","/**\r\n * Creates a unique object id.\r\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n */\r\nexport function id() {\r\n  return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n}\r\n","import { camelCase, deCamelCase } from './camel-case';\r\nimport { id } from './id';\r\nimport { getterForProp } from './column-prop-getters';\r\nimport { TableColumn } from '../types/table-column.type';\r\nimport { DataTableColumnDirective } from '../components/columns/column.directive';\r\n\r\n/**\r\n * Sets the column defaults\r\n */\r\nexport function setColumnDefaults(columns: TableColumn[]) {\r\n  if (!columns) return;\r\n\r\n  // Only one column should hold the tree view\r\n  // Thus if multiple columns are provided with\r\n  // isTreeColumn as true we take only the first one\r\n  let treeColumnFound: boolean = false;\r\n\r\n  for (const column of columns) {\r\n    if (!column.$$id) {\r\n      column.$$id = id();\r\n    }\r\n\r\n    // prop can be numeric; zero is valid not a missing prop\r\n    // translate name => prop\r\n    if (isNullOrUndefined(column.prop) && column.name) {\r\n      column.prop = camelCase(column.name);\r\n    }\r\n\r\n    if (!column.$$valueGetter) {\r\n      column.$$valueGetter = getterForProp(column.prop);\r\n    }\r\n\r\n    // format props if no name passed\r\n    if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = deCamelCase(String(column.prop));\r\n    }\r\n\r\n    if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = ''; // Fixes IE and Edge displaying `null`\r\n    }\r\n\r\n    if (!column.hasOwnProperty('resizeable')) {\r\n      column.resizeable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('sortable')) {\r\n      column.sortable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('draggable')) {\r\n      column.draggable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('canAutoResize')) {\r\n      column.canAutoResize = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('width')) {\r\n      column.width = 150;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('isTreeColumn')) {\r\n      column.isTreeColumn = false;\r\n    } else {\r\n      if (column.isTreeColumn && !treeColumnFound) {\r\n        // If the first column with isTreeColumn is true found\r\n        // we mark that treeCoulmn is found\r\n        treeColumnFound = true;\r\n      } else {\r\n        // After that isTreeColumn property for any other column\r\n        // will be set as false\r\n        column.isTreeColumn = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function isNullOrUndefined<T>(value: T | null | undefined): value is null | undefined {\r\n  return value === null || value === undefined;\r\n}\r\n\r\n/**\r\n * Translates templates definitions to objects\r\n */\r\nexport function translateTemplates(templates: DataTableColumnDirective[]): any[] {\r\n  const result: any[] = [];\r\n  for (const temp of templates) {\r\n    const col: any = {};\r\n\r\n    const props = Object.getOwnPropertyNames(temp);\r\n    for (const prop of props) {\r\n      col[prop] = temp[prop];\r\n    }\r\n\r\n    if (temp.headerTemplate) {\r\n      col.headerTemplate = temp.headerTemplate;\r\n    }\r\n\r\n    if (temp.cellTemplate) {\r\n      col.cellTemplate = temp.cellTemplate;\r\n    }\r\n\r\n    if (temp.summaryFunc) {\r\n      col.summaryFunc = temp.summaryFunc;\r\n    }\r\n\r\n    if (temp.summaryTemplate) {\r\n      col.summaryTemplate = temp.summaryTemplate;\r\n    }\r\n\r\n    result.push(col);\r\n  }\r\n\r\n  return result;\r\n}\r\n","export enum ColumnMode {\r\n  standard = 'standard',\r\n  flex = 'flex',\r\n  force = 'force'\r\n}\r\n","export enum SelectionType {\r\n  single = 'single',\r\n  multi = 'multi',\r\n  multiClick = 'multiClick',\r\n  cell = 'cell',\r\n  checkbox = 'checkbox'\r\n}\r\n","export enum SortType {\r\n  single = 'single',\r\n  multi = 'multi'\r\n}\r\n","export enum ContextmenuType {\r\n  header = 'header',\r\n  body = 'body'\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-header-template]' })\r\nexport class DataTableColumnHeaderDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-cell-template]' })\r\nexport class DataTableColumnCellDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-tree-toggle]' })\r\nexport class DataTableColumnCellTreeToggle {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef, ContentChild, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { DataTableColumnHeaderDirective } from './column-header.directive';\r\nimport { DataTableColumnCellDirective } from './column-cell.directive';\r\nimport { DataTableColumnCellTreeToggle } from './tree.directive';\r\nimport { ColumnChangesService } from '../../services/column-changes.service';\r\nimport { TableColumnProp } from '../../types/table-column.type';\r\n\r\n@Directive({ selector: 'ngx-datatable-column' })\r\nexport class DataTableColumnDirective implements OnChanges {\r\n  @Input() name: string;\r\n  @Input() prop: TableColumnProp;\r\n  @Input() frozenLeft: any;\r\n  @Input() frozenRight: any;\r\n  @Input() flexGrow: number;\r\n  @Input() resizeable: boolean;\r\n  @Input() comparator: any;\r\n  @Input() pipe: any;\r\n  @Input() sortable: boolean;\r\n  @Input() draggable: boolean;\r\n  @Input() canAutoResize: boolean;\r\n  @Input() minWidth: number;\r\n  @Input() width: number;\r\n  @Input() maxWidth: number;\r\n  @Input() checkboxable: boolean;\r\n  @Input() headerCheckboxable: boolean;\r\n  @Input() headerClass: string | ((data: any) => string | any);\r\n  @Input() cellClass: string | ((data: any) => string | any);\r\n  @Input() isTreeColumn: boolean;\r\n  @Input() treeLevelIndent: number;\r\n  @Input() summaryFunc: (cells: any[]) => any;\r\n  @Input() summaryTemplate: TemplateRef<any>;\r\n\r\n  @Input('cellTemplate')\r\n  _cellTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })\r\n  _cellTemplateQuery: TemplateRef<any>;\r\n\r\n  get cellTemplate(): TemplateRef<any> {\r\n    return this._cellTemplateInput || this._cellTemplateQuery;\r\n  }\r\n\r\n  @Input('headerTemplate')\r\n  _headerTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })\r\n  _headerTemplateQuery: TemplateRef<any>;\r\n\r\n  get headerTemplate(): TemplateRef<any> {\r\n    return this._headerTemplateInput || this._headerTemplateQuery;\r\n  }\r\n\r\n  @Input('treeToggleTemplate')\r\n  _treeToggleTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })\r\n  _treeToggleTemplateQuery: TemplateRef<any>;\r\n\r\n  get treeToggleTemplate(): TemplateRef<any> {\r\n    return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\r\n  }\r\n\r\n  private isFirstChange = true;\r\n\r\n  constructor(private columnChangesService: ColumnChangesService) {}\r\n\r\n  ngOnChanges() {\r\n    if (this.isFirstChange) {\r\n      this.isFirstChange = false;\r\n    } else {\r\n      this.columnChangesService.onInputChange();\r\n    }\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-row-detail-template]'\r\n})\r\nexport class DatatableRowDetailTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableRowDetailTemplateDirective } from './row-detail-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-row-detail' })\r\nexport class DatatableRowDetailDirective {\r\n  /**\r\n   * The detail row height is required especially\r\n   * when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((row?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Row detail row visbility was toggled.\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of the row\r\n   */\r\n  toggleExpandRow(row: any): void {\r\n    this.toggle.emit({\r\n      type: 'row',\r\n      value: row\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to expand all the rows.\r\n   */\r\n  expandAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to collapse all the rows.\r\n   */\r\n  collapseAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DataTableFooterTemplateDirective } from './footer-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-footer' })\r\nexport class DatatableFooterDirective {\r\n  @Input() footerHeight: number;\r\n  @Input() totalMessage: string;\r\n  @Input() selectedMessage: string | boolean;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableFooterTemplateDirective, { read: TemplateRef, static: false })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n}\r\n","/**\r\n * Returns the columns by pin.\r\n */\r\nexport function columnsByPin(cols: any[]) {\r\n  const ret: { left: any; center: any; right: any } = {\r\n    left: [],\r\n    center: [],\r\n    right: []\r\n  };\r\n\r\n  if (cols) {\r\n    for (const col of cols) {\r\n      if (col.frozenLeft) {\r\n        ret.left.push(col);\r\n      } else if (col.frozenRight) {\r\n        ret.right.push(col);\r\n      } else {\r\n        ret.center.push(col);\r\n      }\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Returns the widths of all group sets of a column\r\n */\r\nexport function columnGroupWidths(groups: any, all: any) {\r\n  return {\r\n    left: columnTotalWidth(groups.left),\r\n    center: columnTotalWidth(groups.center),\r\n    right: columnTotalWidth(groups.right),\r\n    total: Math.floor(columnTotalWidth(all))\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnTotalWidth(columns: any[], prop?: string) {\r\n  let totalWidth = 0;\r\n\r\n  if (columns) {\r\n    for (const c of columns) {\r\n      const has = prop && c[prop];\r\n      const width = has ? c[prop] : c.width;\r\n      totalWidth = totalWidth + parseFloat(width);\r\n    }\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnsTotalWidth(columns: any, prop?: any) {\r\n  let totalWidth = 0;\r\n\r\n  for (const column of columns) {\r\n    const has = prop && column[prop];\r\n    totalWidth = totalWidth + (has ? column[prop] : column.width);\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\nexport function columnsByPinArr(val: any) {\r\n  const colsByPinArr = [];\r\n  const colsByPin = columnsByPin(val);\r\n\r\n  colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\r\n  colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\r\n  colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\r\n\r\n  return colsByPinArr;\r\n}\r\n","/**\r\n * This object contains the cache of the various row heights that are present inside\r\n * the data table.   Its based on Fenwick tree data structure that helps with\r\n * querying sums that have time complexity of log n.\r\n *\r\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\r\n * https://github.com/mikolalysenko/fenwick-tree\r\n *\r\n */\r\nexport class RowHeightCache {\r\n  /**\r\n   * Tree Array stores the cumulative information of the row heights to perform efficient\r\n   * range queries and updates.  Currently the tree is initialized to the base row\r\n   * height instead of the detail row height.\r\n   */\r\n  private treeArray: number[] = [];\r\n\r\n  /**\r\n   * Clear the Tree array.\r\n   */\r\n  clearCache(): void {\r\n    this.treeArray = [];\r\n  }\r\n\r\n  /**\r\n   * Initialize the Fenwick tree with row Heights.\r\n   *\r\n   * @param rows The array of rows which contain the expanded status.\r\n   * @param rowHeight The row height.\r\n   * @param detailRowHeight The detail row height.\r\n   */\r\n  initCache(details: any): void {\r\n    const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\r\n    const isFn = typeof rowHeight === 'function';\r\n    const isDetailFn = typeof detailRowHeight === 'function';\r\n\r\n    if (!isFn && isNaN(rowHeight)) {\r\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\r\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\r\n    }\r\n\r\n    // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\r\n    if (!isDetailFn && isNaN(detailRowHeight)) {\r\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\r\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\r\n    }\r\n\r\n    const n = externalVirtual ? rowCount : rows.length;\r\n    this.treeArray = new Array(n);\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      this.treeArray[i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      const row = rows[i];\r\n      let currentRowHeight = rowHeight;\r\n      if (isFn) {\r\n        currentRowHeight = rowHeight(row);\r\n      }\r\n\r\n      // Add the detail row height to the already expanded rows.\r\n      // This is useful for the table that goes through a filter or sort.\r\n      const expanded = rowExpansions.has(row);\r\n      if (row && expanded) {\r\n        if (isDetailFn) {\r\n          const index = rowIndexes.get(row);\r\n          currentRowHeight += detailRowHeight(row, index);\r\n        } else {\r\n          currentRowHeight += detailRowHeight;\r\n        }\r\n      }\r\n\r\n      this.update(i, currentRowHeight);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given the ScrollY position i.e. sum, provide the rowIndex\r\n   * that is present in the current view port.  Below handles edge cases.\r\n   */\r\n  getRowIndex(scrollY: number): number {\r\n    if (scrollY === 0) return 0;\r\n    return this.calcRowIndex(scrollY);\r\n  }\r\n\r\n  /**\r\n   * When a row is expanded or rowHeight is changed, update the height.  This can\r\n   * be utilized in future when Angular Data table supports dynamic row heights.\r\n   */\r\n  update(atRowIndex: number, byRowHeight: number): void {\r\n    if (!this.treeArray.length) {\r\n      throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\r\n        Row Height cache not initialized.`);\r\n    }\r\n\r\n    const n = this.treeArray.length;\r\n    atRowIndex |= 0;\r\n\r\n    while (atRowIndex < n) {\r\n      this.treeArray[atRowIndex] += byRowHeight;\r\n      atRowIndex |= atRowIndex + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Range Sum query from 1 to the rowIndex\r\n   */\r\n  query(atIndex: number): number {\r\n    if (!this.treeArray.length) {\r\n      throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\r\n    }\r\n\r\n    let sum = 0;\r\n    atIndex |= 0;\r\n\r\n    while (atIndex >= 0) {\r\n      sum += this.treeArray[atIndex];\r\n      atIndex = (atIndex & (atIndex + 1)) - 1;\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Find the total height between 2 row indexes\r\n   */\r\n  queryBetween(atIndexA: number, atIndexB: number): number {\r\n    return this.query(atIndexB) - this.query(atIndexA - 1);\r\n  }\r\n\r\n  /**\r\n   * Given the ScrollY position i.e. sum, provide the rowIndex\r\n   * that is present in the current view port.\r\n   */\r\n  private calcRowIndex(sum: number): number {\r\n    if (!this.treeArray.length) return 0;\r\n\r\n    let pos = -1;\r\n    const dataLength = this.treeArray.length;\r\n\r\n    // Get the highest bit for the block size.\r\n    const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\r\n\r\n    for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\r\n      const nextPos = pos + blockSize;\r\n      if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\r\n        sum -= this.treeArray[nextPos];\r\n        pos = nextPos;\r\n      }\r\n    }\r\n\r\n    return pos + 1;\r\n  }\r\n}\r\n","import { camelCase } from './camel-case';\r\n\r\nconst cache = {};\r\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\r\n\r\n// Get Prefix\r\n// http://davidwalsh.name/vendor-prefix\r\nconst prefix = (function() {\r\n  const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\r\n  const match =\r\n    typeof styles !== 'undefined'\r\n      ? Array.prototype.slice\r\n          .call(styles)\r\n          .join('')\r\n          .match(/-(moz|webkit|ms)-/)\r\n      : null;\r\n  const pre = match !== null ? match[1] : undefined;\r\n  // tslint:disable-next-line: tsr-detect-non-literal-regexp\r\n  const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\r\n\r\n  return dom\r\n    ? {\r\n        dom,\r\n        lowercase: pre,\r\n        css: `-${pre}-`,\r\n        js: pre[0].toUpperCase() + pre.substr(1)\r\n      }\r\n    : undefined;\r\n})();\r\n\r\nexport function getVendorPrefixedName(property: string) {\r\n  const name = camelCase(property);\r\n\r\n  if (!cache[name]) {\r\n    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\r\n      cache[name] = prefix.css + property;\r\n    } else if (testStyle[property] !== undefined) {\r\n      cache[name] = property;\r\n    }\r\n  }\r\n\r\n  return cache[name];\r\n}\r\n","import { getVendorPrefixedName } from './prefixes';\r\nimport { camelCase } from './camel-case';\r\n\r\n// browser detection and prefixing tools\r\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\r\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\r\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\r\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\r\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\r\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\r\n\r\nexport function translateXY(styles: any, x: number, y: number) {\r\n  if (typeof transform !== 'undefined' && hasCSSTransforms) {\r\n    if (!isSafari && hasCSS3DTransforms) {\r\n      styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\r\n      styles[backfaceVisibility] = 'hidden';\r\n    } else {\r\n      styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\r\n    }\r\n  } else {\r\n    styles.top = `${y}px`;\r\n    styles.left = `${x}px`;\r\n  }\r\n}\r\n","import {\n  Component,\n  Output,\n  EventEmitter,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n  ViewChild,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { ScrollerComponent } from './scroller.component';\nimport { MouseEvent } from '../../events';\nimport { SelectionType } from '../../types/selection.type';\nimport { columnsByPin, columnGroupWidths } from '../../utils/column';\nimport { RowHeightCache } from '../../utils/row-height-cache';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-body',\n  template: `\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowDetail]=\"rowDetail\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'datatable-body'\n  }\n})\nexport class DataTableBodyComponent implements OnInit, OnDestroy {\n  @Input() scrollbarV: boolean;\n  @Input() scrollbarH: boolean;\n  @Input() loadingIndicator: boolean;\n  @Input() externalPaging: boolean;\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number);\n  @Input() offsetX: number;\n  @Input() emptyMessage: string;\n  @Input() selectionType: SelectionType;\n  @Input() selected: any[] = [];\n  @Input() rowIdentity: any;\n  @Input() rowDetail: any;\n  @Input() groupHeader: any;\n  @Input() selectCheck: any;\n  @Input() displayCheck: any;\n  @Input() trackByProp: string;\n  @Input() rowClass: any;\n  @Input() groupedRows: any;\n  @Input() groupExpansionDefault: boolean;\n  @Input() innerWidth: number;\n  @Input() groupRowsBy: string;\n  @Input() virtualization: boolean;\n  @Input() summaryRow: boolean;\n  @Input() summaryPosition: string;\n  @Input() summaryHeight: number;\n\n  @Input() set pageSize(val: number) {\n    this._pageSize = val;\n    this.recalcLayout();\n  }\n\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  @Input() set rows(val: any[]) {\n    this._rows = val;\n    this.recalcLayout();\n  }\n\n  get rows(): any[] {\n    return this._rows;\n  }\n\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n    const colsByPin = columnsByPin(val);\n    this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input() set offset(val: number) {\n    this._offset = val;\n    this.recalcLayout();\n  }\n\n  get offset(): number {\n    return this._offset;\n  }\n\n  @Input() set rowCount(val: number) {\n    this._rowCount = val;\n    this.recalcLayout();\n  }\n\n  get rowCount(): number {\n    return this._rowCount;\n  }\n\n  @HostBinding('style.width')\n  get bodyWidth(): string {\n    if (this.scrollbarH) {\n      return this.innerWidth + 'px';\n    } else {\n      return '100%';\n    }\n  }\n\n  @Input()\n  @HostBinding('style.height')\n  set bodyHeight(val) {\n    if (this.scrollbarV) {\n      this._bodyHeight = val + 'px';\n    } else {\n      this._bodyHeight = 'auto';\n    }\n\n    this.recalcLayout();\n  }\n\n  get bodyHeight() {\n    return this._bodyHeight;\n  }\n\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n  @Output() page: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() detailToggle: EventEmitter<any> = new EventEmitter();\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild(ScrollerComponent, { static: false }) scroller: ScrollerComponent;\n\n  /**\n   * Returns if selection is enabled.\n   */\n  get selectEnabled(): boolean {\n    return !!this.selectionType;\n  }\n\n  /**\n   * Property that would calculate the height of scroll bar\n   * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n   * calculate scroll height automatically (as height will be undefined).\n   */\n  get scrollHeight(): number | undefined {\n    if (this.scrollbarV && this.virtualization && this.rowCount) {\n      return this.rowHeightsCache.query(this.rowCount - 1);\n    }\n    // avoid TS7030: Not all code paths return a value.\n    return undefined;\n  }\n\n  rowHeightsCache: RowHeightCache = new RowHeightCache();\n  temp: any[] = [];\n  offsetY = 0;\n  indexes: any = {};\n  columnGroupWidths: any;\n  columnGroupWidthsWithoutGroup: any;\n  rowTrackingFn: any;\n  listener: any;\n  rowIndexes: any = new Map();\n  rowExpansions: any[] = [];\n\n  _rows: any[];\n  _bodyHeight: any;\n  _columns: any[];\n  _rowCount: number;\n  _offset: number;\n  _pageSize: number;\n\n  /**\n   * Creates an instance of DataTableBodyComponent.\n   */\n  constructor(private cd: ChangeDetectorRef) {\n    // declare fn here so we can get access to the `this` property\n    this.rowTrackingFn = (index: number, row: any): any => {\n      const idx = this.getRowIndex(row);\n      if (this.trackByProp) {\n        return row[this.trackByProp];\n      } else {\n        return idx;\n      }\n    };\n  }\n\n  /**\n   * Called after the constructor, initializing input properties\n   */\n  ngOnInit(): void {\n    if (this.rowDetail) {\n      this.listener = this.rowDetail.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\n        if (type === 'row') {\n          this.toggleRowExpansion(value);\n        }\n        if (type === 'all') {\n          this.toggleAllRows(value);\n        }\n\n        // Refresh rows after toggle\n        // Fixes #883\n        this.updateIndexes();\n        this.updateRows();\n        this.cd.markForCheck();\n      });\n    }\n\n    if (this.groupHeader) {\n      this.listener = this.groupHeader.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\n        if (type === 'group') {\n          this.toggleRowExpansion(value);\n        }\n        if (type === 'all') {\n          this.toggleAllRows(value);\n        }\n\n        // Refresh rows after toggle\n        // Fixes #883\n        this.updateIndexes();\n        this.updateRows();\n        this.cd.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Called once, before the instance is destroyed.\n   */\n  ngOnDestroy(): void {\n    if (this.rowDetail || this.groupHeader) {\n      this.listener.unsubscribe();\n    }\n  }\n\n  /**\n   * Updates the Y offset given a new offset.\n   */\n  updateOffsetY(offset?: number): void {\n    // scroller is missing on empty table\n    if (!this.scroller) {\n      return;\n    }\n\n    if (this.scrollbarV && this.virtualization && offset) {\n      // First get the row Index that we need to move to.\n      const rowIndex = this.pageSize * offset;\n      offset = this.rowHeightsCache.query(rowIndex - 1);\n    } else if (this.scrollbarV && !this.virtualization) {\n      offset = 0;\n    }\n\n    this.scroller.setOffset(offset || 0);\n  }\n\n  /**\n   * Body was scrolled, this is mainly useful for\n   * when a user is server-side pagination via virtual scroll.\n   */\n  onBodyScroll(event: any): void {\n    const scrollYPos: number = event.scrollYPos;\n    const scrollXPos: number = event.scrollXPos;\n\n    // if scroll change, trigger update\n    // this is mainly used for header cell positions\n    if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n      this.scroll.emit({\n        offsetY: scrollYPos,\n        offsetX: scrollXPos\n      });\n    }\n\n    this.offsetY = scrollYPos;\n    this.offsetX = scrollXPos;\n\n    this.updateIndexes();\n    this.updatePage(event.direction);\n    this.updateRows();\n  }\n\n  /**\n   * Updates the page given a direction.\n   */\n  updatePage(direction: string): void {\n    let offset = this.indexes.first / this.pageSize;\n\n    if (direction === 'up') {\n      offset = Math.ceil(offset);\n    } else if (direction === 'down') {\n      offset = Math.floor(offset);\n    }\n\n    if (direction !== undefined && !isNaN(offset)) {\n      this.page.emit({ offset });\n    }\n  }\n\n  /**\n   * Updates the rows in the view port\n   */\n  updateRows(): void {\n    const { first, last } = this.indexes;\n    let rowIndex = first;\n    let idx = 0;\n    const temp: any[] = [];\n\n    this.rowIndexes.clear();\n\n    // if grouprowsby has been specified treat row paging\n    // parameters as group paging parameters ie if limit 10 has been\n    // specified treat it as 10 groups rather than 10 rows\n    if (this.groupedRows) {\n      let maxRowsPerGroup = 3;\n      // if there is only one group set the maximum number of\n      // rows per group the same as the total number of rows\n      if (this.groupedRows.length === 1) {\n        maxRowsPerGroup = this.groupedRows[0].value.length;\n      }\n\n      while (rowIndex < last && rowIndex < this.groupedRows.length) {\n        // Add the groups into this page\n        const group = this.groupedRows[rowIndex];\n        temp[idx] = group;\n        idx++;\n\n        // Group index in this context\n        rowIndex++;\n      }\n    } else {\n      while (rowIndex < last && rowIndex < this.rowCount) {\n        const row = this.rows[rowIndex];\n\n        if (row) {\n          this.rowIndexes.set(row, rowIndex);\n          temp[idx] = row;\n        }\n\n        idx++;\n        rowIndex++;\n      }\n    }\n\n    this.temp = temp;\n  }\n\n  /**\n   * Get the row height\n   */\n  getRowHeight(row: any): number {\n    // if its a function return it\n    if (typeof this.rowHeight === 'function') {\n      return this.rowHeight(row);\n    }\n\n    return this.rowHeight as number;\n  }\n\n  /**\n   * @param group the group with all rows\n   */\n  getGroupHeight(group: any): number {\n    let rowHeight = 0;\n\n    if (group.value) {\n      for (let index = 0; index < group.value.length; index++) {\n        rowHeight += this.getRowAndDetailHeight(group.value[index]);\n      }\n    }\n\n    return rowHeight;\n  }\n\n  /**\n   * Calculate row height based on the expanded state of the row.\n   */\n  getRowAndDetailHeight(row: any): number {\n    let rowHeight = this.getRowHeight(row);\n    const expanded = this.getRowExpanded(row);\n\n    // Adding detail row height if its expanded.\n    if (expanded) {\n      rowHeight += this.getDetailRowHeight(row);\n    }\n\n    return rowHeight;\n  }\n\n  /**\n   * Get the height of the detail row.\n   */\n  getDetailRowHeight = (row?: any, index?: any): number => {\n    if (!this.rowDetail) {\n      return 0;\n    }\n    const rowHeight = this.rowDetail.rowHeight;\n    return typeof rowHeight === 'function' ? rowHeight(row, index) : (rowHeight as number);\n  };\n\n  /**\n   * Calculates the styles for the row so that the rows can be moved in 2D space\n   * during virtual scroll inside the DOM.   In the below case the Y position is\n   * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n   * 100 px then following styles are generated:\n   *\n   * transform: translate3d(0px, 0px, 0px);    ->  row0\n   * transform: translate3d(0px, 30px, 0px);   ->  row1\n   * transform: translate3d(0px, 130px, 0px);  ->  row2\n   *\n   * Row heights have to be calculated based on the row heights cache as we wont\n   * be able to determine which row is of what height before hand.  In the above\n   * case the positionY of the translate3d for row2 would be the sum of all the\n   * heights of the rows before it (i.e. row0 and row1).\n   *\n   * @param rows the row that needs to be placed in the 2D space.\n   * @returns the CSS3 style to be applied\n   *\n   * @memberOf DataTableBodyComponent\n   */\n  getRowsStyles(rows: any): any {\n    const styles: any = {};\n\n    // only add styles for the group if there is a group\n    if (this.groupedRows) {\n      styles.width = this.columnGroupWidths.total;\n    }\n\n    if (this.scrollbarV && this.virtualization) {\n      let idx = 0;\n\n      if (this.groupedRows) {\n        // Get the latest row rowindex in a group\n        const row = rows[rows.length - 1];\n        idx = row ? this.getRowIndex(row) : 0;\n      } else {\n        idx = this.getRowIndex(rows);\n      }\n\n      // const pos = idx * rowHeight;\n      // The position of this row would be the sum of all row heights\n      // until the previous row position.\n      const pos = this.rowHeightsCache.query(idx - 1);\n\n      translateXY(styles, 0, pos);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Calculate bottom summary row offset for scrollbar mode.\n   * For more information about cache and offset calculation\n   * see description for `getRowsStyles` method\n   *\n   * @returns the CSS3 style to be applied\n   *\n   * @memberOf DataTableBodyComponent\n   */\n  getBottomSummaryRowStyles(): any {\n    if (!this.scrollbarV || !this.rows || !this.rows.length) {\n      return null;\n    }\n\n    const styles = { position: 'absolute' };\n    const pos = this.rowHeightsCache.query(this.rows.length - 1);\n\n    translateXY(styles, 0, pos);\n\n    return styles;\n  }\n\n  /**\n   * Hides the loading indicator\n   */\n  hideIndicator(): void {\n    setTimeout(() => (this.loadingIndicator = false), 500);\n  }\n\n  /**\n   * Updates the index of the rows in the viewport\n   */\n  updateIndexes(): void {\n    let first = 0;\n    let last = 0;\n\n    if (this.scrollbarV) {\n      if (this.virtualization) {\n        // Calculation of the first and last indexes will be based on where the\n        // scrollY position would be at.  The last index would be the one\n        // that shows up inside the view port the last.\n        const height = parseInt(this.bodyHeight, 0);\n        first = this.rowHeightsCache.getRowIndex(this.offsetY);\n        last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n      } else {\n        // If virtual rows are not needed\n        // We render all in one go\n        first = 0;\n        last = this.rowCount;\n      }\n    } else {\n      // The server is handling paging and will pass an array that begins with the\n      // element at a specified offset.  first should always be 0 with external paging.\n      if (!this.externalPaging) {\n        first = Math.max(this.offset * this.pageSize, 0);\n      }\n      last = Math.min(first + this.pageSize, this.rowCount);\n    }\n\n    this.indexes = { first, last };\n  }\n\n  /**\n   * Refreshes the full Row Height cache.  Should be used\n   * when the entire row array state has changed.\n   */\n  refreshRowHeightCache(): void {\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\n      return;\n    }\n\n    // clear the previous row height cache if already present.\n    // this is useful during sorts, filters where the state of the\n    // rows array is changed.\n    this.rowHeightsCache.clearCache();\n\n    // Initialize the tree only if there are rows inside the tree.\n    if (this.rows && this.rows.length) {\n      const rowExpansions = new Set();\n      for (const row of this.rows) {\n        if (this.getRowExpanded(row)) {\n          rowExpansions.add(row);\n        }\n      }\n\n      this.rowHeightsCache.initCache({\n        rows: this.rows,\n        rowHeight: this.rowHeight,\n        detailRowHeight: this.getDetailRowHeight,\n        externalVirtual: this.scrollbarV && this.externalPaging,\n        rowCount: this.rowCount,\n        rowIndexes: this.rowIndexes,\n        rowExpansions\n      });\n    }\n  }\n\n  /**\n   * Gets the index for the view port\n   */\n  getAdjustedViewPortIndex(): number {\n    // Capture the row index of the first row that is visible on the viewport.\n    // If the scroll bar is just below the row which is highlighted then make that as the\n    // first index.\n    const viewPortFirstRowIndex = this.indexes.first;\n\n    if (this.scrollbarV && this.virtualization) {\n      const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n      return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n    }\n\n    return viewPortFirstRowIndex;\n  }\n\n  /**\n   * Toggle the Expansion of the row i.e. if the row is expanded then it will\n   * collapse and vice versa.   Note that the expanded status is stored as\n   * a part of the row object itself as we have to preserve the expanded row\n   * status in case of sorting and filtering of the row set.\n   */\n  toggleRowExpansion(row: any): void {\n    // Capture the row index of the first row that is visible on the viewport.\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n    const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\n    const expanded = rowExpandedIdx > -1;\n\n    // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n    if (this.scrollbarV && this.virtualization) {\n      const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\n      // const idx = this.rowIndexes.get(row) || 0;\n      const idx = this.getRowIndex(row);\n      this.rowHeightsCache.update(idx, detailRowHeight);\n    }\n\n    // Update the toggled row and update thive nevere heights in the cache.\n    if (expanded) {\n      this.rowExpansions.splice(rowExpandedIdx, 1);\n    } else {\n      this.rowExpansions.push(row);\n    }\n\n    this.detailToggle.emit({\n      rows: [row],\n      currentIndex: viewPortFirstRowIndex\n    });\n  }\n\n  /**\n   * Expand/Collapse all the rows no matter what their state is.\n   */\n  toggleAllRows(expanded: boolean): void {\n    // clear prev expansions\n    this.rowExpansions = [];\n\n    // Capture the row index of the first row that is visible on the viewport.\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n\n    if (expanded) {\n      for (const row of this.rows) {\n        this.rowExpansions.push(row);\n      }\n    }\n\n    if (this.scrollbarV) {\n      // Refresh the full row heights cache since every row was affected.\n      this.recalcLayout();\n    }\n\n    // Emit all rows that have been expanded.\n    this.detailToggle.emit({\n      rows: this.rows,\n      currentIndex: viewPortFirstRowIndex\n    });\n  }\n\n  /**\n   * Recalculates the table\n   */\n  recalcLayout(): void {\n    this.refreshRowHeightCache();\n    this.updateIndexes();\n    this.updateRows();\n  }\n\n  /**\n   * Tracks the column\n   */\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  /**\n   * Gets the row pinning group styles\n   */\n  stylesByGroup(group: string) {\n    const widths = this.columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'left') {\n      translateXY(styles, offsetX, 0);\n    } else if (group === 'right') {\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\n      const totalDiff = widths.total - bodyWidth;\n      const offsetDiff = totalDiff - offsetX;\n      const offset = offsetDiff * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Returns if the row was expanded and set default row expansion when row expansion is empty\n   */\n  getRowExpanded(row: any): boolean {\n    if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\n      for (const group of this.groupedRows) {\n        this.rowExpansions.push(group);\n      }\n    }\n\n    return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\n  }\n\n  getRowExpandedIdx(row: any, expanded: any[]): number {\n    if (!expanded || !expanded.length) return -1;\n\n    const rowId = this.rowIdentity(row);\n    return expanded.findIndex(r => {\n      const id = this.rowIdentity(r);\n      return id === rowId;\n    });\n  }\n\n  /**\n   * Gets the row index given a row\n   */\n  getRowIndex(row: any): number {\n    return this.rowIndexes.get(row) || 0;\n  }\n\n  onTreeAction(row: any) {\n    this.treeAction.emit({ row });\n  }\n}\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  ViewRef\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\r\nimport { SortType } from '../../types/sort.type';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { DataTableColumnDirective } from '../columns/column.directive';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-header',\r\n  template: `\r\n    <div\r\n      orderable\r\n      (reorder)=\"onColumnReordered($event)\"\r\n      (targetChanged)=\"onTargetChanged($event)\"\r\n      [style.width.px]=\"_columnGroupWidths.total\"\r\n      class=\"datatable-header-inner\"\r\n    >\r\n      <div\r\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\r\n        [class]=\"'datatable-row-' + colGroup.type\"\r\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\r\n      >\r\n        <datatable-header-cell\r\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\r\n          resizeable\r\n          [resizeEnabled]=\"column.resizeable\"\r\n          (resize)=\"onColumnResized($event, column)\"\r\n          long-press\r\n          [pressModel]=\"column\"\r\n          [pressEnabled]=\"reorderable && column.draggable\"\r\n          (longPressStart)=\"onLongPressStart($event)\"\r\n          (longPressEnd)=\"onLongPressEnd($event)\"\r\n          draggable\r\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\r\n          [dragY]=\"false\"\r\n          [dragModel]=\"column\"\r\n          [dragEventTarget]=\"dragEventTarget\"\r\n          [headerHeight]=\"headerHeight\"\r\n          [isTarget]=\"column.isTarget\"\r\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\r\n          [targetMarkerContext]=\"column.targetMarkerContext\"\r\n          [column]=\"column\"\r\n          [sortType]=\"sortType\"\r\n          [sorts]=\"sorts\"\r\n          [selectionType]=\"selectionType\"\r\n          [sortAscendingIcon]=\"sortAscendingIcon\"\r\n          [sortDescendingIcon]=\"sortDescendingIcon\"\r\n          [allRowsSelected]=\"allRowsSelected\"\r\n          (sort)=\"onSort($event)\"\r\n          (select)=\"select.emit($event)\"\r\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\r\n        >\r\n        </datatable-header-cell>\r\n      </div>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-header'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableHeaderComponent {\r\n  @Input() sortAscendingIcon: any;\r\n  @Input() sortDescendingIcon: any;\r\n  @Input() scrollbarH: boolean;\r\n  @Input() dealsWithGroup: boolean;\r\n  @Input() targetMarkerTemplate: any;\r\n\r\n  targetMarkerContext: any;\r\n\r\n  @Input() set innerWidth(val: number) {\r\n    this._innerWidth = val;\r\n    setTimeout(() => {\r\n      if (this._columns) {\r\n        const colByPin = columnsByPin(this._columns);\r\n        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n        this.setStylesByGroup();\r\n      }\r\n    });\r\n  }\r\n\r\n  get innerWidth(): number {\r\n    return this._innerWidth;\r\n  }\r\n\r\n  @Input() sorts: any[];\r\n  @Input() sortType: SortType;\r\n  @Input() allRowsSelected: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() reorderable: boolean;\r\n\r\n  dragEventTarget: any;\r\n\r\n  @HostBinding('style.height')\r\n  @Input()\r\n  set headerHeight(val: any) {\r\n    if (val !== 'auto') {\r\n      this._headerHeight = `${val}px`;\r\n    } else {\r\n      this._headerHeight = val;\r\n    }\r\n  }\r\n\r\n  get headerHeight(): any {\r\n    return this._headerHeight;\r\n  }\r\n\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n\r\n    const colsByPin = columnsByPin(val);\r\n    this._columnsByPin = columnsByPinArr(val);\r\n    setTimeout(() => {\r\n      this._columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n      this.setStylesByGroup();\r\n    });\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input()\r\n  set offsetX(val: number) {\r\n    this._offsetX = val;\r\n    this.setStylesByGroup();\r\n  }\r\n  get offsetX() {\r\n    return this._offsetX;\r\n  }\r\n\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\r\n\r\n  _columnsByPin: any;\r\n  _columnGroupWidths: any = {\r\n    total: 100\r\n  };\r\n  _innerWidth: number;\r\n  _offsetX: number;\r\n  _columns: any[];\r\n  _headerHeight: string;\r\n  _styleByGroup: { [prop: string]: {} } = {\r\n    left: {},\r\n    center: {},\r\n    right: {}\r\n  };\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  onLongPressStart({ event, model }: { event: any; model: any }) {\r\n    model.dragging = true;\r\n    this.dragEventTarget = event;\r\n  }\r\n\r\n  onLongPressEnd({ event, model }: { event: any; model: any }) {\r\n    this.dragEventTarget = event;\r\n\r\n    // delay resetting so sort can be\r\n    // prevented if we were dragging\r\n    setTimeout(() => {\r\n      // datatable component creates copies from columns on reorder\r\n      // set dragging to false on new objects\r\n      const column = this._columns.find(c => c.$$id === model.$$id);\r\n      if (column) {\r\n        column.dragging = false;\r\n      }\r\n    }, 5);\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  get headerWidth(): string {\r\n    if (this.scrollbarH) {\r\n      return this.innerWidth + 'px';\r\n    }\r\n\r\n    return '100%';\r\n  }\r\n\r\n  trackByGroups(index: number, colGroup: any): any {\r\n    return colGroup.type;\r\n  }\r\n\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  onColumnResized(width: number, column: DataTableColumnDirective): void {\r\n    if (width <= column.minWidth) {\r\n      width = column.minWidth;\r\n    } else if (width >= column.maxWidth) {\r\n      width = column.maxWidth;\r\n    }\r\n\r\n    this.resize.emit({\r\n      column,\r\n      prevValue: column.width,\r\n      newValue: width\r\n    });\r\n  }\r\n\r\n  onColumnReordered({ prevIndex, newIndex, model }: any): void {\r\n    const column = this.getColumn(newIndex);\r\n    column.isTarget = false;\r\n    column.targetMarkerContext = undefined;\r\n    this.reorder.emit({\r\n      column: model,\r\n      prevValue: prevIndex,\r\n      newValue: newIndex\r\n    });\r\n  }\r\n\r\n  onTargetChanged({ prevIndex, newIndex, initialIndex }: any): void {\r\n    if (prevIndex || prevIndex === 0) {\r\n      const oldColumn = this.getColumn(prevIndex);\r\n      oldColumn.isTarget = false;\r\n      oldColumn.targetMarkerContext = undefined;\r\n    }\r\n    if (newIndex || newIndex === 0) {\r\n      const newColumn = this.getColumn(newIndex);\r\n      newColumn.isTarget = true;\r\n\r\n      if (initialIndex !== newIndex) {\r\n        newColumn.targetMarkerContext = {\r\n          class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  getColumn(index: number): any {\r\n    const leftColumnCount = this._columnsByPin[0].columns.length;\r\n    if (index < leftColumnCount) {\r\n      return this._columnsByPin[0].columns[index];\r\n    }\r\n\r\n    const centerColumnCount = this._columnsByPin[1].columns.length;\r\n    if (index < leftColumnCount + centerColumnCount) {\r\n      return this._columnsByPin[1].columns[index - leftColumnCount];\r\n    }\r\n\r\n    return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\r\n  }\r\n\r\n  onSort({ column, prevValue, newValue }: any): void {\r\n    // if we are dragging don't sort!\r\n    if (column.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sorts = this.calcNewSorts(column, prevValue, newValue);\r\n    this.sort.emit({\r\n      sorts,\r\n      column,\r\n      prevValue,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  calcNewSorts(column: any, prevValue: number, newValue: number): any[] {\r\n    let idx = 0;\r\n\r\n    if (!this.sorts) {\r\n      this.sorts = [];\r\n    }\r\n\r\n    const sorts = this.sorts.map((s, i) => {\r\n      s = { ...s };\r\n      if (s.prop === column.prop) {\r\n        idx = i;\r\n      }\r\n      return s;\r\n    });\r\n\r\n    if (newValue === undefined) {\r\n      sorts.splice(idx, 1);\r\n    } else if (prevValue) {\r\n      sorts[idx].dir = newValue;\r\n    } else {\r\n      if (this.sortType === SortType.single) {\r\n        sorts.splice(0, this.sorts.length);\r\n      }\r\n\r\n      sorts.push({ dir: newValue, prop: column.prop });\r\n    }\r\n\r\n    return sorts;\r\n  }\r\n\r\n  setStylesByGroup() {\r\n    this._styleByGroup.left = this.calcStylesByGroup('left');\r\n    this._styleByGroup.center = this.calcStylesByGroup('center');\r\n    this._styleByGroup.right = this.calcStylesByGroup('right');\r\n    if (!(this.cd as ViewRef).destroyed) {\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  calcStylesByGroup(group: string): any {\r\n    const widths = this._columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'center') {\r\n      translateXY(styles, offsetX * -1, 0);\r\n    } else if (group === 'right') {\r\n      const totalDiff = widths.total - this.innerWidth;\r\n      const offset = totalDiff * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n}\r\n","/**\r\n * Throttle a function\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context: any;\r\n  let args: any;\r\n  let result: any;\r\n  let timeout: any = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function(this: any) {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target: any, key: PropertyKey, descriptor: PropertyDescriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { columnsByPin, columnsTotalWidth } from './column';\r\n\r\n/**\r\n * Calculates the Total Flex Grow\r\n */\r\nexport function getTotalFlexGrow(columns: any[]) {\r\n  let totalFlexGrow = 0;\r\n\r\n  for (const c of columns) {\r\n    totalFlexGrow += c.flexGrow || 0;\r\n  }\r\n\r\n  return totalFlexGrow;\r\n}\r\n\r\n/**\r\n * Adjusts the column widths.\r\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\r\n */\r\nexport function adjustColumnWidths(allColumns: any, expectedWidth: any) {\r\n  const columnsWidth = columnsTotalWidth(allColumns);\r\n  const totalFlexGrow = getTotalFlexGrow(allColumns);\r\n  const colsByGroup = columnsByPin(allColumns);\r\n\r\n  if (columnsWidth !== expectedWidth) {\r\n    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\r\n  }\r\n}\r\n\r\n/**\r\n * Resizes columns based on the flexGrow property, while respecting manually set widths\r\n */\r\nfunction scaleColumns(colsByGroup: any, maxWidth: any, totalFlexGrow: any) {\r\n  // calculate total width and flexgrow points for coulumns that can be resized\r\n  for (const attr in colsByGroup) {\r\n    for (const column of colsByGroup[attr]) {\r\n      if (!column.canAutoResize) {\r\n        maxWidth -= column.width;\r\n        totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\r\n      } else {\r\n        column.width = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const hasMinWidth = {};\r\n  let remainingWidth = maxWidth;\r\n\r\n  // resize columns until no width is left to be distributed\r\n  do {\r\n    const widthPerFlexPoint = remainingWidth / totalFlexGrow;\r\n    remainingWidth = 0;\r\n\r\n    for (const attr in colsByGroup) {\r\n      for (const column of colsByGroup[attr]) {\r\n        // if the column can be resize and it hasn't reached its minimum width yet\r\n        if (column.canAutoResize && !hasMinWidth[column.prop]) {\r\n          const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\r\n          if (column.minWidth !== undefined && newWidth < column.minWidth) {\r\n            remainingWidth += newWidth - column.minWidth;\r\n            column.width = column.minWidth;\r\n            hasMinWidth[column.prop] = true;\r\n          } else {\r\n            column.width = newWidth;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } while (remainingWidth !== 0);\r\n}\r\n\r\n/**\r\n * Forces the width of the columns to\r\n * distribute equally but overflowing when necessary\r\n *\r\n * Rules:\r\n *\r\n *  - If combined withs are less than the total width of the grid,\r\n *    proportion the widths given the min / max / normal widths to fill the width.\r\n *\r\n *  - If the combined widths, exceed the total width of the grid,\r\n *    use the standard widths.\r\n *\r\n *  - If a column is resized, it should always use that width\r\n *\r\n *  - The proportional widths should never fall below min size if specified.\r\n *\r\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\r\n *    the width should use the original width; not the newly proportioned widths.\r\n */\r\nexport function forceFillColumnWidths(\r\n  allColumns: any[],\r\n  expectedWidth: number,\r\n  startIdx: number,\r\n  allowBleed: boolean,\r\n  defaultColWidth: number = 300\r\n) {\r\n  const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\r\n    return c.canAutoResize !== false;\r\n  });\r\n\r\n  for (const column of columnsToResize) {\r\n    if (!column.$$oldWidth) {\r\n      column.$$oldWidth = column.width;\r\n    }\r\n  }\r\n\r\n  let additionWidthPerColumn = 0;\r\n  let exceedsWindow = false;\r\n  let contentWidth = getContentWidth(allColumns, defaultColWidth);\r\n  let remainingWidth = expectedWidth - contentWidth;\r\n  const columnsProcessed: any[] = [];\r\n  const remainingWidthLimit = 1; // when to stop\r\n\r\n  // This loop takes care of the\r\n  do {\r\n    additionWidthPerColumn = remainingWidth / columnsToResize.length;\r\n    exceedsWindow = contentWidth >= expectedWidth;\r\n\r\n    for (const column of columnsToResize) {\r\n      if (exceedsWindow && allowBleed) {\r\n        column.width = column.$$oldWidth || column.width || defaultColWidth;\r\n      } else {\r\n        const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\r\n\r\n        if (column.minWidth && newSize < column.minWidth) {\r\n          column.width = column.minWidth;\r\n          columnsProcessed.push(column);\r\n        } else if (column.maxWidth && newSize > column.maxWidth) {\r\n          column.width = column.maxWidth;\r\n          columnsProcessed.push(column);\r\n        } else {\r\n          column.width = newSize;\r\n        }\r\n      }\r\n\r\n      column.width = Math.max(0, column.width);\r\n    }\r\n\r\n    contentWidth = getContentWidth(allColumns);\r\n    remainingWidth = expectedWidth - contentWidth;\r\n    removeProcessedColumns(columnsToResize, columnsProcessed);\r\n  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\r\n}\r\n\r\n/**\r\n * Remove the processed columns from the current active columns.\r\n */\r\nfunction removeProcessedColumns(columnsToResize: any[], columnsProcessed: any[]) {\r\n  for (const column of columnsProcessed) {\r\n    const index = columnsToResize.indexOf(column);\r\n    columnsToResize.splice(index, 1);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the width of the columns\r\n */\r\nfunction getContentWidth(allColumns: any, defaultColWidth: number = 300): number {\r\n  let contentWidth = 0;\r\n\r\n  for (const column of allColumns) {\r\n    contentWidth += column.width || defaultColWidth;\r\n  }\r\n\r\n  return contentWidth;\r\n}\r\n","export enum SortDirection {\r\n  asc = 'asc',\r\n  desc = 'desc'\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { SortType } from '../types/sort.type';\r\nimport { SortDirection } from '../types/sort-direction.type';\r\nimport { SortPropDir } from '../types/sort-prop-dir.type';\r\n/**\r\n * Gets the next sort direction\r\n */\r\nexport function nextSortDir(sortType: SortType, current: SortDirection): SortDirection | undefined {\r\n  if (sortType === SortType.single) {\r\n    if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else {\r\n      return SortDirection.asc;\r\n    }\r\n  } else {\r\n    if (!current) {\r\n      return SortDirection.asc;\r\n    } else if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else if (current === SortDirection.desc) {\r\n      return undefined;\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Adapted from fueld-ui on 6/216\r\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\r\n */\r\nexport function orderByComparator(a: any, b: any): number {\r\n  if (a === null || typeof a === 'undefined') a = 0;\r\n  if (b === null || typeof b === 'undefined') b = 0;\r\n  if (a instanceof Date && b instanceof Date) {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n  } else if (isNaN(parseFloat(a)) || !isFinite(a) || (isNaN(parseFloat(b)) || !isFinite(b))) {\r\n    // Convert to string in case of a=0 or b=0\r\n    a = String(a);\r\n    b = String(b);\r\n    // Isn't a number so lowercase the string to properly compare\r\n    if (a.toLowerCase() < b.toLowerCase()) return -1;\r\n    if (a.toLowerCase() > b.toLowerCase()) return 1;\r\n  } else {\r\n    // Parse strings as numbers to compare properly\r\n    if (parseFloat(a) < parseFloat(b)) return -1;\r\n    if (parseFloat(a) > parseFloat(b)) return 1;\r\n  }\r\n\r\n  // equal each other\r\n  return 0;\r\n}\r\n\r\n/**\r\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\r\n * does not sort the `rows` argument in place\r\n */\r\nexport function sortRows(rows: any[], columns: any[], dirs: SortPropDir[]): any[] {\r\n  if (!rows) return [];\r\n  if (!dirs || !dirs.length || !columns) return [...rows];\r\n\r\n  /**\r\n   * record the row ordering of results from prior sort operations (if applicable)\r\n   * this is necessary to guarantee stable sorting behavior\r\n   */\r\n  const rowToIndexMap = new Map<any, number>();\r\n  rows.forEach((row, index) => rowToIndexMap.set(row, index));\r\n\r\n  const temp = [...rows];\r\n  const cols = columns.reduce((obj, col) => {\r\n    if (col.comparator && typeof col.comparator === 'function') {\r\n      obj[col.prop] = col.comparator;\r\n    }\r\n    return obj;\r\n  }, {});\r\n\r\n  // cache valueGetter and compareFn so that they\r\n  // do not need to be looked-up in the sort function body\r\n  const cachedDirs = dirs.map(dir => {\r\n    const prop = dir.prop;\r\n    return {\r\n      prop,\r\n      dir: dir.dir,\r\n      valueGetter: getterForProp(prop),\r\n      compareFn: cols[prop] || orderByComparator\r\n    };\r\n  });\r\n\r\n  return temp.sort(function(rowA: any, rowB: any) {\r\n    for (const cachedDir of cachedDirs) {\r\n      // Get property and valuegetters for column to be sorted\r\n      const { prop, valueGetter } = cachedDir;\r\n      // Get A and B cell values from rows based on properties of the columns\r\n      const propA = valueGetter(rowA, prop);\r\n      const propB = valueGetter(rowB, prop);\r\n\r\n      // Compare function gets five parameters:\r\n      // Two cell values to be compared as propA and propB\r\n      // Two rows corresponding to the cells as rowA and rowB\r\n      // Direction of the sort for this column as SortDirection\r\n      // Compare can be a standard JS comparison function (a,b) => -1|0|1\r\n      // as additional parameters are silently ignored. The whole row and sort\r\n      // direction enable more complex sort logic.\r\n      const comparison =\r\n        cachedDir.dir !== SortDirection.desc\r\n          ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\r\n          : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\r\n\r\n      // Don't return 0 yet in case of needing to sort by next property\r\n      if (comparison !== 0) return comparison;\r\n    }\r\n\r\n    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;\r\n\r\n    /**\r\n     * all else being equal, preserve original order of the rows (stable sort)\r\n     */\r\n    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\r\n  });\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ElementRef,\r\n  EventEmitter,\r\n  ViewChild,\r\n  HostListener,\r\n  ContentChildren,\r\n  OnInit,\r\n  QueryList,\r\n  AfterViewInit,\r\n  HostBinding,\r\n  ContentChild,\r\n  DoCheck,\r\n  KeyValueDiffers,\r\n  KeyValueDiffer,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SkipSelf,\r\n  OnDestroy,\r\n  Optional,\r\n  Inject\r\n} from '@angular/core';\r\n\r\nimport { DatatableGroupHeaderDirective } from './body/body-group-header.directive';\r\n\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { INgxDatatableConfig } from '../ngx-datatable.module';\r\nimport { groupRowsByParents, optionalGetterForProp } from '../utils/tree';\r\nimport { TableColumn } from '../types/table-column.type';\r\nimport { setColumnDefaults, translateTemplates } from '../utils/column-helper';\r\nimport { ColumnMode } from '../types/column-mode.type';\r\nimport { SelectionType } from '../types/selection.type';\r\nimport { SortType } from '../types/sort.type';\r\nimport { ContextmenuType } from '../types/contextmenu.type';\r\nimport { DataTableColumnDirective } from './columns/column.directive';\r\nimport { DatatableRowDetailDirective } from './row-detail/row-detail.directive';\r\nimport { DatatableFooterDirective } from './footer/footer.directive';\r\nimport { DataTableBodyComponent } from './body/body.component';\r\nimport { DataTableHeaderComponent } from './header/header.component';\r\nimport { ScrollbarHelper } from '../services/scrollbar-helper.service';\r\nimport { ColumnChangesService } from '../services/column-changes.service';\r\nimport { DimensionsHelper } from '../services/dimensions-helper.service';\r\nimport { throttleable } from '../utils/throttle';\r\nimport { forceFillColumnWidths, adjustColumnWidths } from '../utils/math';\r\nimport { sortRows } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'ngx-datatable',\r\n  templateUrl: './datatable.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./datatable.component.scss'],\r\n  host: {\r\n    class: 'ngx-datatable'\r\n  }\r\n})\r\nexport class DatatableComponent implements OnInit, DoCheck, AfterViewInit {\r\n  /**\r\n   * Template for the target marker of drag target columns.\r\n   */\r\n  @Input() targetMarkerTemplate: any;\r\n\r\n  /**\r\n   * Rows that are displayed in the table.\r\n   */\r\n  @Input() set rows(val: any) {\r\n    this._rows = val;\r\n\r\n    if (val) {\r\n      this._internalRows = [...val];\r\n    }\r\n\r\n    // auto sort on new updates\r\n    if (!this.externalSorting) {\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // auto group by parent on new update\r\n    this._internalRows = groupRowsByParents(\r\n      this._internalRows,\r\n      optionalGetterForProp(this.treeFromRelation),\r\n      optionalGetterForProp(this.treeToRelation)\r\n    );\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n\r\n    if (this._rows && this._groupRowsBy) {\r\n      // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\r\n      this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Gets the rows.\r\n   */\r\n  get rows(): any {\r\n    return this._rows;\r\n  }\r\n\r\n  /**\r\n   * This attribute allows the user to set the name of the column to group the data with\r\n   */\r\n  @Input() set groupRowsBy(val: string) {\r\n    if (val) {\r\n      this._groupRowsBy = val;\r\n      if (this._rows && this._groupRowsBy) {\r\n        // cretes a new array with the data grouped\r\n        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\r\n      }\r\n    }\r\n  }\r\n\r\n  get groupRowsBy() {\r\n    return this._groupRowsBy;\r\n  }\r\n\r\n  /**\r\n   * This attribute allows the user to set a grouped array in the following format:\r\n   *  [\r\n   *    {groupid=1} [\r\n   *      {id=1 name=\"test1\"},\r\n   *      {id=2 name=\"test2\"},\r\n   *      {id=3 name=\"test3\"}\r\n   *    ]},\r\n   *    {groupid=2>[\r\n   *      {id=4 name=\"test4\"},\r\n   *      {id=5 name=\"test5\"},\r\n   *      {id=6 name=\"test6\"}\r\n   *    ]}\r\n   *  ]\r\n   */\r\n  @Input() groupedRows: any[];\r\n\r\n  /**\r\n   * Columns to be displayed.\r\n   */\r\n  @Input() set columns(val: TableColumn[]) {\r\n    if (val) {\r\n      this._internalColumns = [...val];\r\n      setColumnDefaults(this._internalColumns);\r\n      this.recalculateColumns();\r\n    }\r\n\r\n    this._columns = val;\r\n  }\r\n\r\n  /**\r\n   * Get the columns.\r\n   */\r\n  get columns(): TableColumn[] {\r\n    return this._columns;\r\n  }\r\n\r\n  /**\r\n   * List of row objects that should be\r\n   * represented as selected in the grid.\r\n   * Default value: `[]`\r\n   */\r\n  @Input() selected: any[] = [];\r\n\r\n  /**\r\n   * Enable vertical scrollbars\r\n   */\r\n  @Input() scrollbarV: boolean = false;\r\n\r\n  /**\r\n   * Enable horz scrollbars\r\n   */\r\n  @Input() scrollbarH: boolean = false;\r\n\r\n  /**\r\n   * The row height; which is necessary\r\n   * to calculate the height for the lazy rendering.\r\n   */\r\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number) = 30;\r\n\r\n  /**\r\n   * Type of column width distribution formula.\r\n   * Example: flex, force, standard\r\n   */\r\n  @Input() columnMode: ColumnMode = ColumnMode.standard;\r\n\r\n  /**\r\n   * The minimum header height in pixels.\r\n   * Pass a falsey for no header\r\n   */\r\n  @Input() headerHeight: any = 30;\r\n\r\n  /**\r\n   * The minimum footer height in pixels.\r\n   * Pass falsey for no footer\r\n   */\r\n  @Input() footerHeight: number = 0;\r\n\r\n  /**\r\n   * If the table should use external paging\r\n   * otherwise its assumed that all data is preloaded.\r\n   */\r\n  @Input() externalPaging: boolean = false;\r\n\r\n  /**\r\n   * If the table should use external sorting or\r\n   * the built-in basic sorting.\r\n   */\r\n  @Input() externalSorting: boolean = false;\r\n\r\n  /**\r\n   * The page size to be shown.\r\n   * Default value: `undefined`\r\n   */\r\n  @Input() set limit(val: number | undefined) {\r\n    this._limit = val;\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Gets the limit.\r\n   */\r\n  get limit(): number | undefined {\r\n    return this._limit;\r\n  }\r\n\r\n  /**\r\n   * The total count of all rows.\r\n   * Default value: `0`\r\n   */\r\n  @Input() set count(val: number) {\r\n    this._count = val;\r\n\r\n    // recalculate sizes/etc\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Gets the count.\r\n   */\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n\r\n  /**\r\n   * The current offset ( page - 1 ) shown.\r\n   * Default value: `0`\r\n   */\r\n  @Input() set offset(val: number) {\r\n    this._offset = val;\r\n  }\r\n  get offset(): number {\r\n    return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\r\n  }\r\n\r\n  /**\r\n   * Show the linear loading bar.\r\n   * Default value: `false`\r\n   */\r\n  @Input() loadingIndicator: boolean = false;\r\n\r\n  /**\r\n   * Type of row selection. Options are:\r\n   *\r\n   *  - `single`\r\n   *  - `multi`\r\n   *  - `checkbox`\r\n   *  - `multiClick`\r\n   *  - `cell`\r\n   *\r\n   * For no selection pass a `falsey`.\r\n   * Default value: `undefined`\r\n   */\r\n  @Input() selectionType: SelectionType;\r\n\r\n  /**\r\n   * Enable/Disable ability to re-order columns\r\n   * by dragging them.\r\n   */\r\n  @Input() reorderable: boolean = true;\r\n\r\n  /**\r\n   * Swap columns on re-order columns or\r\n   * move them.\r\n   */\r\n  @Input() swapColumns: boolean = true;\r\n\r\n  /**\r\n   * The type of sorting\r\n   */\r\n  @Input() sortType: SortType = SortType.single;\r\n\r\n  /**\r\n   * Array of sorted columns by property and type.\r\n   * Default value: `[]`\r\n   */\r\n  @Input() sorts: any[] = [];\r\n\r\n  /**\r\n   * Css class overrides\r\n   */\r\n  @Input() cssClasses: any = {\r\n    sortAscending: 'datatable-icon-up',\r\n    sortDescending: 'datatable-icon-down',\r\n    pagerLeftArrow: 'datatable-icon-left',\r\n    pagerRightArrow: 'datatable-icon-right',\r\n    pagerPrevious: 'datatable-icon-prev',\r\n    pagerNext: 'datatable-icon-skip'\r\n  };\r\n\r\n  /**\r\n   * Message overrides for localization\r\n   *\r\n   * emptyMessage     [default] = 'No data to display'\r\n   * totalMessage     [default] = 'total'\r\n   * selectedMessage  [default] = 'selected'\r\n   */\r\n  @Input() messages: any = {\r\n    // Message to show when array is presented\r\n    // but contains no values\r\n    emptyMessage: 'No data to display',\r\n\r\n    // Footer total message\r\n    totalMessage: 'total',\r\n\r\n    // Footer selected message\r\n    selectedMessage: 'selected'\r\n  };\r\n\r\n  /**\r\n   * Row specific classes.\r\n   * Similar implementation to ngClass.\r\n   *\r\n   *  [rowClass]=\"'first second'\"\r\n   *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\r\n   */\r\n  @Input() rowClass: any;\r\n\r\n  /**\r\n   * A boolean/function you can use to check whether you want\r\n   * to select a particular row based on a criteria. Example:\r\n   *\r\n   *    (selection) => {\r\n   *      return selection !== 'Ethel Price';\r\n   *    }\r\n   */\r\n  @Input() selectCheck: any;\r\n\r\n  /**\r\n   * A function you can use to check whether you want\r\n   * to show the checkbox for a particular row based on a criteria. Example:\r\n   *\r\n   *    (row, column, value) => {\r\n   *      return row.name !== 'Ethel Price';\r\n   *    }\r\n   */\r\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean;\r\n\r\n  /**\r\n   * A boolean you can use to set the detault behaviour of rows and groups\r\n   * whether they will start expanded or not. If ommited the default is NOT expanded.\r\n   *\r\n   */\r\n  @Input() groupExpansionDefault: boolean = false;\r\n\r\n  /**\r\n   * Property to which you can use for custom tracking of rows.\r\n   * Example: 'name'\r\n   */\r\n  @Input() trackByProp: string;\r\n\r\n  /**\r\n   * Property to which you can use for determining select all\r\n   * rows on current page or not.\r\n   *\r\n   * @memberOf DatatableComponent\r\n   */\r\n  @Input() selectAllRowsOnPage = false;\r\n\r\n  /**\r\n   * A flag for row virtualization on / off\r\n   */\r\n  @Input() virtualization: boolean = true;\r\n\r\n  /**\r\n   * Tree from relation\r\n   */\r\n  @Input() treeFromRelation: string;\r\n\r\n  /**\r\n   * Tree to relation\r\n   */\r\n  @Input() treeToRelation: string;\r\n\r\n  /**\r\n   * A flag for switching summary row on / off\r\n   */\r\n  @Input() summaryRow: boolean = false;\r\n\r\n  /**\r\n   * A height of summary row\r\n   */\r\n  @Input() summaryHeight: number = 30;\r\n\r\n  /**\r\n   * A property holds a summary row position: top/bottom\r\n   */\r\n  @Input() summaryPosition: string = 'top';\r\n\r\n  /**\r\n   * Body was scrolled typically in a `scrollbarV:true` scenario.\r\n   */\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * A cell or row was focused via keyboard or mouse click.\r\n   */\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * A cell or row was selected.\r\n   */\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Column sort was invoked.\r\n   */\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * The table was paged either triggered by the pager or the body scroll.\r\n   */\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Columns were re-ordered.\r\n   */\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Column was resized.\r\n   */\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * The context menu was invoked on the table.\r\n   * type indicates whether the header or the body was clicked.\r\n   * content contains either the column or the row that was clicked.\r\n   */\r\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent; type: ContextmenuType; content: any }>(false);\r\n\r\n  /**\r\n   * A row was expanded ot collapsed for tree\r\n   */\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * CSS class applied if the header height if fixed height.\r\n   */\r\n  @HostBinding('class.fixed-header')\r\n  get isFixedHeader(): boolean {\r\n    const headerHeight: number | string = this.headerHeight;\r\n    return typeof headerHeight === 'string' ? <string>headerHeight !== 'auto' : true;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to the root element if\r\n   * the row heights are fixed heights.\r\n   */\r\n  @HostBinding('class.fixed-row')\r\n  get isFixedRow(): boolean {\r\n    return this.rowHeight !== 'auto';\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element if\r\n   * vertical scrolling is enabled.\r\n   */\r\n  @HostBinding('class.scroll-vertical')\r\n  get isVertScroll(): boolean {\r\n    return this.scrollbarV;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element if\r\n   * virtualization is enabled.\r\n   */\r\n  @HostBinding('class.virtualized')\r\n  get isVirtualized(): boolean {\r\n    return this.virtualization;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to the root element\r\n   * if the horziontal scrolling is enabled.\r\n   */\r\n  @HostBinding('class.scroll-horz')\r\n  get isHorScroll(): boolean {\r\n    return this.scrollbarH;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root element is selectable.\r\n   */\r\n  @HostBinding('class.selectable')\r\n  get isSelectable(): boolean {\r\n    return this.selectionType !== undefined;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root is checkbox selection.\r\n   */\r\n  @HostBinding('class.checkbox-selection')\r\n  get isCheckboxSelection(): boolean {\r\n    return this.selectionType === SelectionType.checkbox;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root if cell selection.\r\n   */\r\n  @HostBinding('class.cell-selection')\r\n  get isCellSelection(): boolean {\r\n    return this.selectionType === SelectionType.cell;\r\n  }\r\n\r\n  /**\r\n   * CSS class applied to root if single select.\r\n   */\r\n  @HostBinding('class.single-selection')\r\n  get isSingleSelection(): boolean {\r\n    return this.selectionType === SelectionType.single;\r\n  }\r\n\r\n  /**\r\n   * CSS class added to root element if mulit select\r\n   */\r\n  @HostBinding('class.multi-selection')\r\n  get isMultiSelection(): boolean {\r\n    return this.selectionType === SelectionType.multi;\r\n  }\r\n\r\n  /**\r\n   * CSS class added to root element if mulit click select\r\n   */\r\n  @HostBinding('class.multi-click-selection')\r\n  get isMultiClickSelection(): boolean {\r\n    return this.selectionType === SelectionType.multiClick;\r\n  }\r\n\r\n  /**\r\n   * Column templates gathered from `ContentChildren`\r\n   * if described in your markup.\r\n   */\r\n  @ContentChildren(DataTableColumnDirective)\r\n  set columnTemplates(val: QueryList<DataTableColumnDirective>) {\r\n    this._columnTemplates = val;\r\n    this.translateColumns(val);\r\n  }\r\n\r\n  /**\r\n   * Returns the column templates.\r\n   */\r\n  get columnTemplates(): QueryList<DataTableColumnDirective> {\r\n    return this._columnTemplates;\r\n  }\r\n\r\n  /**\r\n   * Row Detail templates gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableRowDetailDirective, { static: false })\r\n  rowDetail: DatatableRowDetailDirective;\r\n\r\n  /**\r\n   * Group Header templates gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableGroupHeaderDirective, { static: false })\r\n  groupHeader: DatatableGroupHeaderDirective;\r\n\r\n  /**\r\n   * Footer template gathered from the ContentChild\r\n   */\r\n  @ContentChild(DatatableFooterDirective, { static: false })\r\n  footer: DatatableFooterDirective;\r\n\r\n  /**\r\n   * Reference to the body component for manually\r\n   * invoking functions on the body.\r\n   */\r\n  @ViewChild(DataTableBodyComponent, { static: false })\r\n  bodyComponent: DataTableBodyComponent;\r\n\r\n  /**\r\n   * Reference to the header component for manually\r\n   * invoking functions on the header.\r\n   *\r\n   * @memberOf DatatableComponent\r\n   */\r\n  @ViewChild(DataTableHeaderComponent, { static: false })\r\n  headerComponent: DataTableHeaderComponent;\r\n\r\n  /**\r\n   * Returns if all rows are selected.\r\n   */\r\n  get allRowsSelected(): boolean {\r\n    let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\r\n\r\n    if (this.selectAllRowsOnPage) {\r\n      const indexes = this.bodyComponent.indexes;\r\n      const rowsOnPage = indexes.last - indexes.first;\r\n      allRowsSelected = this.selected.length === rowsOnPage;\r\n    }\r\n\r\n    return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\r\n  }\r\n\r\n  element: HTMLElement;\r\n  _innerWidth: number;\r\n  pageSize: number;\r\n  bodyHeight: number;\r\n  rowCount: number = 0;\r\n  rowDiffer: KeyValueDiffer<{}, {}>;\r\n\r\n  _offsetX = new BehaviorSubject(0);\r\n  _limit: number | undefined;\r\n  _count: number = 0;\r\n  _offset: number = 0;\r\n  _rows: any[];\r\n  _groupRowsBy: string;\r\n  _internalRows: any[];\r\n  _internalColumns: TableColumn[];\r\n  _columns: TableColumn[];\r\n  _columnTemplates: QueryList<DataTableColumnDirective>;\r\n  _subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\r\n    @SkipSelf() private dimensionsHelper: DimensionsHelper,\r\n    private cd: ChangeDetectorRef,\r\n    element: ElementRef,\r\n    differs: KeyValueDiffers,\r\n    private columnChangesService: ColumnChangesService,\r\n    @Optional() @Inject('configuration') private configuration: INgxDatatableConfig\r\n  ) {\r\n    // get ref to elm for measuring\r\n    this.element = element.nativeElement;\r\n    this.rowDiffer = differs.find({}).create();\r\n\r\n    // apply global settings from Module.forRoot\r\n    if (this.configuration && this.configuration.messages) {\r\n      this.messages = { ...this.configuration.messages };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after data-bound\r\n   * properties of a directive are initialized.\r\n   */\r\n  ngOnInit(): void {\r\n    // need to call this immediatly to size\r\n    // if the table is hidden the visibility\r\n    // listener will invoke this itself upon show\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after a component's\r\n   * view has been fully initialized.\r\n   */\r\n  ngAfterViewInit(): void {\r\n    if (!this.externalSorting) {\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // this has to be done to prevent the change detection\r\n    // tree from freaking out because we are readjusting\r\n    if (typeof requestAnimationFrame === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      this.recalculate();\r\n\r\n      // emit page for virtual server-side kickoff\r\n      if (this.externalPaging && this.scrollbarV) {\r\n        this.page.emit({\r\n          count: this.count,\r\n          pageSize: this.pageSize,\r\n          limit: this.limit,\r\n          offset: 0\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook that is called after a component's\r\n   * content has been fully initialized.\r\n   */\r\n  ngAfterContentInit() {\r\n    this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\r\n    this.listenForColumnInputChanges();\r\n  }\r\n\r\n  /**\r\n   * This will be used when displaying or selecting rows.\r\n   * when tracking/comparing them, we'll use the value of this fn,\r\n   *\r\n   * (`fn(x) === fn(y)` instead of `x === y`)\r\n   */\r\n  @Input() rowIdentity: (x: any) => any = (x: any) => {\r\n    if (this._groupRowsBy) {\r\n      // each group in groupedRows are stored as {key, value: [rows]},\r\n      // where key is the groupRowsBy index\r\n      return x.key;\r\n    } else {\r\n      return x;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Translates the templates to the column objects\r\n   */\r\n  translateColumns(val: any) {\r\n    if (val) {\r\n      const arr = val.toArray();\r\n      if (arr.length) {\r\n        this._internalColumns = translateTemplates(arr);\r\n        setColumnDefaults(this._internalColumns);\r\n        this.recalculateColumns();\r\n        this.sortInternalRows();\r\n        this.cd.markForCheck();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a map with the data grouped by the user choice of grouping index\r\n   *\r\n   * @param originalArray the original array passed via parameter\r\n   * @param groupByIndex  the index of the column to group the data by\r\n   */\r\n  groupArrayBy(originalArray: any, groupBy: any) {\r\n    // create a map to hold groups with their corresponding results\r\n    const map = new Map();\r\n    let i: number = 0;\r\n\r\n    originalArray.forEach((item: any) => {\r\n      const key = item[groupBy];\r\n      if (!map.has(key)) {\r\n        map.set(key, [item]);\r\n      } else {\r\n        map.get(key).push(item);\r\n      }\r\n      i++;\r\n    });\r\n\r\n    const addGroup = (key: any, value: any) => {\r\n      return { key, value };\r\n    };\r\n\r\n    // convert map back to a simple array of objects\r\n    return Array.from(map, x => addGroup(x[0], x[1]));\r\n  }\r\n\r\n  /*\r\n   * Lifecycle hook that is called when Angular dirty checks a directive.\r\n   */\r\n  ngDoCheck(): void {\r\n    if (this.rowDiffer.diff(this.rows)) {\r\n      if (!this.externalSorting) {\r\n        this.sortInternalRows();\r\n      } else {\r\n        this._internalRows = [...this.rows];\r\n      }\r\n\r\n      // auto group by parent on new update\r\n      this._internalRows = groupRowsByParents(\r\n        this._internalRows,\r\n        optionalGetterForProp(this.treeFromRelation),\r\n        optionalGetterForProp(this.treeToRelation)\r\n      );\r\n\r\n      this.recalculatePages();\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalc's the sizes of the grid.\r\n   *\r\n   * Updated automatically on changes to:\r\n   *\r\n   *  - Columns\r\n   *  - Rows\r\n   *  - Paging related\r\n   *\r\n   * Also can be manually invoked or upon window resize.\r\n   */\r\n  recalculate(): void {\r\n    this.recalculateDims();\r\n    this.recalculateColumns();\r\n  }\r\n\r\n  /**\r\n   * Window resize handler to update sizes.\r\n   */\r\n  @HostListener('window:resize')\r\n  @throttleable(5)\r\n  onWindowResize(): void {\r\n    this.recalculate();\r\n  }\r\n\r\n  /**\r\n   * Recalulcates the column widths based on column width\r\n   * distribution mode and scrollbar offsets.\r\n   */\r\n  recalculateColumns(\r\n    columns: any[] = this._internalColumns,\r\n    forceIdx: number = -1,\r\n    allowBleed: boolean = this.scrollbarH\r\n  ): any[] | undefined {\r\n    if (!columns) return undefined;\r\n\r\n    let width = this._innerWidth;\r\n    if (this.scrollbarV) {\r\n      width = width - this.scrollbarHelper.width;\r\n    }\r\n\r\n    if (this.columnMode === ColumnMode.force) {\r\n      forceFillColumnWidths(columns, width, forceIdx, allowBleed);\r\n    } else if (this.columnMode === ColumnMode.flex) {\r\n      adjustColumnWidths(columns, width);\r\n    }\r\n\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Recalculates the dimensions of the table size.\r\n   * Internally calls the page size and row count calcs too.\r\n   *\r\n   */\r\n  recalculateDims(): void {\r\n    const dims = this.dimensionsHelper.getDimensions(this.element);\r\n    this._innerWidth = Math.floor(dims.width);\r\n\r\n    if (this.scrollbarV) {\r\n      let height = dims.height;\r\n      if (this.headerHeight) height = height - this.headerHeight;\r\n      if (this.footerHeight) height = height - this.footerHeight;\r\n      this.bodyHeight = height;\r\n    }\r\n\r\n    this.recalculatePages();\r\n  }\r\n\r\n  /**\r\n   * Recalculates the pages after a update.\r\n   */\r\n  recalculatePages(): void {\r\n    this.pageSize = this.calcPageSize();\r\n    this.rowCount = this.calcRowCount();\r\n  }\r\n\r\n  /**\r\n   * Body triggered a page event.\r\n   */\r\n  onBodyPage({ offset }: any): void {\r\n    // Avoid pagination caming from body events like scroll when the table\r\n    // has no virtualization and the external paging is enable.\r\n    // This means, let's the developer handle pagination by my him(her) self\r\n    if (this.externalPaging && !this.virtualization) {\r\n      return;\r\n    }\r\n\r\n    this.offset = offset;\r\n\r\n    this.page.emit({\r\n      count: this.count,\r\n      pageSize: this.pageSize,\r\n      limit: this.limit,\r\n      offset: this.offset\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The body triggered a scroll event.\r\n   */\r\n  onBodyScroll(event: MouseEvent): void {\r\n    this._offsetX.next(event.offsetX);\r\n    this.scroll.emit(event);\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * The footer triggered a page event.\r\n   */\r\n  onFooterPage(event: any) {\r\n    this.offset = event.page - 1;\r\n    this.bodyComponent.updateOffsetY(this.offset);\r\n\r\n    this.page.emit({\r\n      count: this.count,\r\n      pageSize: this.pageSize,\r\n      limit: this.limit,\r\n      offset: this.offset\r\n    });\r\n\r\n    if (this.selectAllRowsOnPage) {\r\n      this.selected = [];\r\n      this.select.emit({\r\n        selected: this.selected\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalculates the sizes of the page\r\n   */\r\n  calcPageSize(val: any[] = this.rows): number {\r\n    // Keep the page size constant even if the row has been expanded.\r\n    // This is because an expanded row is still considered to be a child of\r\n    // the original row.  Hence calculation would use rowHeight only.\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const size = Math.ceil(this.bodyHeight / (this.rowHeight as number));\r\n      return Math.max(size, 0);\r\n    }\r\n\r\n    // if limit is passed, we are paging\r\n    if (this.limit !== undefined) {\r\n      return this.limit;\r\n    }\r\n\r\n    // otherwise use row length\r\n    if (val) {\r\n      return val.length;\r\n    }\r\n\r\n    // other empty :(\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Calculates the row count.\r\n   */\r\n  calcRowCount(val: any[] = this.rows): number {\r\n    if (!this.externalPaging) {\r\n      if (!val) return 0;\r\n\r\n      if (this.groupedRows) {\r\n        return this.groupedRows.length;\r\n      } else if (this.treeFromRelation != null && this.treeToRelation != null) {\r\n        return this._internalRows.length;\r\n      } else {\r\n        return val.length;\r\n      }\r\n    }\r\n\r\n    return this.count;\r\n  }\r\n\r\n  /**\r\n   * The header triggered a contextmenu event.\r\n   */\r\n  onColumnContextmenu({ event, column }: any): void {\r\n    this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\r\n  }\r\n\r\n  /**\r\n   * The body triggered a contextmenu event.\r\n   */\r\n  onRowContextmenu({ event, row }: any): void {\r\n    this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column resize event.\r\n   */\r\n  onColumnResize({ column, newValue }: any): void {\r\n    /* Safari/iOS 10.2 workaround */\r\n    if (column === undefined) {\r\n      return;\r\n    }\r\n\r\n    let idx: number;\r\n    const cols = this._internalColumns.map((c, i) => {\r\n      c = { ...c };\r\n\r\n      if (c.$$id === column.$$id) {\r\n        idx = i;\r\n        c.width = newValue;\r\n\r\n        // set this so we can force the column\r\n        // width distribution to be to this value\r\n        c.$$oldWidth = newValue;\r\n      }\r\n\r\n      return c;\r\n    });\r\n\r\n    this.recalculateColumns(cols, idx);\r\n    this._internalColumns = cols;\r\n\r\n    this.resize.emit({\r\n      column,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column re-order event.\r\n   */\r\n  onColumnReorder({ column, newValue, prevValue }: any): void {\r\n    const cols = this._internalColumns.map(c => {\r\n      return { ...c };\r\n    });\r\n\r\n    if (this.swapColumns) {\r\n      const prevCol = cols[newValue];\r\n      cols[newValue] = column;\r\n      cols[prevValue] = prevCol;\r\n    } else {\r\n      if (newValue > prevValue) {\r\n        const movedCol = cols[prevValue];\r\n        for (let i = prevValue; i < newValue; i++) {\r\n          cols[i] = cols[i + 1];\r\n        }\r\n        cols[newValue] = movedCol;\r\n      } else {\r\n        const movedCol = cols[prevValue];\r\n        for (let i = prevValue; i > newValue; i--) {\r\n          cols[i] = cols[i - 1];\r\n        }\r\n        cols[newValue] = movedCol;\r\n      }\r\n    }\r\n\r\n    this._internalColumns = cols;\r\n\r\n    this.reorder.emit({\r\n      column,\r\n      newValue,\r\n      prevValue\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The header triggered a column sort event.\r\n   */\r\n  onColumnSort(event: any): void {\r\n    // clean selected rows\r\n    if (this.selectAllRowsOnPage) {\r\n      this.selected = [];\r\n      this.select.emit({\r\n        selected: this.selected\r\n      });\r\n    }\r\n\r\n    this.sorts = event.sorts;\r\n\r\n    // this could be optimized better since it will resort\r\n    // the rows again on the 'push' detection...\r\n    if (this.externalSorting === false) {\r\n      // don't use normal setter so we don't resort\r\n      this.sortInternalRows();\r\n    }\r\n\r\n    // auto group by parent on new update\r\n    this._internalRows = groupRowsByParents(\r\n      this._internalRows,\r\n      optionalGetterForProp(this.treeFromRelation),\r\n      optionalGetterForProp(this.treeToRelation)\r\n    );\r\n\r\n    // Always go to first page when sorting to see the newly sorted data\r\n    this.offset = 0;\r\n    this.bodyComponent.updateOffsetY(this.offset);\r\n    this.sort.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Toggle all row selection\r\n   */\r\n  onHeaderSelect(event: any): void {\r\n    if (this.selectAllRowsOnPage) {\r\n      // before we splice, chk if we currently have all selected\r\n      const first = this.bodyComponent.indexes.first;\r\n      const last = this.bodyComponent.indexes.last;\r\n      const allSelected = this.selected.length === last - first;\r\n\r\n      // remove all existing either way\r\n      this.selected = [];\r\n\r\n      // do the opposite here\r\n      if (!allSelected) {\r\n        this.selected.push(...this._internalRows.slice(first, last));\r\n      }\r\n    } else {\r\n      // before we splice, chk if we currently have all selected\r\n      const allSelected = this.selected.length === this.rows.length;\r\n      // remove all existing either way\r\n      this.selected = [];\r\n      // do the opposite here\r\n      if (!allSelected) {\r\n        this.selected.push(...this.rows);\r\n      }\r\n    }\r\n\r\n    this.select.emit({\r\n      selected: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A row was selected from body\r\n   */\r\n  onBodySelect(event: any): void {\r\n    this.select.emit(event);\r\n  }\r\n\r\n  /**\r\n   * A row was expanded or collapsed for tree\r\n   */\r\n  onTreeAction(event: any) {\r\n    const row = event.row;\r\n    // TODO: For duplicated items this will not work\r\n    const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\r\n    this.treeAction.emit({ row, rowIndex });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\r\n  }\r\n\r\n  /**\r\n   * listen for changes to input bindings of all DataTableColumnDirective and\r\n   * trigger the columnTemplates.changes observable to emit\r\n   */\r\n  private listenForColumnInputChanges(): void {\r\n    this._subscriptions.push(\r\n      this.columnChangesService.columnInputChanges$.subscribe(() => {\r\n        if (this.columnTemplates) {\r\n          this.columnTemplates.notifyOnChanges();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private sortInternalRows(): void {\r\n    this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  HostBinding,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\nimport { SortType } from '../../types/sort.type';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { TableColumn } from '../../types/table-column.type';\r\nimport { nextSortDir } from '../../utils/sort';\r\nimport { SortDirection } from '../../types/sort-direction.type';\r\n\r\n@Component({\r\n  selector: 'datatable-header-cell',\r\n  template: `\r\n    <div class=\"datatable-header-cell-template-wrap\">\r\n      <ng-template\r\n        *ngIf=\"isTarget\"\r\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\r\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\r\n      >\r\n      </ng-template>\r\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\r\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\r\n      </label>\r\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\r\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\r\n      </span>\r\n      <ng-template\r\n        *ngIf=\"column.headerTemplate\"\r\n        [ngTemplateOutlet]=\"column.headerTemplate\"\r\n        [ngTemplateOutletContext]=\"cellContext\"\r\n      >\r\n      </ng-template>\r\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-header-cell'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableHeaderCellComponent {\r\n  @Input() sortType: SortType;\r\n  @Input() sortAscendingIcon: string;\r\n  @Input() sortDescendingIcon: string;\r\n\r\n  @Input() isTarget: boolean;\r\n  @Input() targetMarkerTemplate: any;\r\n  @Input() targetMarkerContext: any;\r\n\r\n  _allRowsSelected: boolean;\r\n\r\n  @Input() set allRowsSelected(value) {\r\n    this._allRowsSelected = value;\r\n    this.cellContext.allRowsSelected = value;\r\n  }\r\n  get allRowsSelected() {\r\n    return this._allRowsSelected;\r\n  }\r\n\r\n  @Input() selectionType: SelectionType;\r\n\r\n  @Input() set column(column: TableColumn) {\r\n    this._column = column;\r\n    this.cellContext.column = column;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  headerHeight: number;\r\n\r\n  @Input() set sorts(val: any[]) {\r\n    this._sorts = val;\r\n    this.sortDir = this.calcSortDir(val);\r\n    this.cellContext.sortDir = this.sortDir;\r\n    this.sortClass = this.calcSortClass(this.sortDir);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get sorts(): any[] {\r\n    return this._sorts;\r\n  }\r\n\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\r\n\r\n  @HostBinding('class')\r\n  get columnCssClasses(): any {\r\n    let cls = 'datatable-header-cell';\r\n\r\n    if (this.column.sortable) cls += ' sortable';\r\n    if (this.column.resizeable) cls += ' resizeable';\r\n    if (this.column.headerClass) {\r\n      if (typeof this.column.headerClass === 'string') {\r\n        cls += ' ' + this.column.headerClass;\r\n      } else if (typeof this.column.headerClass === 'function') {\r\n        const res = this.column.headerClass({\r\n          column: this.column\r\n        });\r\n\r\n        if (typeof res === 'string') {\r\n          cls += res;\r\n        } else if (typeof res === 'object') {\r\n          const keys = Object.keys(res);\r\n          for (const k of keys) {\r\n            if (res[k] === true) cls += ` ${k}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const sortDir = this.sortDir;\r\n    if (sortDir) {\r\n      cls += ` sort-active sort-${sortDir}`;\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('attr.title')\r\n  get name(): string {\r\n    // guaranteed to have a value by setColumnDefaults() in column-helper.ts\r\n    return this.column.headerTemplate === undefined ? this.column.name : undefined;\r\n  }\r\n\r\n  @HostBinding('style.minWidth.px')\r\n  get minWidth(): number {\r\n    return this.column.minWidth;\r\n  }\r\n\r\n  @HostBinding('style.maxWidth.px')\r\n  get maxWidth(): number {\r\n    return this.column.maxWidth;\r\n  }\r\n\r\n  @HostBinding('style.width.px')\r\n  get width(): number {\r\n    return this.column.width;\r\n  }\r\n\r\n  get isCheckboxable(): boolean {\r\n    return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\r\n  }\r\n\r\n  sortFn = this.onSort.bind(this);\r\n  sortClass: string;\r\n  sortDir: SortDirection;\r\n  selectFn = this.select.emit.bind(this.select);\r\n\r\n  cellContext: any = {\r\n    column: this.column,\r\n    sortDir: this.sortDir,\r\n    sortFn: this.sortFn,\r\n    allRowsSelected: this.allRowsSelected,\r\n    selectFn: this.selectFn\r\n  };\r\n\r\n  private _column: TableColumn;\r\n  private _sorts: any[];\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onContextmenu($event: MouseEvent): void {\r\n    this.columnContextmenu.emit({ event: $event, column: this.column });\r\n  }\r\n\r\n  calcSortDir(sorts: any[]): any {\r\n    if (sorts && this.column) {\r\n      const sort = sorts.find((s: any) => {\r\n        return s.prop === this.column.prop;\r\n      });\r\n\r\n      if (sort) return sort.dir;\r\n    }\r\n  }\r\n\r\n  onSort(): void {\r\n    if (!this.column.sortable) return;\r\n\r\n    const newValue = nextSortDir(this.sortType, this.sortDir);\r\n    this.sort.emit({\r\n      column: this.column,\r\n      prevValue: this.sortDir,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  calcSortClass(sortDir: SortDirection): string {\r\n    if (sortDir === SortDirection.asc) {\r\n      return `sort-btn sort-asc ${this.sortAscendingIcon}`;\r\n    } else if (sortDir === SortDirection.desc) {\r\n      return `sort-btn sort-desc ${this.sortDescendingIcon}`;\r\n    } else {\r\n      return `sort-btn`;\r\n    }\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter, ChangeDetectionStrategy, Input, TemplateRef } from '@angular/core';\r\nimport { DatatableFooterDirective } from './footer.directive';\r\n@Component({\r\n  selector: 'datatable-footer',\r\n  template: `\r\n    <div\r\n      class=\"datatable-footer-inner\"\r\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\r\n      [style.height.px]=\"footerHeight\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"footerTemplate\"\r\n        [ngTemplateOutlet]=\"footerTemplate.template\"\r\n        [ngTemplateOutletContext]=\"{\r\n          rowCount: rowCount,\r\n          pageSize: pageSize,\r\n          selectedCount: selectedCount,\r\n          curPage: curPage,\r\n          offset: offset\r\n        }\"\r\n      >\r\n      </ng-template>\r\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\r\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\r\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\r\n      </div>\r\n      <datatable-pager\r\n        *ngIf=\"!footerTemplate\"\r\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\r\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\r\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\r\n        [pagerNextIcon]=\"pagerNextIcon\"\r\n        [page]=\"curPage\"\r\n        [size]=\"pageSize\"\r\n        [count]=\"rowCount\"\r\n        [hidden]=\"!isVisible\"\r\n        (change)=\"page.emit($event)\"\r\n      >\r\n      </datatable-pager>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-footer'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableFooterComponent {\r\n  @Input() footerHeight: number;\r\n  @Input() rowCount: number;\r\n  @Input() pageSize: number;\r\n  @Input() offset: number;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n  @Input() totalMessage: string;\r\n  @Input() footerTemplate: DatatableFooterDirective;\r\n\r\n  @Input() selectedCount: number = 0;\r\n  @Input() selectedMessage: string | boolean;\r\n\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n\r\n  get isVisible(): boolean {\r\n    return this.rowCount / this.pageSize > 1;\r\n  }\r\n\r\n  get curPage(): number {\r\n    return this.offset + 1;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-pager',\r\n  template: `\r\n    <ul class=\"pager\">\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\r\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\r\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li\r\n        role=\"button\"\r\n        [attr.aria-label]=\"'page ' + pg.number\"\r\n        class=\"pages\"\r\n        *ngFor=\"let pg of pages\"\r\n        [class.active]=\"pg.number === page\"\r\n      >\r\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\r\n          {{ pg.text }}\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\r\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\r\n          <i class=\"{{ pagerNextIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  `,\r\n  host: {\r\n    class: 'datatable-pager'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTablePagerComponent {\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input()\r\n  set size(val: number) {\r\n    this._size = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get size(): number {\r\n    return this._size;\r\n  }\r\n\r\n  @Input()\r\n  set count(val: number) {\r\n    this._count = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n\r\n  @Input()\r\n  set page(val: number) {\r\n    this._page = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  get totalPages(): number {\r\n    const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\r\n    return Math.max(count || 0, 1);\r\n  }\r\n\r\n  @Output() change: EventEmitter<any> = new EventEmitter();\r\n\r\n  _count: number = 0;\r\n  _page: number = 1;\r\n  _size: number = 0;\r\n  pages: any;\r\n\r\n  canPrevious(): boolean {\r\n    return this.page > 1;\r\n  }\r\n\r\n  canNext(): boolean {\r\n    return this.page < this.totalPages;\r\n  }\r\n\r\n  prevPage(): void {\r\n    this.selectPage(this.page - 1);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.selectPage(this.page + 1);\r\n  }\r\n\r\n  selectPage(page: number): void {\r\n    if (page > 0 && page <= this.totalPages && page !== this.page) {\r\n      this.page = page;\r\n\r\n      this.change.emit({\r\n        page\r\n      });\r\n    }\r\n  }\r\n\r\n  calcPages(page?: number): any[] {\r\n    const pages = [];\r\n    let startPage = 1;\r\n    let endPage = this.totalPages;\r\n    const maxSize = 5;\r\n    const isMaxSized = maxSize < this.totalPages;\r\n\r\n    page = page || this.page;\r\n\r\n    if (isMaxSized) {\r\n      startPage = page - Math.floor(maxSize / 2);\r\n      endPage = page + Math.floor(maxSize / 2);\r\n\r\n      if (startPage < 1) {\r\n        startPage = 1;\r\n        endPage = Math.min(startPage + maxSize - 1, this.totalPages);\r\n      } else if (endPage > this.totalPages) {\r\n        startPage = Math.max(this.totalPages - maxSize + 1, 1);\r\n        endPage = this.totalPages;\r\n      }\r\n    }\r\n\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      pages.push({\r\n        number: num,\r\n        text: <string>(<any>num)\r\n      });\r\n    }\r\n\r\n    return pages;\r\n  }\r\n}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-progress',\r\n  template: `\r\n    <div class=\"progress-linear\" role=\"progressbar\">\r\n      <div class=\"container\">\r\n        <div class=\"bar\"></div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProgressBarComponent {}\r\n","export enum Keys {\r\n  up = 38,\r\n  down = 40,\r\n  return = 13,\r\n  escape = 27,\r\n  left = 37,\r\n  right = 39\r\n}\r\n","import {\n  Component,\n  Input,\n  HostBinding,\n  ElementRef,\n  Output,\n  KeyValueDiffers,\n  KeyValueDiffer,\n  EventEmitter,\n  HostListener,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  DoCheck,\n  SkipSelf\n} from '@angular/core';\n\nimport { TreeStatus } from './body-cell.component';\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\nimport { Keys } from '../../utils/keys';\nimport { ScrollbarHelper } from '../../services/scrollbar-helper.service';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-body-row',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n      <a\n        *ngIf=\"row.detail && row.detail.length > 0 && colGroup.type === 'left'\"\n        href=\"javascript:void(0)\"\n        [class.datatable-icon-down]=\"!expanded\"\n        [class.datatable-icon-up]=\"expanded\"\n        title=\"Expand/Collapse Row\"\n        (click)=\"toggleExpandRow(row, $event)\"\n      >\n      </a>\n    </div>\n  `\n})\nexport class DataTableBodyRowComponent implements DoCheck {\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n    this.recalculateColumns(val);\n    this.buildStylesByGroup();\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input() set innerWidth(val: number) {\n    if (this._columns) {\n      const colByPin = columnsByPin(this._columns);\n      this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n    }\n\n    this._innerWidth = val;\n    this.recalculateColumns();\n    this.buildStylesByGroup();\n  }\n\n  get innerWidth(): number {\n    return this._innerWidth;\n  }\n\n  @Input() expanded: boolean;\n  @Input() rowClass: any;\n  @Input() row: any;\n  @Input() group: any;\n  @Input() isSelected: boolean;\n  @Input() rowIndex: number;\n  @Input() displayCheck: any;\n  @Input() treeStatus: TreeStatus = 'collapsed';\n  @Input() rowDetail: any;\n\n  @Input()\n  set offsetX(val: number) {\n    this._offsetX = val;\n    this.buildStylesByGroup();\n  }\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  @HostBinding('class')\n  get cssClass() {\n    let cls = 'datatable-body-row';\n    if (this.isSelected) {\n      cls += ' active';\n    }\n    if (this.rowIndex % 2 !== 0) {\n      cls += ' datatable-row-odd';\n    }\n    if (this.rowIndex % 2 === 0) {\n      cls += ' datatable-row-even';\n    }\n\n    if (this.rowClass) {\n      const res = this.rowClass(this.row);\n      if (typeof res === 'string') {\n        cls += ` ${res}`;\n      } else if (typeof res === 'object') {\n        const keys = Object.keys(res);\n        for (const k of keys) {\n          if (res[k] === true) {\n            cls += ` ${k}`;\n          }\n        }\n      }\n    }\n\n    return cls;\n  }\n\n  @HostBinding('style.height.px')\n  @Input()\n  rowHeight: number;\n\n  @HostBinding('style.width.px')\n  get columnsTotalWidths(): string {\n    return this._columnGroupWidths.total;\n  }\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  _element: any;\n  _columnGroupWidths: any;\n  _columnsByPin: any;\n  _offsetX: number;\n  _columns: any[];\n  _innerWidth: number;\n  _groupStyles: { [prop: string]: {} } = {\n    left: {},\n    center: {},\n    right: {}\n  };\n\n  private _rowDiffer: KeyValueDiffer<{}, {}>;\n\n  constructor(\n    private differs: KeyValueDiffers,\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\n    private cd: ChangeDetectorRef,\n    element: ElementRef\n  ) {\n    this._element = element.nativeElement;\n    this._rowDiffer = differs.find({}).create();\n  }\n\n  ngDoCheck(): void {\n    if (this._rowDiffer.diff(this.row)) {\n      this.cd.markForCheck();\n    }\n  }\n\n  trackByGroups(index: number, colGroup: any): any {\n    return colGroup.type;\n  }\n\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  buildStylesByGroup() {\n    this._groupStyles.left = this.calcStylesByGroup('left');\n    this._groupStyles.center = this.calcStylesByGroup('center');\n    this._groupStyles.right = this.calcStylesByGroup('right');\n    this.cd.markForCheck();\n  }\n\n  calcStylesByGroup(group: string) {\n    const widths = this._columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'left') {\n      translateXY(styles, offsetX, 0);\n    } else if (group === 'right') {\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\n      const totalDiff = widths.total - bodyWidth;\n      const offsetDiff = totalDiff - offsetX;\n      const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n\n  onActivate(event: any, index: number): void {\n    event.cellIndex = index;\n    event.rowElement = this._element;\n    this.activate.emit(event);\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isTargetRow = event.target === this._element;\n\n    const isAction =\n      keyCode === Keys.return ||\n      keyCode === Keys.down ||\n      keyCode === Keys.up ||\n      keyCode === Keys.left ||\n      keyCode === Keys.right;\n\n    if (isAction && isTargetRow) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        rowElement: this._element\n      });\n    }\n  }\n\n  @HostListener('mouseenter', ['$event'])\n  onMouseenter(event: any): void {\n    this.activate.emit({\n      type: 'mouseenter',\n      event,\n      row: this.row,\n      rowElement: this._element\n    });\n  }\n\n  recalculateColumns(val: any[] = this.columns): void {\n    this._columns = val;\n    const colsByPin = columnsByPin(this._columns);\n    this._columnsByPin = columnsByPinArr(this._columns);\n    this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n  }\n\n  onTreeAction() {\n    this.treeAction.emit();\n  }\n\n  toggleExpandRow(row, event) {\n    if (this.rowDetail) {\n      this.rowDetail.toggleExpandRow(row);\n    }\n  }\n}\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  DoCheck,\r\n  ChangeDetectionStrategy,\r\n  KeyValueDiffer,\r\n  ChangeDetectorRef,\r\n  KeyValueDiffers\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\n\r\n@Component({\r\n  selector: 'datatable-row-wrapper',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\r\n      <ng-template\r\n        *ngIf=\"groupHeader && groupHeader.template\"\r\n        [ngTemplateOutlet]=\"groupHeader.template\"\r\n        [ngTemplateOutletContext]=\"groupContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)\">\r\n    </ng-content>\r\n    <div\r\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\r\n      [style.height.px]=\"detailRowHeight\"\r\n      class=\"datatable-row-detail\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"rowDetail && rowDetail.template\"\r\n        [ngTemplateOutlet]=\"rowDetail.template\"\r\n        [ngTemplateOutletContext]=\"rowContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-row-wrapper'\r\n  }\r\n})\r\nexport class DataTableRowWrapperComponent implements DoCheck {\r\n  @Input() innerWidth: number;\r\n  @Input() rowDetail: any;\r\n  @Input() groupHeader: any;\r\n  @Input() offsetX: number;\r\n  @Input() detailRowHeight: any;\r\n  @Input() row: any;\r\n  @Input() groupedRows: any;\r\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\r\n\r\n  @Input() set rowIndex(val: number) {\r\n    this._rowIndex = val;\r\n    this.rowContext.rowIndex = val;\r\n    this.groupContext.rowIndex = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowIndex(): number {\r\n    return this._rowIndex;\r\n  }\r\n\r\n  @Input() set expanded(val: boolean) {\r\n    this._expanded = val;\r\n    this.groupContext.expanded = val;\r\n    this.rowContext.expanded = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  groupContext: any = {\r\n    group: this.row,\r\n    expanded: this.expanded,\r\n    rowIndex: this.rowIndex\r\n  };\r\n\r\n  rowContext: any = {\r\n    row: this.row,\r\n    expanded: this.expanded,\r\n    rowIndex: this.rowIndex\r\n  };\r\n\r\n  private rowDiffer: KeyValueDiffer<{}, {}>;\r\n  private _expanded: boolean = false;\r\n  private _rowIndex: number;\r\n\r\n  constructor(private cd: ChangeDetectorRef, private differs: KeyValueDiffers) {\r\n    this.rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this.rowDiffer.diff(this.row)) {\r\n      this.rowContext.row = this.row;\r\n      this.groupContext.group = this.row;\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onContextmenu($event: MouseEvent): void {\r\n    this.rowContextmenu.emit({ event: $event, row: this.row });\r\n  }\r\n\r\n  getGroupHeaderStyle(): any {\r\n    const styles = {};\r\n\r\n    styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\r\n    styles['backface-visibility'] = 'hidden';\r\n    styles['width'] = this.innerWidth;\r\n\r\n    return styles;\r\n  }\r\n}\r\n","import {\n  Component,\n  Input,\n  PipeTransform,\n  HostBinding,\n  ViewChild,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy,\n  DoCheck,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { TableColumn } from '../../types/table-column.type';\nimport { MouseEvent, KeyboardEvent } from '../../events';\nimport { SortDirection } from '../../types/sort-direction.type';\nimport { Keys } from '../../utils/keys';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\n\nexport type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';\n\n@Component({\n  selector: 'datatable-body-cell',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <h4\n        *ngIf=\"\n          !column.icons &&\n          !column.iconCustomTooltipHtmlText &&\n          !column.actionButtonIcon &&\n          !column.cellTemplate &&\n          !column.selectOptions &&\n          (!column.editable || !(isEditable(column, row) | async))\n        \"\n        class=\"ice-data-table-row\"\n        iceCustomHtmlToolTip\n        [iceTooltipHtmlText]=\"getTooltipValue(value, row, column)\"\n        [showToolTipOnTextOverflow]=\"true\"\n        [showToolTip]=\"hasToShowToolTip(row, column)\"\n        [innerHTML]=\"value\"\n      ></h4>\n\n      <div *ngIf=\"column.icons as icons\" fxLayout=\"column\">\n        <mat-icon\n          *ngFor=\"let i of getIcons(row, icons)\"\n          [innerHTML]=\"i.icon\"\n          [matTooltip]=\"i.text\"\n          class=\"{{ i.class }} mat-icon material-icons ice-ml-10\"\n        ></mat-icon>\n      </div>\n\n      <mat-icon\n        *ngIf=\"\n          column.iconCustomTooltipHtmlText &&\n          column.prop &&\n          selectFieldValue(row, column.iconCustomTooltipHtmlText) as customHtml\n        \"\n        iceCustomHtmlToolTip\n        [iceTooltipHtmlText]=\"sanatizeHtml(customHtml)\"\n        [duration]=\"1500\"\n        class=\"material-icons\"\n        [ngClass]=\"column.prop && selectFieldValue(row, column.iconColor)\"\n        >priority_high</mat-icon\n      >\n\n      <mat-icon\n        *ngIf=\"column.prop && row[column.prop.toString() + 'InfoTooltip']\"\n        [matTooltip]=\"column.prop && row[column.prop.toString() + 'InfoTooltip']\"\n        class=\"mat-icon material-icons\"\n        >info</mat-icon\n      >\n\n      <mat-icon\n        *ngIf=\"column.prop && row[column.prop.toString() + 'Excluded']\"\n        [matTooltip]=\"column.prop && row[column.prop.toString() + 'Excluded']\"\n        class=\"mat-icon material-icons\"\n        >block</mat-icon\n      >\n\n      <button\n        *ngIf=\"column.actionButtonIcon && !(column.hideActionButton && column.hideActionButton(row) | async)\"\n        mat-icon-button\n        [matTooltip]=\"column.actionButtonTooltip\"\n        (click)=\"onClickRowActionButton($event, column, row)\"\n      >\n        <mat-icon class=\"mat-icon material-icons\">{{ column.actionButtonIcon }}</mat-icon>\n      </button>\n\n      <ice-datatable-row-select\n        style=\"margin-top: 18px\"\n        [options]=\"column.selectOptions\"\n        [ngClass]=\"column.cellClass\"\n        (update)=\"updateSelect(column, row, $event)\"\n        [value]=\"value || column.defaultValue\"\n        [selectDisabled]=\"column.disabled\"\n        *ngIf=\"column.selectOptions && !(column.hideIfEmpty && column.disabled && value === '')\"\n      ></ice-datatable-row-select>\n\n      <ng-container *ngIf=\"!column.selectOptions && (column.editable && isEditable(column, row) | async)\">\n        <mat-icon class=\"mat-icon material-icons\" *ngIf=\"!column.hideEditIcon\">edit</mat-icon>\n        <ice-editable-text\n          [ngClass]=\"column.cellClass\"\n          (update)=\"editField(column, row, $event)\"\n          [errorText]=\"selectFieldValue(row, column.errorMessageField)\"\n          [value]=\"value\"\n        >\n          {{ value }}\n        </ice-editable-text>\n      </ng-container>\n\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `\n})\nexport class DataTableBodyCellComponent implements DoCheck, OnDestroy {\n  @Input() displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;\n\n  @Input() set group(group: any) {\n    this._group = group;\n    this.cellContext.group = group;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get group() {\n    return this._group;\n  }\n\n  @Input() set rowHeight(val: number) {\n    this._rowHeight = val;\n    this.cellContext.rowHeight = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  @Input() set isSelected(val: boolean) {\n    this._isSelected = val;\n    this.cellContext.isSelected = val;\n    this.cd.markForCheck();\n  }\n\n  get isSelected(): boolean {\n    return this._isSelected;\n  }\n\n  @Input() set expanded(val: boolean) {\n    this._expanded = val;\n    this.cellContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() set rowIndex(val: number) {\n    this._rowIndex = val;\n    this.cellContext.rowIndex = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowIndex(): number {\n    return this._rowIndex;\n  }\n\n  @Input() set column(column: TableColumn) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  @Input() set row(row: any) {\n    this._row = row;\n    this.cellContext.row = row;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get row(): any {\n    return this._row;\n  }\n\n  @Input() set sorts(val: any[]) {\n    this._sorts = val;\n    this.calcSortDir = this.calcSortDir(val);\n  }\n\n  get sorts(): any[] {\n    return this._sorts;\n  }\n\n  @Input() set treeStatus(status: TreeStatus) {\n    if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n      this._treeStatus = 'collapsed';\n    } else {\n      this._treeStatus = status;\n    }\n    this.cellContext.treeStatus = this._treeStatus;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get treeStatus(): TreeStatus {\n    return this._treeStatus;\n  }\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild('cellTemplate', { read: ViewContainerRef, static: true })\n  cellTemplate: ViewContainerRef;\n\n  @HostBinding('class')\n  get columnCssClasses(): any {\n    let cls = 'datatable-body-cell';\n    if (this.column.cellClass) {\n      if (typeof this.column.cellClass === 'string') {\n        cls += ' ' + this.column.cellClass;\n      } else if (typeof this.column.cellClass === 'function') {\n        const res = this.column.cellClass({\n          row: this.row,\n          group: this.group,\n          column: this.column,\n          value: this.value,\n          rowHeight: this.rowHeight\n        });\n\n        if (typeof res === 'string') {\n          cls += res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n          for (const k of keys) {\n            if (res[k] === true) {\n              cls += ` ${k}`;\n            }\n          }\n        }\n      }\n    }\n    if (!this.sortDir) {\n      cls += ' sort-active';\n    }\n    if (this.isFocused) {\n      cls += ' active';\n    }\n    if (this.sortDir === SortDirection.asc) {\n      cls += ' sort-asc';\n    }\n    if (this.sortDir === SortDirection.desc) {\n      cls += ' sort-desc';\n    }\n\n    return cls;\n  }\n\n  @HostBinding('style.width.px')\n  get width(): number {\n    return this.column.width;\n  }\n\n  @HostBinding('style.minWidth.px')\n  get minWidth(): number {\n    return this.column.minWidth;\n  }\n\n  @HostBinding('style.maxWidth.px')\n  get maxWidth(): number {\n    return this.column.maxWidth;\n  }\n\n  @HostBinding('style.height')\n  get height(): string | number {\n    const height = this.rowHeight;\n    if (isNaN(height)) {\n      return height;\n    }\n    return height + 'px';\n  }\n  _isEditable: { [a: string]: Observable<boolean> } = {};\n  sanitizedValue: any;\n  value: any;\n  sortDir: SortDirection;\n  isFocused = false;\n  onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n  activateFn = this.activate.emit.bind(this.activate);\n\n  cellContext: any = {\n    onCheckboxChangeFn: this.onCheckboxChangeFn,\n    activateFn: this.activateFn,\n    row: this.row,\n    group: this.group,\n    value: this.value,\n    column: this.column,\n    rowHeight: this.rowHeight,\n    isSelected: this.isSelected,\n    rowIndex: this.rowIndex,\n    treeStatus: this.treeStatus,\n    onTreeAction: this.onTreeAction.bind(this)\n  };\n\n  private _isSelected: boolean;\n  private _sorts: any[];\n  private _column: TableColumn;\n  private _row: any;\n  private _group: any;\n  private _rowHeight: number;\n  private _rowIndex: number;\n  private _expanded: boolean;\n  private _element: any;\n  private _treeStatus: TreeStatus;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private sanitizer: DomSanitizer) {\n    this._element = element.nativeElement;\n  }\n\n  ngDoCheck(): void {\n    this.checkValueUpdates();\n  }\n\n  ngOnDestroy(): void {\n    if (this.cellTemplate) {\n      this.cellTemplate.clear();\n    }\n  }\n\n  checkValueUpdates(): void {\n    let value = '';\n\n    if (!this.row || !this.column) {\n      value = '';\n    } else {\n      const val = this.column.$$valueGetter(this.row, this.column.prop);\n      const userPipe: PipeTransform = this.column.pipe;\n\n      if (userPipe) {\n        value = userPipe.transform(val);\n      } else if (value !== undefined) {\n        value = val;\n      }\n    }\n\n    if (this.value !== value) {\n      this.value = value;\n      this.cellContext.value = value;\n      this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n      this.cd.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus(): void {\n    this.isFocused = true;\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    this.isFocused = false;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): void {\n    this.activate.emit({\n      type: 'click',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDblClick(event: MouseEvent): void {\n    this.activate.emit({\n      type: 'dblclick',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isTargetCell = event.target === this._element;\n\n    const isAction =\n      keyCode === Keys.return ||\n      keyCode === Keys.down ||\n      keyCode === Keys.up ||\n      keyCode === Keys.left ||\n      keyCode === Keys.right;\n\n    if (isAction && isTargetCell) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        group: this.group,\n        rowHeight: this.rowHeight,\n        column: this.column,\n        value: this.value,\n        cellElement: this._element\n      });\n    }\n  }\n\n  onCheckboxChange(event: any): void {\n    this.activate.emit({\n      type: 'checkbox',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element,\n      treeStatus: 'collapsed'\n    });\n  }\n\n  calcSortDir(sorts: any[]): any {\n    if (!sorts) {\n      return;\n    }\n\n    const sort = sorts.find((s: any) => {\n      return s.prop === this.column.prop;\n    });\n\n    if (sort) {\n      return sort.dir;\n    }\n  }\n\n  stripHtml(html: string): string {\n    if (!html.replace) {\n      return html;\n    }\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\n  }\n\n  onTreeAction() {\n    this.treeAction.emit(this.row);\n  }\n\n  calcLeftMargin(column: any, row: any) {\n    const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n    return column.isTreeColumn ? row.level * levelIndent : 0;\n  }\n\n  hasToShowToolTip(row, field) {\n    return row && field && field.tooltip && field.tooltip.length > 0;\n  }\n\n  getTooltipValue(value, row, field) {\n    if (row && field && field.tooltip && field.tooltip.length > 0) {\n      return row[`${field.tooltip}`];\n    }\n    return value;\n  }\n\n  getIcons(row, icons) {\n    if (row && icons) {\n      const iconsArray = icons.split('.');\n      return iconsArray.length > 1 && row[iconsArray[0]] ? row[iconsArray[0]][iconsArray[1]] || [] : row[icons] || [];\n    }\n    return [];\n  }\n\n  selectFieldValue(row, prop) {\n    if (row && prop) {\n      const propArray = prop.split('.');\n      return propArray.length > 1 && row[propArray[0]] ? row[propArray[0]][propArray[1]] : row[prop];\n    }\n    return ' ';\n  }\n\n  onClickRowActionButton(event, field, row) {\n    if (field && row) {\n      event.preventDefault();\n      event.stopPropagation();\n      field.action(row);\n    }\n  }\n\n  sanatizeHtml(html: string) {\n    return this.sanitizer.bypassSecurityTrustHtml(html) as string;\n  }\n\n  isEditable(field: any, row: any): Observable<boolean> {\n    if (field && row) {\n      if (!this._isEditable[field.prop + row.id]) {\n        this._isEditable[field.prop + row.id] = field.editable(row);\n      }\n      return this._isEditable[field.prop + row.id];\n    }\n    return of(false);\n  }\n\n  updateSelect(field, row: any, newValue: any) {\n    row[field.prop] = newValue;\n    if (field.onEdit) {\n      field.onEdit(row);\n    }\n  }\n\n  editField(field, row: any, newValue: any) {\n    field.onEdit({ ...row, [field.prop]: newValue });\n  }\n}\n","export function selectRows(selected: any[], row: any, comparefn: any) {\r\n  const selectedIndex = comparefn(row, selected);\r\n\r\n  if (selectedIndex > -1) {\r\n    selected.splice(selectedIndex, 1);\r\n  } else {\r\n    selected.push(row);\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport function selectRowsBetween(\r\n  selected: any[],\r\n  rows: any[],\r\n  index: number,\r\n  prevIndex: number,\r\n  comparefn: any\r\n): any[] {\r\n  const reverse = index < prevIndex;\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const row = rows[i];\r\n    const greater = i >= prevIndex && i <= index;\r\n    const lesser = i <= prevIndex && i >= index;\r\n\r\n    let range = { start: 0, end: 0 };\r\n    if (reverse) {\r\n      range = {\r\n        start: index,\r\n        end: prevIndex\r\n      };\r\n    } else {\r\n      range = {\r\n        start: prevIndex,\r\n        end: index + 1\r\n      };\r\n    }\r\n\r\n    if ((reverse && lesser) || (!reverse && greater)) {\r\n      // if in the positive range to be added to `selected`, and\r\n      // not already in the selected array, add it\r\n      if (i >= range.start && i <= range.end) {\r\n        selected.push(row);\r\n      }\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { selectRowsBetween, selectRows } from '../../utils/selection';\r\nimport { Keys } from '../../utils/keys';\r\n\r\nexport interface Model {\r\n  type: string;\r\n  event: MouseEvent | KeyboardEvent;\r\n  row: any;\r\n  rowElement: any;\r\n  cellElement: any;\r\n  cellIndex: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-selection',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableSelectionComponent {\r\n  @Input() rows: any[];\r\n  @Input() selected: any[];\r\n  @Input() selectEnabled: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() rowIdentity: any;\r\n  @Input() selectCheck: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n\r\n  prevIndex: number;\r\n\r\n  selectRow(event: KeyboardEvent | MouseEvent, index: number, row: any): void {\r\n    if (!this.selectEnabled) return;\r\n\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const multi = this.selectionType === SelectionType.multi;\r\n    const multiClick = this.selectionType === SelectionType.multiClick;\r\n    let selected: any[] = [];\r\n\r\n    if (multi || chkbox || multiClick) {\r\n      if (event.shiftKey) {\r\n        selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\r\n      } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\r\n        selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\r\n      } else {\r\n        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n      }\r\n    } else {\r\n      selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n    }\r\n\r\n    if (typeof this.selectCheck === 'function') {\r\n      selected = selected.filter(this.selectCheck.bind(this));\r\n    }\r\n\r\n    this.selected.splice(0, this.selected.length);\r\n    this.selected.push(...selected);\r\n\r\n    this.prevIndex = index;\r\n\r\n    this.select.emit({\r\n      selected\r\n    });\r\n  }\r\n\r\n  onActivate(model: Model, index: number): void {\r\n    const { type, event, row } = model;\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\r\n\r\n    if (select) {\r\n      this.selectRow(event, index, row);\r\n    } else if (type === 'keydown') {\r\n      if ((<KeyboardEvent>event).keyCode === Keys.return) {\r\n        this.selectRow(event, index, row);\r\n      } else {\r\n        this.onKeyboardFocus(model);\r\n      }\r\n    }\r\n    this.activate.emit(model);\r\n  }\r\n\r\n  onKeyboardFocus(model: Model): void {\r\n    const { keyCode } = <KeyboardEvent>model.event;\r\n    const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\r\n\r\n    if (shouldFocus) {\r\n      const isCellSelection = this.selectionType === SelectionType.cell;\r\n\r\n      if (!model.cellElement || !isCellSelection) {\r\n        this.focusRow(model.rowElement, keyCode);\r\n      } else if (isCellSelection) {\r\n        this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  focusRow(rowElement: any, keyCode: number): void {\r\n    const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n    if (nextRowElement) nextRowElement.focus();\r\n  }\r\n\r\n  getPrevNextRow(rowElement: any, keyCode: number): any {\r\n    const parentElement = rowElement.parentElement;\r\n\r\n    if (parentElement) {\r\n      let focusElement: HTMLElement;\r\n      if (keyCode === Keys.up) {\r\n        focusElement = parentElement.previousElementSibling;\r\n      } else if (keyCode === Keys.down) {\r\n        focusElement = parentElement.nextElementSibling;\r\n      }\r\n\r\n      if (focusElement && focusElement.children.length) {\r\n        return focusElement.children[0];\r\n      }\r\n    }\r\n  }\r\n\r\n  focusCell(cellElement: any, rowElement: any, keyCode: number, cellIndex: number): void {\r\n    let nextCellElement: HTMLElement;\r\n\r\n    if (keyCode === Keys.left) {\r\n      nextCellElement = cellElement.previousElementSibling;\r\n    } else if (keyCode === Keys.right) {\r\n      nextCellElement = cellElement.nextElementSibling;\r\n    } else if (keyCode === Keys.up || keyCode === Keys.down) {\r\n      const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n      if (nextRowElement) {\r\n        const children = nextRowElement.getElementsByClassName('datatable-body-cell');\r\n        if (children.length) nextCellElement = children[cellIndex];\r\n      }\r\n    }\r\n\r\n    if (nextCellElement) nextCellElement.focus();\r\n  }\r\n\r\n  getRowSelected(row: any): boolean {\r\n    return this.getRowSelectedIdx(row, this.selected) > -1;\r\n  }\r\n\r\n  getRowSelectedIdx(row: any, selected: any[]): number {\r\n    if (!selected || !selected.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return selected.findIndex(r => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, PipeTransform, TemplateRef } from '@angular/core';\r\n\r\nexport interface ISummaryColumn {\r\n  summaryFunc?: (cells: any[]) => any;\r\n  summaryTemplate?: TemplateRef<any>;\r\n\r\n  prop: string;\r\n  pipe?: PipeTransform;\r\n}\r\n\r\nfunction defaultSumFunc(cells: any[]): any {\r\n  const cellsWithValues = cells.filter(cell => !!cell);\r\n\r\n  if (!cellsWithValues.length) {\r\n    return null;\r\n  }\r\n  if (cellsWithValues.some(cell => typeof cell !== 'number')) {\r\n    return null;\r\n  }\r\n\r\n  return cellsWithValues.reduce((res, cell) => res + cell);\r\n}\r\n\r\nfunction noopSumFunc(cells: any[]): void {\r\n  return null;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-summary-row',\r\n  template: `\r\n    <datatable-body-row\r\n      *ngIf=\"summaryRow && _internalColumns\"\r\n      tabindex=\"-1\"\r\n      [innerWidth]=\"innerWidth\"\r\n      [offsetX]=\"offsetX\"\r\n      [columns]=\"_internalColumns\"\r\n      [rowHeight]=\"rowHeight\"\r\n      [row]=\"summaryRow\"\r\n      [rowIndex]=\"-1\"\r\n    >\r\n    </datatable-body-row>\r\n  `,\r\n  host: {\r\n    class: 'datatable-summary-row'\r\n  }\r\n})\r\nexport class DataTableSummaryRowComponent implements OnChanges {\r\n  @Input() rows: any[];\r\n  @Input() columns: ISummaryColumn[];\r\n\r\n  @Input() rowHeight: number;\r\n  @Input() offsetX: number;\r\n  @Input() innerWidth: number;\r\n\r\n  _internalColumns: ISummaryColumn[];\r\n  summaryRow: any = {};\r\n\r\n  ngOnChanges() {\r\n    if (!this.columns || !this.rows) {\r\n      return;\r\n    }\r\n    this.updateInternalColumns();\r\n    this.updateValues();\r\n  }\r\n\r\n  private updateInternalColumns() {\r\n    this._internalColumns = this.columns.map(col => ({\r\n      ...col,\r\n      cellTemplate: col.summaryTemplate\r\n    }));\r\n  }\r\n\r\n  private updateValues() {\r\n    this.summaryRow = {};\r\n\r\n    this.columns\r\n      .filter(col => !col.summaryTemplate)\r\n      .forEach(col => {\r\n        const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\r\n        const sumFunc = this.getSummaryFunction(col);\r\n\r\n        this.summaryRow[col.prop] = col.pipe\r\n          ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\r\n          : sumFunc(cellsFromSingleColumn);\r\n      });\r\n  }\r\n\r\n  private getSummaryFunction(column: ISummaryColumn): (a: any[]) => any {\r\n    if (column.summaryFunc === undefined) {\r\n      return defaultSumFunc;\r\n    } else if (column.summaryFunc === null) {\r\n      return noopSumFunc;\r\n    } else {\r\n      return column.summaryFunc;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ice-custom-tooltip',\n  templateUrl: './ice-custom-tooltip.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./ice-custom-tooltip.component.scss'],\n  host: {\n    class: 'ice-custom-tooltip'\n  }\n})\nexport class CustomToolTipComponent {\n  @Input() text: string;\n}\n","import { Overlay, OverlayPositionBuilder, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ComponentRef, Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { CustomToolTipComponent } from '../components/ice-custom-tooltip/ice-custom-tooltip.component';\n\n@Directive({\n  selector: '[iceCustomHtmlToolTip]'\n})\nexport class ToolTipRendererDirective implements OnDestroy {\n  @Input() iceTooltipHtmlText: string;\n  @Input() showToolTip = true;\n  @Input() showToolTipOnTextOverflow = false;\n  @Input() duration = 0;\n\n  private _overlayRef: OverlayRef;\n  private timeout: any;\n  private componentInstance: any;\n\n  constructor(\n    private _overlay: Overlay,\n    private _overlayPositionBuilder: OverlayPositionBuilder,\n    private _elementRef: ElementRef\n  ) {}\n\n  @HostListener('mouseenter')\n  show() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    if (\n      (this.showToolTipOnTextOverflow &&\n        this._elementRef.nativeElement.offsetWidth < this._elementRef.nativeElement.scrollWidth) ||\n      this.showToolTip\n    ) {\n      if (!this._overlayRef) {\n        const positionStrategy = this._overlayPositionBuilder.flexibleConnectedTo(this._elementRef).withPositions([\n          {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            offsetY: -5\n          }\n        ]);\n        this._overlayRef = this._overlay.create({ positionStrategy });\n      }\n      if (!this._overlayRef.hasAttached()) {\n        const tooltipRef: ComponentRef<CustomToolTipComponent> = this._overlayRef.attach(\n          new ComponentPortal(CustomToolTipComponent)\n        );\n        this.componentInstance = tooltipRef;\n        tooltipRef.instance.text = this.iceTooltipHtmlText;\n      }\n    }\n  }\n\n  @HostListener('mouseleave')\n  hide() {\n    this.timeout = setTimeout(() => {\n      this.closeToolTip();\n    }, this.duration);\n  }\n\n  ngOnDestroy() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.closeToolTip();\n    this._overlayRef = null!;\n  }\n\n  private closeToolTip() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.componentInstance = null!;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, ViewChildren } from '@angular/core';\n\n@Component({\n  selector: 'ice-datatable-row-select',\n  templateUrl: './ice-datatable-select.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableSelectComponent implements OnInit {\n  editing = false;\n  active = false;\n  rows = [];\n\n  @Input() align = 'left';\n  @Input() focusOnEnter = false;\n  @Input() editOnFocus = false;\n  @Input() selectDisabled = false;\n  @Output() update = new EventEmitter<string>();\n  @Input() options = [];\n  @Input() default: string;\n  @Input() value: string;\n  @ViewChildren('selectElement') selectEl;\n\n  ngOnInit() {\n    if (this.value) {\n      this.update.emit(this.value);\n    }\n  }\n\n  emitUpdate(newValue) {\n    this.update.emit(newValue);\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n  selector: 'ice-editable-text',\n  templateUrl: './ice-editable-text.component.html',\n  styleUrls: ['./ice-editable-text.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'ice-editable-text'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EditableTextComponent implements AfterViewInit {\n  editing = false;\n  active = false;\n\n  @Input() align = 'left';\n  @Input() editOnSpace = true;\n  @Input() editOnClick = true;\n  @Input() focusOnEnter = true;\n  @Input() editOnFocus = false;\n  @Input() disabled = false;\n  @Input() value: string;\n  @Input() errorText = '';\n  @Output() focus = new EventEmitter<null>();\n  @Output() toggleEditing = new EventEmitter<null>();\n  @Output() toggleActive = new EventEmitter<null>();\n  @Output() update = new EventEmitter<string>();\n  @ViewChildren('inputElement') inputEl;\n  @ViewChild('contentWrapper', { static: false }) content: ElementRef;\n\n  emitUpdate(newText) {\n    if (!this.disabled) {\n      this.update.emit(newText);\n    }\n  }\n\n  emitToggleEditing($event) {\n    $event.stopPropagation();\n    if (!this.disabled) {\n      this.editing = !this.editing;\n    }\n  }\n\n  emitFocus() {\n    if (this.focus) {\n      this.focus.emit(null);\n    }\n  }\n\n  emitToggleActive($event) {\n    $event.stopPropagation();\n    if (!this.disabled) {\n      this.active = !this.active;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.inputEl.changes.subscribe(d => {\n      return d.last && d.last.nativeElement.focus();\n    });\n    if (this.value == null) {\n      this.value =\n        this.content &&\n        this.content.nativeElement.childNodes.length > 0 &&\n        this.content.nativeElement.childNodes[0].data;\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ScrollbarHelper } from './services/scrollbar-helper.service';\nimport { DimensionsHelper } from './services/dimensions-helper.service';\nimport { ColumnChangesService } from './services/column-changes.service';\nimport { DataTableFooterTemplateDirective } from './components/footer/footer-template.directive';\nimport { VisibilityDirective } from './directives/visibility.directive';\nimport { DraggableDirective } from './directives/draggable.directive';\nimport { ResizeableDirective } from './directives/resizeable.directive';\nimport { OrderableDirective } from './directives/orderable.directive';\nimport { LongPressDirective } from './directives/long-press.directive';\nimport { ScrollerComponent } from './components/body/scroller.component';\nimport { DatatableComponent } from './components/datatable.component';\nimport { DataTableColumnDirective } from './components/columns/column.directive';\nimport { DataTableHeaderComponent } from './components/header/header.component';\nimport { DataTableHeaderCellComponent } from './components/header/header-cell.component';\nimport { DataTableBodyComponent } from './components/body/body.component';\nimport { DataTableFooterComponent } from './components/footer/footer.component';\nimport { DataTablePagerComponent } from './components/footer/pager.component';\nimport { ProgressBarComponent } from './components/body/progress-bar.component';\nimport { DataTableBodyRowComponent } from './components/body/body-row.component';\nimport { DataTableRowWrapperComponent } from './components/body/body-row-wrapper.component';\nimport { DatatableRowDetailDirective } from './components/row-detail/row-detail.directive';\nimport { DatatableGroupHeaderDirective } from './components/body/body-group-header.directive';\nimport { DatatableRowDetailTemplateDirective } from './components/row-detail/row-detail-template.directive';\nimport { DataTableBodyCellComponent } from './components/body/body-cell.component';\nimport { DataTableSelectionComponent } from './components/body/selection.component';\nimport { DataTableColumnHeaderDirective } from './components/columns/column-header.directive';\nimport { DataTableColumnCellDirective } from './components/columns/column-cell.directive';\nimport { DataTableColumnCellTreeToggle } from './components/columns/tree.directive';\nimport { DatatableFooterDirective } from './components/footer/footer.directive';\nimport { DatatableGroupHeaderTemplateDirective } from './components/body/body-group-header-template.directive';\nimport { DataTableSummaryRowComponent } from './components/body/summary/summary-row.component';\nimport { ToolTipRendererDirective } from './directives/ice-custom-html-tooltip.directive';\nimport { CustomToolTipComponent } from './components/ice-custom-tooltip/ice-custom-tooltip.component';\nimport { DatatableSelectComponent } from './components/ice-datatable-select/ice-datatable-select.component';\nimport { EditableTextComponent } from './components/ice-editable-text/ice-editable-text.component';\n\n@NgModule({\n  imports: [CommonModule, MatTooltipModule, OverlayModule, MatIconModule, MatButtonModule],\n  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n  declarations: [\n    DataTableFooterTemplateDirective,\n    VisibilityDirective,\n    DraggableDirective,\n    ResizeableDirective,\n    OrderableDirective,\n    LongPressDirective,\n    ToolTipRendererDirective,\n    ScrollerComponent,\n    DatatableComponent,\n    DataTableColumnDirective,\n    DataTableHeaderComponent,\n    DataTableHeaderCellComponent,\n    DataTableBodyComponent,\n    DataTableFooterComponent,\n    DataTablePagerComponent,\n    ProgressBarComponent,\n    DataTableBodyRowComponent,\n    DataTableRowWrapperComponent,\n    CustomToolTipComponent,\n    DatatableSelectComponent,\n    EditableTextComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableBodyCellComponent,\n    DataTableSelectionComponent,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DatatableFooterDirective,\n    DatatableGroupHeaderTemplateDirective,\n    DataTableSummaryRowComponent\n  ],\n  exports: [\n    DatatableComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableColumnDirective,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DataTableFooterTemplateDirective,\n    DatatableFooterDirective,\n    DataTablePagerComponent,\n    DatatableGroupHeaderTemplateDirective\n  ],\n  entryComponents: [CustomToolTipComponent]\n})\nexport class NgxDatatableModule {\n  /**\n   * Configure global configuration via INgxDatatableConfig\n   * @param configuration\n   */\n  static forRoot(configuration: INgxDatatableConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxDatatableModule,\n      providers: [{ provide: 'configuration', useValue: configuration }]\n    };\n  }\n}\n\n/**\n * Interface definition for INgxDatatableConfig global configuration\n */\nexport interface INgxDatatableConfig {\n  messages: {\n    emptyMessage: string; // Message to show when array is presented, but contains no values\n    totalMessage: string; // Footer total message\n    selectedMessage: string; // Footer selected message\n  };\n}\n","if (typeof document !== 'undefined' && !document.elementsFromPoint) {\r\n  document.elementsFromPoint = elementsFromPoint;\r\n}\r\n\r\n/*tslint:disable*/\r\n/**\r\n * Polyfill for `elementsFromPoint`\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\r\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\r\n * https://gist.github.com/oslego/7265412\r\n */\r\nexport function elementsFromPoint(x: number, y: number) {\r\n  const elements = [];\r\n  const previousPointerEvents = [];\r\n  let current: any; // TODO: window.getComputedStyle should be used with inferred type (Element)\r\n  let i;\r\n  let d;\r\n\r\n  //if (document === undefined) return elements;\r\n\r\n  // get all elements via elementFromPoint, and remove them from hit-testing in order\r\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\r\n    // push the element and its current style\r\n    elements.push(current);\r\n    previousPointerEvents.push({\r\n      value: current.style.getPropertyValue('pointer-events'),\r\n      priority: current.style.getPropertyPriority('pointer-events')\r\n    });\r\n\r\n    // add \"pointer-events: none\", to get to the underlying element\r\n    current.style.setProperty('pointer-events', 'none', 'important');\r\n  }\r\n\r\n  // restore the previous pointer-events values\r\n  for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]); ) {\r\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\r\n  }\r\n\r\n  // return our results\r\n  return elements;\r\n}\r\n/*tslint:enable*/\r\n","export enum ClickType {\r\n  single = 'single',\r\n  double = 'double'\r\n}\r\n"]}