{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-datatable/lib/services/scrollbar-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/dimensions-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/column-changes.service.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer-template.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/visibility.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/draggable.directive.ts","ng://@swimlane/ngx-datatable/lib/events.ts","ng://@swimlane/ngx-datatable/lib/directives/resizeable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/orderable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/long-press.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/scroller.component.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-header.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-cell.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/tree.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column.directive.ts","ng://@swimlane/ngx-datatable/lib/utils/column.ts","ng://@swimlane/ngx-datatable/lib/types/sort.type.ts","ng://@swimlane/ngx-datatable/lib/types/selection.type.ts","ng://@swimlane/ngx-datatable/lib/utils/camel-case.ts","ng://@swimlane/ngx-datatable/lib/utils/prefixes.ts","ng://@swimlane/ngx-datatable/lib/utils/translate.ts","ng://@swimlane/ngx-datatable/lib/components/header/header.component.ts","ng://@swimlane/ngx-datatable/lib/utils/column-prop-getters.ts","ng://@swimlane/ngx-datatable/lib/types/sort-direction.type.ts","ng://@swimlane/ngx-datatable/lib/utils/sort.ts","ng://@swimlane/ngx-datatable/lib/components/header/header-cell.component.ts","ng://@swimlane/ngx-datatable/lib/utils/row-height-cache.ts","ng://@swimlane/ngx-datatable/lib/components/body/body.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.directive.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/pager.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/progress-bar.component.ts","ng://@swimlane/ngx-datatable/lib/utils/keys.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row-wrapper.component.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-cell.component.ts","ng://@swimlane/ngx-datatable/lib/utils/selection.ts","ng://@swimlane/ngx-datatable/lib/components/body/selection.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/summary/summary-row.component.ts","ng://@swimlane/ngx-datatable/lib/components/ice-custom-tooltip/ice-custom-tooltip.component.ts","ng://@swimlane/ngx-datatable/lib/directives/ice-custom-html-tooltip.directive.ts","ng://@swimlane/ngx-datatable/lib/components/ice-datatable-select/ice-datatable-select.component.ts","ng://@swimlane/ngx-datatable/lib/components/ice-editable-text/ice-editable-text.component.ts","ng://@swimlane/ngx-datatable/lib/utils/tree.ts","ng://@swimlane/ngx-datatable/lib/utils/id.ts","ng://@swimlane/ngx-datatable/lib/utils/column-helper.ts","ng://@swimlane/ngx-datatable/lib/types/column-mode.type.ts","ng://@swimlane/ngx-datatable/lib/types/contextmenu.type.ts","ng://@swimlane/ngx-datatable/lib/utils/throttle.ts","ng://@swimlane/ngx-datatable/lib/utils/math.ts","ng://@swimlane/ngx-datatable/lib/components/datatable.component.ts","ng://@swimlane/ngx-datatable/lib/ngx-datatable.module.ts","ng://@swimlane/ngx-datatable/lib/utils/elm-from-point.ts","ng://@swimlane/ngx-datatable/lib/types/click.type.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__metadata","metadataKey","metadataValue","Reflect","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ScrollbarHelper","document","width","getWidth","outer","createElement","style","visibility","msOverflowStyle","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","Injectable","Inject","args","DOCUMENT","DimensionsHelper","getDimensions","element","getBoundingClientRect","ColumnChangesService","columnInputChanges","Subject","defineProperty","asObservable","onInputChange","DataTableFooterTemplateDirective","template","Directive","selector","TemplateRef","VisibilityDirective","zone","isVisible","visible","EventEmitter","ngOnInit","runCheck","ngOnDestroy","clearTimeout","timeout","onVisibilityChange","_this","run","emit","check","_a","nativeElement","offsetHeight","runOutsideAngular","setTimeout","ElementRef","NgZone","HostBinding","Output","DraggableDirective","dragX","dragY","dragStart","dragging","dragEnd","isDragging","ngOnChanges","changes","currentValue","dragModel","onMousedown","_destroySubscription","onMouseup","event","classList","remove","subscription","model","contains","preventDefault","mouseDownPos_1","x","clientX","y","clientY","mouseup","fromEvent","subscribe","ev","mouseMoveSub","pipe","takeUntil","move","add","mouseDownPos","left","top","unsubscribe","undefined","Input","window","ResizeableDirective","renderer","resizeEnabled","resize","resizing","ngAfterViewInit","renderer2","node","addClass","closed","clientWidth","isHandle","initialWidth","mouseDownScreenX","screenX","stopPropagation","newWidth","overMinWidth","minWidth","underMaxWidth","maxWidth","host","[class.resizeable]","Renderer2","HostListener","OrderableDirective","differs","reorder","targetChanged","differ","find","create","ngAfterContentInit","updateSubscriptions","draggables","bind","forEach","d","diffs","diff","createMapDiffs","unsubscribe_1","previousValue","forEachAddedItem","onDragStart","onDragging","onDragEnd","forEachRemovedItem","positions","_b","tslib_1.__values","toArray","_c","dragger","elm","parseInt","offsetLeft","toString","prop","right","index","prevPos","target","isTarget","lastDraggingIndex","prevIndex","newIndex","initialIndex","targets","elementsFromPoint","pos","this_1","el","reduce","acc","curr","$$id","KeyValueDiffers","ContentChildren","descendants","LongPressDirective","pressEnabled","duration","longPressStart","longPressing","longPressEnd","mouseX","mouseY","pressing","isLongPressing","onMouseDown","which","pressModel","mouseEvent","onMouseMove","loop","xThres","Math","abs","yThres","endPress","ScrollerComponent","ngZone","scrollbarV","scrollbarH","scroll","scrollYPos","scrollXPos","prevScrollYPos","prevScrollXPos","_scrollEventListener","parentElement","onScrolled","addEventListener","removeEventListener","setOffset","offsetY","scrollTop","dom","requestAnimationFrame","scrollLeft","updateOffset","direction","Component","class","changeDetection","ChangeDetectionStrategy","OnPush","type","DataTableColumnHeaderDirective","DataTableColumnCellDirective","DataTableColumnCellTreeToggle","DataTableColumnDirective","columnChangesService","isFirstChange","_cellTemplateInput","_cellTemplateQuery","_headerTemplateInput","_headerTemplateQuery","_treeToggleTemplateInput","_treeToggleTemplateQuery","ContentChild","read","static","columnsByPin","cols","ret","center","cols_1","cols_1_1","col","frozenLeft","frozenRight","columnGroupWidths","groups","all","columnTotalWidth","total","floor","columns","totalWidth","columns_1","columns_1_1","c","parseFloat","columnsTotalWidth","columns_2","columns_2_1","column","columnsByPinArr","val","colsByPinArr","colsByPin","single","multi","multiClick","cell","checkbox","camelCase","str","replace","trim","toLowerCase","a","b","toUpperCase","deCamelCase","match","styles","pre","cache","testStyle","prefix","getComputedStyle","documentElement","Array","slice","join","RegExp","lowercase","css","js","substr","getVendorPrefixedName","property","name","transform","backfaceVisibility","hasCSSTransforms","hasCSS3DTransforms","ua","navigator","userAgent","isSafari","test","translateXY","DataTableHeaderComponent","cd","sort","select","columnContextmenu","_columnGroupWidths","_styleByGroup","_innerWidth","_columns","colByPin","setStylesByGroup","_headerHeight","_columnsByPin","_offsetX","onLongPressStart","dragEventTarget","onLongPressEnd","innerWidth","trackByGroups","colGroup","columnTrackingFn","onColumnResized","prevValue","newValue","onColumnReordered","getColumn","targetMarkerContext","onTargetChanged","oldColumn","newColumn","leftColumnCount","centerColumnCount","onSort","sorts","calcNewSorts","idx","map","splice","dir","sortType","SortType","calcStylesByGroup","destroyed","detectChanges","group","widths","offsetX","ChangeDetectorRef","emptyStringGetter","getterForProp","numericIndexGetter","indexOf","deepValueGetter","shallowValueGetter","row","obj","fieldName","path","current","split","asc","desc","nextSortDir","SortDirection","orderByComparator","Date","isNaN","isFinite","String","sortRows","rows","dirs","rowToIndexMap","Map","set","temp","comparator","cachedDirs","valueGetter","compareFn","rowA","rowB","cachedDirs_1","cachedDirs_1_1","cachedDir","propA","propB","comparison","has","get","DataTableHeaderCellComponent","filter","sortFn","selectFn","filterCache","cellContext","sortDir","allRowsSelected","_allRowsSelected","_column","markForCheck","_sorts","calcSortDir","sortClass","calcSortClass","cls","sortable","resizeable","headerClass","res","keys","keys_1","keys_1_1","k","headerTemplate","checkboxable","headerCheckboxable","selectionType","SelectionType","onContextmenu","$event","sortAscendingIcon","sortDescendingIcon","setFilter","resetFilter","RowHeightCache","treeArray","clearCache","initCache","details","rowHeight","detailRowHeight","externalVirtual","rowCount","rowIndexes","rowExpansions","isFn","isDetailFn","Error","currentRowHeight","expanded","update","getRowIndex","scrollY","calcRowIndex","atRowIndex","byRowHeight","query","atIndex","sum","queryBetween","atIndexA","atIndexB","dataLength","blockSize","pow","nextPos","DataTableBodyComponent","selected","page","activate","detailToggle","rowContextmenu","treeAction","rowHeightsCache","indexes","getDetailRowHeight","rowDetail","rowTrackingFn","trackByProp","_pageSize","recalcLayout","_rows","_offset","_rowCount","_bodyHeight","virtualization","listener","toggle","toggleRowExpansion","toggleAllRows","updateIndexes","updateRows","groupHeader","updateOffsetY","offset","scroller","rowIndex","pageSize","onBodyScroll","updatePage","first","ceil","last","clear","groupedRows","getRowHeight","getGroupHeight","getRowAndDetailHeight","getRowExpanded","getRowsStyles","getBottomSummaryRowStyles","position","hideIndicator","loadingIndicator","height","bodyHeight","externalPaging","max","min","refreshRowHeightCache","Set","getAdjustedViewPortIndex","viewPortFirstRowIndex","rowExpandedIdx","getRowExpandedIdx","currentIndex","stylesByGroup","bodyWidth","groupExpansionDefault","rowId","rowIdentity","findIndex","onTreeAction","ViewChild","DatatableFooterDirective","_templateInput","_templateQuery","DataTableFooterComponent","selectedCount","DataTablePagerComponent","change","_count","_page","_size","pages","calcPages","count","size","canPrevious","canNext","totalPages","prevPage","selectPage","nextPage","startPage","endPage","isMaxSized","maxSize","num","number","text","ProgressBarComponent","up","down","return","escape","DataTableBodyRowComponent","scrollbarHelper","treeStatus","_groupStyles","_element","_rowDiffer","recalculateColumns","buildStylesByGroup","isSelected","rowClass","ngDoCheck","detail","onActivate","cellIndex","rowElement","onKeyDown","keyCode","isTargetRow","Keys","onMouseenter","decorators","SkipSelf","DataTableRowWrapperComponent","groupContext","rowContext","_expanded","rowDiffer","_rowIndex","getGroupHeaderStyle","DatatableRowDetailTemplateDirective","DatatableRowDetailDirective","toggleExpandRow","expandAllRows","collapseAllRows","DatatableGroupHeaderTemplateDirective","DatatableGroupHeaderDirective","toggleExpandGroup","expandAllGroups","collapseAllGroups","DataTableBodyCellComponent","sanitizer","_isEditable","isFocused","onCheckboxChangeFn","onCheckboxChange","activateFn","_rowDetail","_group","checkValueUpdates","_rowHeight","_isSelected","_row","_treeStatus","status","cellClass","cellTemplate","$$valueGetter","userPipe","sanitizedValue","stripHtml","onFocus","onBlur","onClick","cellElement","middleclickEvent","onDblClick","isTargetCell","html","calcLeftMargin","levelIndent","treeLevelIndent","isTreeColumn","level","hasToShowToolTip","field","tooltip","getTooltipValue","getIcons","icons","iconsArray","selectFieldValue","propArray","onClickRowActionButton","action","sanatizeHtml","bypassSecurityTrustHtml","isEditable","id","editable","of","updateSelect","onEdit","editField","onClickField","DomSanitizer","ViewContainerRef","selectRows","comparefn","selectedIndex","selectRowsBetween","reverse","range","start","end","DataTableSelectionComponent","selectRow","selectEnabled","chkbox","shiftKey","getRowSelectedIdx","ctrlKey","metaKey","selectCheck","onKeyboardFocus","isCellSelection","focusCell","focusRow","nextRowElement","getPrevNextRow","focus","focusElement","previousElementSibling","nextElementSibling","children","nextCellElement","getElementsByClassName","getRowSelected","defaultSumFunc","cells","cellsWithValues","some","noopSumFunc","DataTableSummaryRowComponent","summaryRow","updateInternalColumns","updateValues","_internalColumns","summaryTemplate","cellsFromSingleColumn","sumFunc","getSummaryFunction","summaryFunc","CustomToolTipComponent","encapsulation","ViewEncapsulation","None","ToolTipRendererDirective","_overlay","_overlayPositionBuilder","_elementRef","showToolTip","showToolTipOnTextOverflow","show","scrollWidth","_overlayRef","positionStrategy","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","hasAttached","tooltipRef","attach","ComponentPortal","componentInstance","instance","iceTooltipHtmlText","hide","closeToolTip","detach","Overlay","OverlayPositionBuilder","DatatableSelectComponent","editing","active","align","focusOnEnter","editOnFocus","selectDisabled","options","emitUpdate","ViewChildren","EditableTextComponent","editOnSpace","editOnClick","disabled","errorText","toggleEditing","toggleActive","newText","emitToggleEditing","emitFocus","emitToggleActive","inputEl","content","childNodes","data","optionalGetterForProp","groupRowsByParents","from","to","nodeById","l","TreeNode","uniqIDs","arr","item","toValue","parent_1","fromValue","parent","resolvedRows_1","flatten","f","recursive","child","random","setColumnDefaults","treeColumnFound","isNullOrUndefined","draggable","canAutoResize","translateTemplates","templates","result","templates_1","templates_1_1","props","getOwnPropertyNames","props_1","e_3","props_1_1","standard","flex","force","header","throttle","func","wait","context","previous","later","leading","now","remaining","trailing","throttleable","key","descriptor","configurable","enumerable","getTotalFlexGrow","totalFlexGrow","flexGrow","adjustColumnWidths","allColumns","expectedWidth","columnsWidth","colsByGroup","attr","e_2","_d","hasMinWidth","remainingWidth","widthPerFlexPoint","_e","_f","scaleColumns","forceFillColumnWidths","startIdx","allowBleed","defaultColWidth","columnsToResize","columnsToResize_1","columnsToResize_1_1","$$oldWidth","additionWidthPerColumn","exceedsWindow","contentWidth","getContentWidth","columnsProcessed","columnsToResize_2","e_5","columnsToResize_2_1","newSize","removeProcessedColumns","columnsProcessed_1","columnsProcessed_1_1","allColumns_1","allColumns_1_1","DatatableComponent","dimensionsHelper","configuration","expandable","columnMode","ColumnMode","headerHeight","footerHeight","externalSorting","reorderable","swapColumns","cssClasses","sortAscending","sortDescending","pagerLeftArrow","pagerRightArrow","pagerPrevious","pagerNext","messages","emptyMessage","totalMessage","selectedMessage","selectAllRowsOnPage","summaryHeight","summaryPosition","tableContextmenu","BehaviorSubject","_subscriptions","_groupRowsBy","_internalRows","sortInternalRows","treeFromRelation","treeToRelation","recalculate","groupArrayBy","_limit","_columnTemplates","translateColumns","bodyComponent","rowsOnPage","limit","columnTemplates","v","listenForColumnInputChanges","originalArray","groupBy","recalculatePages","recalculateDims","onWindowResize","forceIdx","dims","calcPageSize","calcRowCount","onBodyPage","onFooterPage","onColumnContextmenu","ContextmenuType","onRowContextmenu","onColumnResize","onColumnReorder","prevCol","movedCol","onColumnFilter","onColumnSort","onHeaderSelect","allSelected","onBodySelect","columnInputChanges$","notifyOnChanges","Optional","getOwnPropertyDescriptor","decorate","tslib_1.__decorate","NgxDatatableModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","MatTooltipModule","OverlayModule","MatIconModule","MatButtonModule","BrowserModule","MatFormFieldModule","MatInputModule","FormsModule","ReactiveFormsModule","declarations","exports","entryComponents","elements","previousPointerEvents","elementFromPoint","getPropertyValue","priority","getPropertyPriority","setProperty","double"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class ScrollbarHelper {\r\n  width: number = this.getWidth();\r\n\r\n  constructor(@Inject(DOCUMENT) private document: any) {}\r\n\r\n  getWidth(): number {\r\n    const outer = this.document.createElement('div');\r\n    outer.style.visibility = 'hidden';\r\n    outer.style.width = '100px';\r\n    outer.style.msOverflowStyle = 'scrollbar';\r\n    this.document.body.appendChild(outer);\r\n\r\n    const widthNoScroll = outer.offsetWidth;\r\n    outer.style.overflow = 'scroll';\r\n\r\n    const inner = this.document.createElement('div');\r\n    inner.style.width = '100%';\r\n    outer.appendChild(inner);\r\n\r\n    const widthWithScroll = inner.offsetWidth;\r\n    outer.parentNode.removeChild(outer);\r\n\r\n    return widthNoScroll - widthWithScroll;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class DimensionsHelper {\r\n  getDimensions(element: Element): ClientRect {\r\n    return element.getBoundingClientRect();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n/**\r\n * service to make DatatableComponent aware of changes to\r\n * input bindings of DataTableColumnDirective\r\n */\r\n@Injectable()\r\nexport class ColumnChangesService {\r\n  private columnInputChanges = new Subject<undefined>();\r\n\r\n  get columnInputChanges$(): Observable<undefined> {\r\n    return this.columnInputChanges.asObservable();\r\n  }\r\n\r\n  onInputChange(): void {\r\n    this.columnInputChanges.next();\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-footer-template]' })\r\nexport class DataTableFooterTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, Output, EventEmitter, ElementRef, HostBinding, NgZone, OnInit, OnDestroy } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer Directive\r\n *\r\n * Usage:\r\n *\r\n * \t\t<div\r\n * \t\t\tvisibilityObserver\r\n * \t\t\t(visible)=\"onVisible($event)\">\r\n * \t\t</div>\r\n *\r\n */\r\n@Directive({ selector: '[visibilityObserver]' })\r\nexport class VisibilityDirective implements OnInit, OnDestroy {\r\n  @HostBinding('class.visible')\r\n  isVisible: boolean = false;\r\n\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {}\r\n\r\n  ngOnInit(): void {\r\n    this.runCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 50);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.timeout = setTimeout(() => check());\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n/**\r\n * Draggable Directive for Angular2\r\n *\r\n * Inspiration:\r\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\r\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\r\n *\r\n */\r\n@Directive({ selector: '[draggable]' })\r\nexport class DraggableDirective implements OnDestroy, OnChanges {\r\n  @Input() dragEventTarget: any;\r\n  @Input() dragModel: any;\r\n  @Input() dragX: boolean = true;\r\n  @Input() dragY: boolean = true;\r\n\r\n  @Output() dragStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragging: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  isDragging: boolean = false;\r\n  subscription: Subscription;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\r\n      this.onMousedown(changes['dragEventTarget'].currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  onMouseup(event: MouseEvent): void {\r\n    if (!this.isDragging) return;\r\n\r\n    this.isDragging = false;\r\n    this.element.classList.remove('dragging');\r\n\r\n    if (this.subscription) {\r\n      this._destroySubscription();\r\n      this.dragEnd.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  onMousedown(event: MouseEvent): void {\r\n    // we only want to drag the inner header text\r\n    const isDragElm = (<HTMLElement>event.target).classList.contains('draggable');\r\n\r\n    if (isDragElm && (this.dragX || this.dragY)) {\r\n      event.preventDefault();\r\n      this.isDragging = true;\r\n\r\n      const mouseDownPos = { x: event.clientX, y: event.clientY };\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup(ev));\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((ev: MouseEvent) => this.move(ev, mouseDownPos));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n\r\n      this.dragStart.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, mouseDownPos: { x: number; y: number }): void {\r\n    if (!this.isDragging) return;\r\n\r\n    const x = event.clientX - mouseDownPos.x;\r\n    const y = event.clientY - mouseDownPos.y;\r\n\r\n    if (this.dragX) this.element.style.left = `${x}px`;\r\n    if (this.dragY) this.element.style.top = `${y}px`;\r\n\r\n    this.element.classList.add('dragging');\r\n\r\n    this.dragging.emit({\r\n      event,\r\n      element: this.element,\r\n      model: this.dragModel\r\n    });\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","declare let global: any;\r\n\r\n/* tslint:disable */\r\nexport const MouseEvent = (((typeof window !== 'undefined' && window) as any) || (global as any))\r\n  .MouseEvent as MouseEvent;\r\nexport const KeyboardEvent = (((typeof window !== 'undefined' && window) as any) || (global as any))\r\n  .KeyboardEvent as KeyboardEvent;\r\nexport const Event = (((typeof window !== 'undefined' && window) as any) || (global as any)).Event as Event;\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { MouseEvent } from '../events';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[resizeable]',\r\n  host: {\r\n    '[class.resizeable]': 'resizeEnabled'\r\n  }\r\n})\r\nexport class ResizeableDirective implements OnDestroy, AfterViewInit {\r\n  @Input() resizeEnabled: boolean = true;\r\n  @Input() minWidth: number;\r\n  @Input() maxWidth: number;\r\n\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  subscription: Subscription;\r\n  resizing: boolean = false;\r\n\r\n  constructor(element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const renderer2 = this.renderer;\r\n    const node = renderer2.createElement('span');\r\n    if (this.resizeEnabled) {\r\n      renderer2.addClass(node, 'resize-handle');\r\n    } else {\r\n      renderer2.addClass(node, 'resize-handle--not-resizable');\r\n    }\r\n    renderer2.appendChild(this.element, node);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.resizing = false;\r\n\r\n    if (this.subscription && !this.subscription.closed) {\r\n      this._destroySubscription();\r\n      this.resize.emit(this.element.clientWidth);\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    const isHandle = (<HTMLElement>event.target).classList.contains('resize-handle');\r\n    const initialWidth = this.element.clientWidth;\r\n    const mouseDownScreenX = event.screenX;\r\n\r\n    if (isHandle) {\r\n      event.stopPropagation();\r\n      this.resizing = true;\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((e: MouseEvent) => this.move(e, initialWidth, mouseDownScreenX));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, initialWidth: number, mouseDownScreenX: number): void {\r\n    const movementX = event.screenX - mouseDownScreenX;\r\n    const newWidth = initialWidth + movementX;\r\n\r\n    const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\r\n    const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\r\n\r\n    if (overMinWidth && underMaxWidth) {\r\n      this.element.style.width = `${newWidth}px`;\r\n    }\r\n  }\r\n\r\n  private _destroySubscription() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Output,\r\n  EventEmitter,\r\n  ContentChildren,\r\n  QueryList,\r\n  KeyValueDiffers,\r\n  AfterContentInit,\r\n  OnDestroy,\r\n  Inject\r\n} from '@angular/core';\r\nimport { DraggableDirective } from './draggable.directive';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Directive({ selector: '[orderable]' })\r\nexport class OrderableDirective implements AfterContentInit, OnDestroy {\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() targetChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChildren(DraggableDirective, { descendants: true })\r\n  draggables: QueryList<DraggableDirective>;\r\n\r\n  positions: any;\r\n  differ: any;\r\n  lastDraggingIndex: number;\r\n\r\n  constructor(differs: KeyValueDiffers, @Inject(DOCUMENT) private document: any) {\r\n    this.differ = differs.find({}).create();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    // HACK: Investigate Better Way\r\n    this.updateSubscriptions();\r\n    this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.draggables.forEach(d => {\r\n      d.dragStart.unsubscribe();\r\n      d.dragging.unsubscribe();\r\n      d.dragEnd.unsubscribe();\r\n    });\r\n  }\r\n\r\n  updateSubscriptions(): void {\r\n    const diffs = this.differ.diff(this.createMapDiffs());\r\n\r\n    if (diffs) {\r\n      const subscribe = ({ currentValue, previousValue }: any) => {\r\n        unsubscribe({ previousValue });\r\n\r\n        if (currentValue) {\r\n          currentValue.dragStart.subscribe(this.onDragStart.bind(this));\r\n          currentValue.dragging.subscribe(this.onDragging.bind(this));\r\n          currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\r\n        }\r\n      };\r\n\r\n      const unsubscribe = ({ previousValue }: any) => {\r\n        if (previousValue) {\r\n          previousValue.dragStart.unsubscribe();\r\n          previousValue.dragging.unsubscribe();\r\n          previousValue.dragEnd.unsubscribe();\r\n        }\r\n      };\r\n\r\n      diffs.forEachAddedItem(subscribe);\r\n      // diffs.forEachChangedItem(subscribe.bind(this));\r\n      diffs.forEachRemovedItem(unsubscribe);\r\n    }\r\n  }\r\n\r\n  onDragStart(): void {\r\n    this.positions = {};\r\n\r\n    let i = 0;\r\n    for (const dragger of this.draggables.toArray()) {\r\n      const elm = dragger.element;\r\n      const left = parseInt(elm.offsetLeft.toString(), 0);\r\n      this.positions[dragger.dragModel.prop] = {\r\n        left,\r\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\r\n        index: i++,\r\n        element: elm\r\n      };\r\n    }\r\n  }\r\n\r\n  onDragging({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n    const target = this.isTarget(model, event);\r\n\r\n    if (target) {\r\n      if (this.lastDraggingIndex !== target.i) {\r\n        this.targetChanged.emit({\r\n          prevIndex: this.lastDraggingIndex,\r\n          newIndex: target.i,\r\n          initialIndex: prevPos.index\r\n        });\r\n        this.lastDraggingIndex = target.i;\r\n      }\r\n    } else if (this.lastDraggingIndex !== prevPos.index) {\r\n      this.targetChanged.emit({\r\n        prevIndex: this.lastDraggingIndex,\r\n        initialIndex: prevPos.index\r\n      });\r\n      this.lastDraggingIndex = prevPos.index;\r\n    }\r\n  }\r\n\r\n  onDragEnd({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n\r\n    const target = this.isTarget(model, event);\r\n    if (target) {\r\n      this.reorder.emit({\r\n        prevIndex: prevPos.index,\r\n        newIndex: target.i,\r\n        model\r\n      });\r\n    }\r\n\r\n    this.lastDraggingIndex = undefined;\r\n    element.style.left = 'auto';\r\n  }\r\n\r\n  isTarget(model: any, event: any): any {\r\n    let i = 0;\r\n    const x = event.x || event.clientX;\r\n    const y = event.y || event.clientY;\r\n    const targets = this.document.elementsFromPoint(x, y);\r\n\r\n    for (const prop in this.positions) {\r\n      // current column position which throws event.\r\n      const pos = this.positions[prop];\r\n\r\n      // since we drag the inner span, we need to find it in the elements at the cursor\r\n      if (model.prop !== prop && targets.find((el: any) => el === pos.element)) {\r\n        return {\r\n          pos,\r\n          i\r\n        };\r\n      }\r\n\r\n      i++;\r\n    }\r\n  }\r\n\r\n  private createMapDiffs(): { [key: string]: DraggableDirective } {\r\n    return this.draggables.toArray().reduce((acc, curr) => {\r\n      acc[curr.dragModel.$$id] = curr;\r\n      return acc;\r\n    }, {});\r\n  }\r\n}\r\n","import { Directive, Input, Output, EventEmitter, HostBinding, HostListener, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n@Directive({ selector: '[long-press]' })\r\nexport class LongPressDirective implements OnDestroy {\r\n  @Input() pressEnabled: boolean = true;\r\n  @Input() pressModel: any;\r\n  @Input() duration: number = 500;\r\n\r\n  @Output() longPressStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressing: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  pressing: boolean;\r\n  isLongPressing: boolean;\r\n  timeout: any;\r\n  mouseX: number = 0;\r\n  mouseY: number = 0;\r\n\r\n  subscription: Subscription;\r\n\r\n  @HostBinding('class.press')\r\n  get press(): boolean {\r\n    return this.pressing;\r\n  }\r\n\r\n  @HostBinding('class.longpress')\r\n  get isLongPress(): boolean {\r\n    return this.isLongPressing;\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMouseDown(event: MouseEvent): void {\r\n    // don't do right/middle clicks\r\n    if (event.which !== 1 || !this.pressEnabled) return;\r\n\r\n    // don't start drag if its on resize handle\r\n    const target = <HTMLElement>event.target;\r\n    if (target.classList.contains('resize-handle')) return;\r\n\r\n    this.mouseX = event.clientX;\r\n    this.mouseY = event.clientY;\r\n\r\n    this.pressing = true;\r\n    this.isLongPressing = false;\r\n\r\n    const mouseup = fromEvent(document, 'mouseup');\r\n    this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n    this.timeout = setTimeout(() => {\r\n      this.isLongPressing = true;\r\n      this.longPressStart.emit({\r\n        event,\r\n        model: this.pressModel\r\n      });\r\n\r\n      this.subscription.add(\r\n        fromEvent(document, 'mousemove')\r\n          .pipe(takeUntil(mouseup))\r\n          .subscribe((mouseEvent: MouseEvent) => this.onMouseMove(mouseEvent))\r\n      );\r\n\r\n      this.loop(event);\r\n    }, this.duration);\r\n\r\n    this.loop(event);\r\n  }\r\n\r\n  onMouseMove(event: MouseEvent): void {\r\n    if (this.pressing && !this.isLongPressing) {\r\n      const xThres = Math.abs(event.clientX - this.mouseX) > 10;\r\n      const yThres = Math.abs(event.clientY - this.mouseY) > 10;\r\n\r\n      if (xThres || yThres) {\r\n        this.endPress();\r\n      }\r\n    }\r\n  }\r\n\r\n  loop(event: MouseEvent): void {\r\n    if (this.isLongPressing) {\r\n      this.timeout = setTimeout(() => {\r\n        this.longPressing.emit({\r\n          event,\r\n          model: this.pressModel\r\n        });\r\n        this.loop(event);\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  endPress(): void {\r\n    clearTimeout(this.timeout);\r\n    this.isLongPressing = false;\r\n    this.pressing = false;\r\n    this._destroySubscription();\r\n\r\n    this.longPressEnd.emit({\r\n      model: this.pressModel\r\n    });\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.endPress();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  Renderer2,\r\n  NgZone,\r\n  OnInit,\r\n  OnDestroy,\r\n  HostBinding,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { MouseEvent } from '../../events';\r\n\r\n@Component({\r\n  selector: 'datatable-scroller',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    class: 'datatable-scroll'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScrollerComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean = false;\r\n  @Input() scrollbarH: boolean = false;\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  scrollHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  @Input()\r\n  scrollWidth: number;\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n\r\n  scrollYPos: number = 0;\r\n  scrollXPos: number = 0;\r\n  prevScrollYPos: number = 0;\r\n  prevScrollXPos: number = 0;\r\n  element: any;\r\n  parentElement: any;\r\n  onScrollListener: any;\r\n\r\n  private _scrollEventListener: any = null;\r\n\r\n  constructor(private ngZone: NgZone, element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // manual bind so we don't always listen\r\n    if (this.scrollbarV || this.scrollbarH) {\r\n      const renderer = this.renderer;\r\n      this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\r\n      this._scrollEventListener = this.onScrolled.bind(this);\r\n      this.parentElement.addEventListener('scroll', this._scrollEventListener);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._scrollEventListener) {\r\n      this.parentElement.removeEventListener('scroll', this._scrollEventListener);\r\n      this._scrollEventListener = null;\r\n    }\r\n  }\r\n\r\n  setOffset(offsetY: number): void {\r\n    if (this.parentElement) {\r\n      this.parentElement.scrollTop = offsetY;\r\n    }\r\n  }\r\n\r\n  onScrolled(event: MouseEvent): void {\r\n    const dom: Element = <Element>event.currentTarget;\r\n    requestAnimationFrame(() => {\r\n      this.scrollYPos = dom.scrollTop;\r\n      this.scrollXPos = dom.scrollLeft;\r\n      this.updateOffset();\r\n    });\r\n  }\r\n\r\n  updateOffset(): void {\r\n    let direction: string;\r\n    if (this.scrollYPos < this.prevScrollYPos) {\r\n      direction = 'down';\r\n    } else if (this.scrollYPos > this.prevScrollYPos) {\r\n      direction = 'up';\r\n    }\r\n\r\n    this.scroll.emit({\r\n      direction,\r\n      scrollYPos: this.scrollYPos,\r\n      scrollXPos: this.scrollXPos\r\n    });\r\n\r\n    this.prevScrollYPos = this.scrollYPos;\r\n    this.prevScrollXPos = this.scrollXPos;\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-header-template]' })\r\nexport class DataTableColumnHeaderDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-cell-template]' })\r\nexport class DataTableColumnCellDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-tree-toggle]' })\r\nexport class DataTableColumnCellTreeToggle {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef, ContentChild, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { DataTableColumnHeaderDirective } from './column-header.directive';\r\nimport { DataTableColumnCellDirective } from './column-cell.directive';\r\nimport { DataTableColumnCellTreeToggle } from './tree.directive';\r\nimport { ColumnChangesService } from '../../services/column-changes.service';\r\nimport { TableColumnProp } from '../../types/table-column.type';\r\n\r\n@Directive({ selector: 'ngx-datatable-column' })\r\nexport class DataTableColumnDirective implements OnChanges {\r\n  @Input() name: string;\r\n  @Input() prop: TableColumnProp;\r\n  @Input() frozenLeft: any;\r\n  @Input() frozenRight: any;\r\n  @Input() flexGrow: number;\r\n  @Input() resizeable: boolean;\r\n  @Input() comparator: any;\r\n  @Input() pipe: any;\r\n  @Input() sortable: boolean;\r\n  @Input() draggable: boolean;\r\n  @Input() canAutoResize: boolean;\r\n  @Input() minWidth: number;\r\n  @Input() width: number;\r\n  @Input() maxWidth: number;\r\n  @Input() checkboxable: boolean;\r\n  @Input() headerCheckboxable: boolean;\r\n  @Input() headerClass: string | ((data: any) => string | any);\r\n  @Input() cellClass: string | ((data: any) => string | any);\r\n  @Input() isTreeColumn: boolean;\r\n  @Input() treeLevelIndent: number;\r\n  @Input() summaryFunc: (cells: any[]) => any;\r\n  @Input() summaryTemplate: TemplateRef<any>;\r\n\r\n  @Input('cellTemplate')\r\n  _cellTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })\r\n  _cellTemplateQuery: TemplateRef<any>;\r\n\r\n  get cellTemplate(): TemplateRef<any> {\r\n    return this._cellTemplateInput || this._cellTemplateQuery;\r\n  }\r\n\r\n  @Input('headerTemplate')\r\n  _headerTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })\r\n  _headerTemplateQuery: TemplateRef<any>;\r\n\r\n  get headerTemplate(): TemplateRef<any> {\r\n    return this._headerTemplateInput || this._headerTemplateQuery;\r\n  }\r\n\r\n  @Input('treeToggleTemplate')\r\n  _treeToggleTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })\r\n  _treeToggleTemplateQuery: TemplateRef<any>;\r\n\r\n  get treeToggleTemplate(): TemplateRef<any> {\r\n    return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\r\n  }\r\n\r\n  private isFirstChange = true;\r\n\r\n  constructor(private columnChangesService: ColumnChangesService) {}\r\n\r\n  ngOnChanges() {\r\n    if (this.isFirstChange) {\r\n      this.isFirstChange = false;\r\n    } else {\r\n      this.columnChangesService.onInputChange();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Returns the columns by pin.\r\n */\r\nexport function columnsByPin(cols: any[]) {\r\n  const ret: { left: any; center: any; right: any } = {\r\n    left: [],\r\n    center: [],\r\n    right: []\r\n  };\r\n\r\n  if (cols) {\r\n    for (const col of cols) {\r\n      if (col.frozenLeft) {\r\n        ret.left.push(col);\r\n      } else if (col.frozenRight) {\r\n        ret.right.push(col);\r\n      } else {\r\n        ret.center.push(col);\r\n      }\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Returns the widths of all group sets of a column\r\n */\r\nexport function columnGroupWidths(groups: any, all: any) {\r\n  return {\r\n    left: columnTotalWidth(groups.left),\r\n    center: columnTotalWidth(groups.center),\r\n    right: columnTotalWidth(groups.right),\r\n    total: Math.floor(columnTotalWidth(all))\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnTotalWidth(columns: any[], prop?: string) {\r\n  let totalWidth = 0;\r\n\r\n  if (columns) {\r\n    for (const c of columns) {\r\n      const has = prop && c[prop];\r\n      const width = has ? c[prop] : c.width;\r\n      totalWidth = totalWidth + parseFloat(width);\r\n    }\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnsTotalWidth(columns: any, prop?: any) {\r\n  let totalWidth = 0;\r\n\r\n  for (const column of columns) {\r\n    const has = prop && column[prop];\r\n    totalWidth = totalWidth + (has ? column[prop] : column.width);\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\nexport function columnsByPinArr(val: any) {\r\n  const colsByPinArr = [];\r\n  const colsByPin = columnsByPin(val);\r\n\r\n  colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\r\n  colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\r\n  colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\r\n\r\n  return colsByPinArr;\r\n}\r\n","export enum SortType {\r\n  single = 'single',\r\n  multi = 'multi'\r\n}\r\n","export enum SelectionType {\r\n  single = 'single',\r\n  multi = 'multi',\r\n  multiClick = 'multiClick',\r\n  cell = 'cell',\r\n  checkbox = 'checkbox'\r\n}\r\n","/**\r\n * Converts strings from something to camel case\r\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\r\n */\r\nexport function camelCase(str: string): string {\r\n  // Replace special characters with a space\r\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\r\n  // put a space before an uppercase letter\r\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\r\n\r\n  // Lower case first character and some other stuff\r\n  str = str\r\n    .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\r\n    .trim()\r\n    .toLowerCase();\r\n\r\n  // uppercase characters preceded by a space or number\r\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function(a, b, c) {\r\n    return b.trim() + c.toUpperCase();\r\n  });\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Converts strings from camel case to words\r\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\r\n */\r\nexport function deCamelCase(str: string): string {\r\n  return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\r\n}\r\n","import { camelCase } from './camel-case';\r\n\r\nconst cache = {};\r\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\r\n\r\n// Get Prefix\r\n// http://davidwalsh.name/vendor-prefix\r\nconst prefix = (function() {\r\n  const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\r\n  const match =\r\n    typeof styles !== 'undefined'\r\n      ? Array.prototype.slice\r\n          .call(styles)\r\n          .join('')\r\n          .match(/-(moz|webkit|ms)-/)\r\n      : null;\r\n  const pre = match !== null ? match[1] : undefined;\r\n  // tslint:disable-next-line: tsr-detect-non-literal-regexp\r\n  const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\r\n\r\n  return dom\r\n    ? {\r\n        dom,\r\n        lowercase: pre,\r\n        css: `-${pre}-`,\r\n        js: pre[0].toUpperCase() + pre.substr(1)\r\n      }\r\n    : undefined;\r\n})();\r\n\r\nexport function getVendorPrefixedName(property: string) {\r\n  const name = camelCase(property);\r\n\r\n  if (!cache[name]) {\r\n    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\r\n      cache[name] = prefix.css + property;\r\n    } else if (testStyle[property] !== undefined) {\r\n      cache[name] = property;\r\n    }\r\n  }\r\n\r\n  return cache[name];\r\n}\r\n","import { getVendorPrefixedName } from './prefixes';\r\nimport { camelCase } from './camel-case';\r\n\r\n// browser detection and prefixing tools\r\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\r\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\r\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\r\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\r\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\r\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\r\n\r\nexport function translateXY(styles: any, x: number, y: number) {\r\n  if (typeof transform !== 'undefined' && hasCSSTransforms) {\r\n    if (!isSafari && hasCSS3DTransforms) {\r\n      styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\r\n      styles[backfaceVisibility] = 'hidden';\r\n    } else {\r\n      styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\r\n    }\r\n  } else {\r\n    styles.top = `${y}px`;\r\n    styles.left = `${x}px`;\r\n  }\r\n}\r\n","import {\n  Component,\n  Output,\n  EventEmitter,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  ViewRef\n} from '@angular/core';\nimport { MouseEvent } from '../../events';\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\nimport { SortType } from '../../types/sort.type';\nimport { SelectionType } from '../../types/selection.type';\nimport { DataTableColumnDirective } from '../columns/column.directive';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-header',\n  template: `\n    <div\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          [ngClass]=\"{ 'filter-template-wrap': column.filter }\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `,\n  host: {\n    class: 'datatable-header'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableHeaderComponent {\n  @Input() sortAscendingIcon: any;\n  @Input() sortDescendingIcon: any;\n  @Input() scrollbarH: boolean;\n  @Input() dealsWithGroup: boolean;\n  @Input() targetMarkerTemplate: any;\n\n  targetMarkerContext: any;\n\n  @Input() set innerWidth(val: number) {\n    this._innerWidth = val;\n    setTimeout(() => {\n      if (this._columns) {\n        const colByPin = columnsByPin(this._columns);\n        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n        this.setStylesByGroup();\n      }\n    });\n  }\n\n  get innerWidth(): number {\n    return this._innerWidth;\n  }\n\n  @Input() sorts: any[];\n  @Input() sortType: SortType;\n  @Input() allRowsSelected: boolean;\n  @Input() selectionType: SelectionType;\n  @Input() reorderable: boolean;\n\n  dragEventTarget: any;\n\n  @HostBinding('style.height')\n  @Input()\n  set headerHeight(val: any) {\n    if (val !== 'auto') {\n      this._headerHeight = `${val}px`;\n    } else {\n      this._headerHeight = val;\n    }\n  }\n\n  get headerHeight(): any {\n    return this._headerHeight;\n  }\n\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n\n    const colsByPin = columnsByPin(val);\n    this._columnsByPin = columnsByPinArr(val);\n    setTimeout(() => {\n      this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n      this.setStylesByGroup();\n    });\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input()\n  set offsetX(val: number) {\n    this._offsetX = val;\n    this.setStylesByGroup();\n  }\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\n\n  _columnsByPin: any;\n  _columnGroupWidths: any = {\n    total: 100\n  };\n  _innerWidth: number;\n  _offsetX: number;\n  _columns: any[];\n  _headerHeight: string;\n  _styleByGroup: { [prop: string]: {} } = {\n    left: {},\n    center: {},\n    right: {}\n  };\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  onLongPressStart({ event, model }: { event: any; model: any }) {\n    model.dragging = true;\n    this.dragEventTarget = event;\n  }\n\n  onLongPressEnd({ event, model }: { event: any; model: any }) {\n    this.dragEventTarget = event;\n\n    // delay resetting so sort can be\n    // prevented if we were dragging\n    setTimeout(() => {\n      // datatable component creates copies from columns on reorder\n      // set dragging to false on new objects\n      const column = this._columns.find(c => c.$$id === model.$$id);\n      if (column) {\n        column.dragging = false;\n      }\n    }, 5);\n  }\n\n  @HostBinding('style.width')\n  get headerWidth(): string {\n    if (this.scrollbarH) {\n      return this.innerWidth + 'px';\n    }\n\n    return '100%';\n  }\n\n  trackByGroups(index: number, colGroup: any): any {\n    return colGroup.type;\n  }\n\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  onColumnResized(width: number, column: DataTableColumnDirective): void {\n    if (width <= column.minWidth) {\n      width = column.minWidth;\n    } else if (width >= column.maxWidth) {\n      width = column.maxWidth;\n    }\n\n    this.resize.emit({\n      column,\n      prevValue: column.width,\n      newValue: width\n    });\n  }\n\n  onColumnReordered({ prevIndex, newIndex, model }: any): void {\n    const column = this.getColumn(newIndex);\n    column.isTarget = false;\n    column.targetMarkerContext = undefined;\n    this.reorder.emit({\n      column: model,\n      prevValue: prevIndex,\n      newValue: newIndex\n    });\n  }\n\n  onTargetChanged({ prevIndex, newIndex, initialIndex }: any): void {\n    if (prevIndex || prevIndex === 0) {\n      const oldColumn = this.getColumn(prevIndex);\n      oldColumn.isTarget = false;\n      oldColumn.targetMarkerContext = undefined;\n    }\n    if (newIndex || newIndex === 0) {\n      const newColumn = this.getColumn(newIndex);\n      newColumn.isTarget = true;\n\n      if (initialIndex !== newIndex) {\n        newColumn.targetMarkerContext = {\n          class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n        };\n      }\n    }\n  }\n\n  getColumn(index: number): any {\n    const leftColumnCount = this._columnsByPin[0].columns.length;\n    if (index < leftColumnCount) {\n      return this._columnsByPin[0].columns[index];\n    }\n\n    const centerColumnCount = this._columnsByPin[1].columns.length;\n    if (index < leftColumnCount + centerColumnCount) {\n      return this._columnsByPin[1].columns[index - leftColumnCount];\n    }\n\n    return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n  }\n\n  onSort({ column, prevValue, newValue }: any): void {\n    // if we are dragging don't sort!\n    if (column.dragging) {\n      return;\n    }\n\n    const sorts = this.calcNewSorts(column, prevValue, newValue);\n    this.sort.emit({\n      sorts,\n      column,\n      prevValue,\n      newValue\n    });\n  }\n\n  calcNewSorts(column: any, prevValue: number, newValue: number): any[] {\n    let idx = 0;\n\n    if (!this.sorts) {\n      this.sorts = [];\n    }\n\n    const sorts = this.sorts.map((s, i) => {\n      s = { ...s };\n      if (s.prop === column.prop) {\n        idx = i;\n      }\n      return s;\n    });\n\n    if (newValue === undefined) {\n      sorts.splice(idx, 1);\n    } else if (prevValue) {\n      sorts[idx].dir = newValue;\n    } else {\n      if (this.sortType === SortType.single) {\n        sorts.splice(0, this.sorts.length);\n      }\n\n      sorts.push({ dir: newValue, prop: column.prop });\n    }\n\n    return sorts;\n  }\n\n  setStylesByGroup() {\n    this._styleByGroup.left = this.calcStylesByGroup('left');\n    this._styleByGroup.center = this.calcStylesByGroup('center');\n    this._styleByGroup.right = this.calcStylesByGroup('right');\n    if (!(this.cd as ViewRef).destroyed) {\n      this.cd.detectChanges();\n    }\n  }\n\n  calcStylesByGroup(group: string): any {\n    const widths = this._columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'center') {\n      translateXY(styles, offsetX * -1, 0);\n    } else if (group === 'right') {\n      const totalDiff = widths.total - this.innerWidth;\n      const offset = totalDiff * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n}\n","import { TableColumnProp } from '../types/table-column.type';\r\n\r\n// maybe rename this file to prop-getters.ts\r\n\r\nexport type ValueGetter = (obj: any, prop: TableColumnProp) => any;\r\n\r\n/**\r\n * Always returns the empty string ''\r\n */\r\nexport function emptyStringGetter(): string {\r\n  return '';\r\n}\r\n\r\n/**\r\n * Returns the appropriate getter function for this kind of prop.\r\n * If prop == null, returns the emptyStringGetter.\r\n */\r\nexport function getterForProp(prop: TableColumnProp): ValueGetter {\r\n  if (prop == null) {\r\n    return emptyStringGetter;\r\n  }\r\n\r\n  if (typeof prop === 'number') {\r\n    return numericIndexGetter;\r\n  } else {\r\n    // deep or simple\r\n    if (prop.indexOf('.') !== -1) {\r\n      return deepValueGetter;\r\n    } else {\r\n      return shallowValueGetter;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the value at this numeric index.\r\n * @param row array of values\r\n * @param index numeric index\r\n * @returns any or '' if invalid index\r\n */\r\nexport function numericIndexGetter(row: any[], index: number): any {\r\n  if (row == null) {\r\n    return '';\r\n  }\r\n  // mimic behavior of deepValueGetter\r\n  if (!row || index == null) {\r\n    return row;\r\n  }\r\n\r\n  const value = row[index];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns the value of a field.\r\n * (more efficient than deepValueGetter)\r\n * @param obj object containing the field\r\n * @param fieldName field name string\r\n */\r\nexport function shallowValueGetter(obj: any, fieldName: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !fieldName) {\r\n    return obj;\r\n  }\r\n\r\n  const value = obj[fieldName];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns a deep object given a string. zoo['animal.type']\r\n */\r\nexport function deepValueGetter(obj: any, path: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !path) {\r\n    return obj;\r\n  }\r\n\r\n  // check if path matches a root-level field\r\n  // { \"a.b.c\": 123 }\r\n  let current = obj[path];\r\n  if (current !== undefined) {\r\n    return current;\r\n  }\r\n\r\n  current = obj;\r\n  const split = path.split('.');\r\n\r\n  if (split.length) {\r\n    for (let i = 0; i < split.length; i++) {\r\n      current = current[split[i]];\r\n\r\n      // if found undefined, return empty string\r\n      if (current === undefined || current === null) {\r\n        return '';\r\n      }\r\n    }\r\n  }\r\n\r\n  return current;\r\n}\r\n","export enum SortDirection {\r\n  asc = 'asc',\r\n  desc = 'desc'\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { SortType } from '../types/sort.type';\r\nimport { SortDirection } from '../types/sort-direction.type';\r\nimport { SortPropDir } from '../types/sort-prop-dir.type';\r\n/**\r\n * Gets the next sort direction\r\n */\r\nexport function nextSortDir(sortType: SortType, current: SortDirection): SortDirection | undefined {\r\n  if (sortType === SortType.single) {\r\n    if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else {\r\n      return SortDirection.asc;\r\n    }\r\n  } else {\r\n    if (!current) {\r\n      return SortDirection.asc;\r\n    } else if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else if (current === SortDirection.desc) {\r\n      return undefined;\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Adapted from fueld-ui on 6/216\r\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\r\n */\r\nexport function orderByComparator(a: any, b: any): number {\r\n  if (a === null || typeof a === 'undefined') a = 0;\r\n  if (b === null || typeof b === 'undefined') b = 0;\r\n  if (a instanceof Date && b instanceof Date) {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n  } else if (isNaN(parseFloat(a)) || !isFinite(a) || (isNaN(parseFloat(b)) || !isFinite(b))) {\r\n    // Convert to string in case of a=0 or b=0\r\n    a = String(a);\r\n    b = String(b);\r\n    // Isn't a number so lowercase the string to properly compare\r\n    if (a.toLowerCase() < b.toLowerCase()) return -1;\r\n    if (a.toLowerCase() > b.toLowerCase()) return 1;\r\n  } else {\r\n    // Parse strings as numbers to compare properly\r\n    if (parseFloat(a) < parseFloat(b)) return -1;\r\n    if (parseFloat(a) > parseFloat(b)) return 1;\r\n  }\r\n\r\n  // equal each other\r\n  return 0;\r\n}\r\n\r\n/**\r\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\r\n * does not sort the `rows` argument in place\r\n */\r\nexport function sortRows(rows: any[], columns: any[], dirs: SortPropDir[]): any[] {\r\n  if (!rows) return [];\r\n  if (!dirs || !dirs.length || !columns) return [...rows];\r\n\r\n  /**\r\n   * record the row ordering of results from prior sort operations (if applicable)\r\n   * this is necessary to guarantee stable sorting behavior\r\n   */\r\n  const rowToIndexMap = new Map<any, number>();\r\n  rows.forEach((row, index) => rowToIndexMap.set(row, index));\r\n\r\n  const temp = [...rows];\r\n  const cols = columns.reduce((obj, col) => {\r\n    if (col.comparator && typeof col.comparator === 'function') {\r\n      obj[col.prop] = col.comparator;\r\n    }\r\n    return obj;\r\n  }, {});\r\n\r\n  // cache valueGetter and compareFn so that they\r\n  // do not need to be looked-up in the sort function body\r\n  const cachedDirs = dirs.map(dir => {\r\n    const prop = dir.prop;\r\n    return {\r\n      prop,\r\n      dir: dir.dir,\r\n      valueGetter: getterForProp(prop),\r\n      compareFn: cols[prop] || orderByComparator\r\n    };\r\n  });\r\n\r\n  return temp.sort(function(rowA: any, rowB: any) {\r\n    for (const cachedDir of cachedDirs) {\r\n      // Get property and valuegetters for column to be sorted\r\n      const { prop, valueGetter } = cachedDir;\r\n      // Get A and B cell values from rows based on properties of the columns\r\n      const propA = valueGetter(rowA, prop);\r\n      const propB = valueGetter(rowB, prop);\r\n\r\n      // Compare function gets five parameters:\r\n      // Two cell values to be compared as propA and propB\r\n      // Two rows corresponding to the cells as rowA and rowB\r\n      // Direction of the sort for this column as SortDirection\r\n      // Compare can be a standard JS comparison function (a,b) => -1|0|1\r\n      // as additional parameters are silently ignored. The whole row and sort\r\n      // direction enable more complex sort logic.\r\n      const comparison =\r\n        cachedDir.dir !== SortDirection.desc\r\n          ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\r\n          : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\r\n\r\n      // Don't return 0 yet in case of needing to sort by next property\r\n      if (comparison !== 0) return comparison;\r\n    }\r\n\r\n    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;\r\n\r\n    /**\r\n     * all else being equal, preserve original order of the rows (stable sort)\r\n     */\r\n    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\r\n  });\r\n}\r\n","import {\n  Component,\n  Input,\n  EventEmitter,\n  Output,\n  HostBinding,\n  HostListener,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { MouseEvent } from '../../events';\nimport { SortType } from '../../types/sort.type';\nimport { SelectionType } from '../../types/selection.type';\nimport { TableColumn } from '../../types/table-column.type';\nimport { nextSortDir } from '../../utils/sort';\nimport { SortDirection } from '../../types/sort-direction.type';\nimport { Subject } from 'rxjs';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'datatable-header-cell',\n  template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-container *ngIf=\"column.filter\">\n        <mat-form-field class=\"filter-header\">\n          <input\n            matInput\n            [placeholder]=\"column.name\"\n            [(ngModel)]=\"filterCache[column.prop]\"\n            (ngModelChange)=\"setFilter(column.prop)\"\n          />\n          <button\n            mat-button\n            *ngIf=\"filterCache[column.prop]\"\n            matSuffix\n            mat-icon-button\n            aria-label=\"Clear\"\n            (click)=\"resetFilter(column.prop)\"\n          >\n            <mat-icon class=\"mat-icon material-icons\">close</mat-icon>\n          </button>\n        </mat-form-field>\n        <button mat-icon-button>\n          <mat-icon class=\"mat-icon material-icons\" (click)=\"onSort()\">sort</mat-icon>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"!column.filter\">\n        <ng-template\n          *ngIf=\"isTarget\"\n          [ngTemplateOutlet]=\"targetMarkerTemplate\"\n          [ngTemplateOutletContext]=\"targetMarkerContext\"\n        >\n        </ng-template>\n        <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n          <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n        </label>\n        <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n          <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n        </span>\n        <ng-template\n          *ngIf=\"column.headerTemplate\"\n          [ngTemplateOutlet]=\"column.headerTemplate\"\n          [ngTemplateOutletContext]=\"cellContext\"\n        >\n        </ng-template>\n        <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n      </ng-container>\n    </div>\n  `,\n  host: {\n    class: 'datatable-header-cell'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableHeaderCellComponent {\n  @Input() sortType: SortType;\n  @Input() sortAscendingIcon: string;\n  @Input() sortDescendingIcon: string;\n\n  @Input() isTarget: boolean;\n  @Input() targetMarkerTemplate: any;\n  @Input() targetMarkerContext: any;\n\n  _allRowsSelected: boolean;\n\n  @Input() set allRowsSelected(value) {\n    this._allRowsSelected = value;\n    this.cellContext.allRowsSelected = value;\n  }\n  get allRowsSelected() {\n    return this._allRowsSelected;\n  }\n\n  @Input() selectionType: SelectionType;\n\n  @Input() set column(column: TableColumn) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.cd.markForCheck();\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  @HostBinding('style.height.px')\n  @Input()\n  headerHeight: number;\n\n  @Input() set sorts(val: any[]) {\n    this._sorts = val;\n    this.sortDir = this.calcSortDir(val);\n    this.cellContext.sortDir = this.sortDir;\n    this.sortClass = this.calcSortClass(this.sortDir);\n    this.cd.markForCheck();\n  }\n\n  get sorts(): any[] {\n    return this._sorts;\n  }\n\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\n  @Output() filter: EventEmitter<any> = new EventEmitter();\n\n  @HostBinding('class')\n  get columnCssClasses(): any {\n    let cls = 'datatable-header-cell';\n\n    if (this.column.sortable) cls += ' sortable';\n    if (this.column.resizeable) cls += ' resizeable';\n    if (this.column.headerClass) {\n      if (typeof this.column.headerClass === 'string') {\n        cls += ' ' + this.column.headerClass;\n      } else if (typeof this.column.headerClass === 'function') {\n        const res = this.column.headerClass({\n          column: this.column\n        });\n\n        if (typeof res === 'string') {\n          cls += res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n          for (const k of keys) {\n            if (res[k] === true) cls += ` ${k}`;\n          }\n        }\n      }\n    }\n\n    const sortDir = this.sortDir;\n    if (sortDir) {\n      cls += ` sort-active sort-${sortDir}`;\n    }\n\n    return cls;\n  }\n\n  @HostBinding('attr.title')\n  get name(): string {\n    // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n    return this.column.headerTemplate === undefined ? this.column.name : undefined;\n  }\n\n  @HostBinding('style.minWidth.px')\n  get minWidth(): number {\n    return this.column.minWidth;\n  }\n\n  @HostBinding('style.maxWidth.px')\n  get maxWidth(): number {\n    return this.column.maxWidth;\n  }\n\n  @HostBinding('style.width.px')\n  get width(): number {\n    return this.column.width;\n  }\n\n  get isCheckboxable(): boolean {\n    return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n  }\n\n  sortFn = this.onSort.bind(this);\n  sortClass: string;\n  sortDir: SortDirection;\n  selectFn = this.select.emit.bind(this.select);\n  filterCache = {};\n\n  cellContext: any = {\n    column: this.column,\n    sortDir: this.sortDir,\n    sortFn: this.sortFn,\n    allRowsSelected: this.allRowsSelected,\n    selectFn: this.selectFn\n  };\n\n  private _column: TableColumn;\n  private _sorts: any[];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  @HostListener('contextmenu', ['$event'])\n  onContextmenu($event: MouseEvent): void {\n    this.columnContextmenu.emit({ event: $event, column: this.column });\n  }\n\n  calcSortDir(sorts: any[]): any {\n    if (sorts && this.column) {\n      const sort = sorts.find((s: any) => {\n        return s.prop === this.column.prop;\n      });\n\n      if (sort) return sort.dir;\n    }\n  }\n\n  onSort(): void {\n    if (!this.column.sortable) return;\n\n    const newValue = nextSortDir(this.sortType, this.sortDir);\n    this.sort.emit({\n      column: this.column,\n      prevValue: this.sortDir,\n      newValue\n    });\n  }\n\n  calcSortClass(sortDir: SortDirection): string {\n    if (sortDir === SortDirection.asc) {\n      return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n    } else if (sortDir === SortDirection.desc) {\n      return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n    } else {\n      return `sort-btn`;\n    }\n  }\n\n  setFilter(column) {\n    this.filter.emit({\n      column\n    });\n  }\n\n  resetFilter(column) {\n    this.filterCache[column] = '';\n    this.filter.emit({\n      column\n    });\n  }\n}\n","/**\r\n * This object contains the cache of the various row heights that are present inside\r\n * the data table.   Its based on Fenwick tree data structure that helps with\r\n * querying sums that have time complexity of log n.\r\n *\r\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\r\n * https://github.com/mikolalysenko/fenwick-tree\r\n *\r\n */\r\nexport class RowHeightCache {\r\n  /**\r\n   * Tree Array stores the cumulative information of the row heights to perform efficient\r\n   * range queries and updates.  Currently the tree is initialized to the base row\r\n   * height instead of the detail row height.\r\n   */\r\n  private treeArray: number[] = [];\r\n\r\n  /**\r\n   * Clear the Tree array.\r\n   */\r\n  clearCache(): void {\r\n    this.treeArray = [];\r\n  }\r\n\r\n  /**\r\n   * Initialize the Fenwick tree with row Heights.\r\n   *\r\n   * @param rows The array of rows which contain the expanded status.\r\n   * @param rowHeight The row height.\r\n   * @param detailRowHeight The detail row height.\r\n   */\r\n  initCache(details: any): void {\r\n    const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\r\n    const isFn = typeof rowHeight === 'function';\r\n    const isDetailFn = typeof detailRowHeight === 'function';\r\n\r\n    if (!isFn && isNaN(rowHeight)) {\r\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\r\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\r\n    }\r\n\r\n    // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\r\n    if (!isDetailFn && isNaN(detailRowHeight)) {\r\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\r\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\r\n    }\r\n\r\n    const n = externalVirtual ? rowCount : rows.length;\r\n    this.treeArray = new Array(n);\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      this.treeArray[i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      const row = rows[i];\r\n      let currentRowHeight = rowHeight;\r\n      if (isFn) {\r\n        currentRowHeight = rowHeight(row);\r\n      }\r\n\r\n      // Add the detail row height to the already expanded rows.\r\n      // This is useful for the table that goes through a filter or sort.\r\n      const expanded = rowExpansions.has(row);\r\n      if (row && expanded) {\r\n        if (isDetailFn) {\r\n          const index = rowIndexes.get(row);\r\n          currentRowHeight += detailRowHeight(row, index);\r\n        } else {\r\n          currentRowHeight += detailRowHeight;\r\n        }\r\n      }\r\n\r\n      this.update(i, currentRowHeight);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given the ScrollY position i.e. sum, provide the rowIndex\r\n   * that is present in the current view port.  Below handles edge cases.\r\n   */\r\n  getRowIndex(scrollY: number): number {\r\n    if (scrollY === 0) return 0;\r\n    return this.calcRowIndex(scrollY);\r\n  }\r\n\r\n  /**\r\n   * When a row is expanded or rowHeight is changed, update the height.  This can\r\n   * be utilized in future when Angular Data table supports dynamic row heights.\r\n   */\r\n  update(atRowIndex: number, byRowHeight: number): void {\r\n    if (!this.treeArray.length) {\r\n      throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\r\n        Row Height cache not initialized.`);\r\n    }\r\n\r\n    const n = this.treeArray.length;\r\n    atRowIndex |= 0;\r\n\r\n    while (atRowIndex < n) {\r\n      this.treeArray[atRowIndex] += byRowHeight;\r\n      atRowIndex |= atRowIndex + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Range Sum query from 1 to the rowIndex\r\n   */\r\n  query(atIndex: number): number {\r\n    if (!this.treeArray.length) {\r\n      throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\r\n    }\r\n\r\n    let sum = 0;\r\n    atIndex |= 0;\r\n\r\n    while (atIndex >= 0) {\r\n      sum += this.treeArray[atIndex];\r\n      atIndex = (atIndex & (atIndex + 1)) - 1;\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Find the total height between 2 row indexes\r\n   */\r\n  queryBetween(atIndexA: number, atIndexB: number): number {\r\n    return this.query(atIndexB) - this.query(atIndexA - 1);\r\n  }\r\n\r\n  /**\r\n   * Given the ScrollY position i.e. sum, provide the rowIndex\r\n   * that is present in the current view port.\r\n   */\r\n  private calcRowIndex(sum: number): number {\r\n    if (!this.treeArray.length) return 0;\r\n\r\n    let pos = -1;\r\n    const dataLength = this.treeArray.length;\r\n\r\n    // Get the highest bit for the block size.\r\n    const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\r\n\r\n    for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\r\n      const nextPos = pos + blockSize;\r\n      if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\r\n        sum -= this.treeArray[nextPos];\r\n        pos = nextPos;\r\n      }\r\n    }\r\n\r\n    return pos + 1;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { ScrollerComponent } from './scroller.component';\r\nimport { MouseEvent } from '../../events';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { columnsByPin, columnGroupWidths } from '../../utils/column';\r\nimport { RowHeightCache } from '../../utils/row-height-cache';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-body',\r\n  template: `\r\n    <datatable-selection\r\n      #selector\r\n      [selected]=\"selected\"\r\n      [rows]=\"rows\"\r\n      [selectCheck]=\"selectCheck\"\r\n      [selectEnabled]=\"selectEnabled\"\r\n      [selectionType]=\"selectionType\"\r\n      [rowIdentity]=\"rowIdentity\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n    >\r\n      <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\r\n      <datatable-scroller\r\n        *ngIf=\"rows?.length\"\r\n        [scrollbarV]=\"scrollbarV\"\r\n        [scrollbarH]=\"scrollbarH\"\r\n        [scrollHeight]=\"scrollHeight\"\r\n        [scrollWidth]=\"columnGroupWidths?.total\"\r\n        (scroll)=\"onBodyScroll($event)\"\r\n      >\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n        <datatable-row-wrapper\r\n          [groupedRows]=\"groupedRows\"\r\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [ngStyle]=\"getRowsStyles(group)\"\r\n          [rowDetail]=\"rowDetail\"\r\n          [groupHeader]=\"groupHeader\"\r\n          [offsetX]=\"offsetX\"\r\n          [detailRowHeight]=\"getDetailRowHeight(group[i], i)\"\r\n          [row]=\"group\"\r\n          [expanded]=\"getRowExpanded(group)\"\r\n          [rowIndex]=\"getRowIndex(group[i])\"\r\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\r\n        >\r\n          <datatable-body-row\r\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\r\n            tabindex=\"-1\"\r\n            [isSelected]=\"selector.getRowSelected(group)\"\r\n            [innerWidth]=\"innerWidth\"\r\n            [offsetX]=\"offsetX\"\r\n            [columns]=\"columns\"\r\n            [rowDetail]=\"rowDetail\"\r\n            [rowHeight]=\"getRowHeight(group)\"\r\n            [row]=\"group\"\r\n            [rowIndex]=\"getRowIndex(group)\"\r\n            [expanded]=\"getRowExpanded(group)\"\r\n            [rowClass]=\"rowClass\"\r\n            [displayCheck]=\"displayCheck\"\r\n            [treeStatus]=\"group.treeStatus\"\r\n            (treeAction)=\"onTreeAction(group)\"\r\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\r\n          >\r\n          </datatable-body-row>\r\n          <ng-template #groupedRowsTemplate>\r\n            <datatable-body-row\r\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\r\n              tabindex=\"-1\"\r\n              [isSelected]=\"selector.getRowSelected(row)\"\r\n              [innerWidth]=\"innerWidth\"\r\n              [offsetX]=\"offsetX\"\r\n              [columns]=\"columns\"\r\n              [rowHeight]=\"getRowHeight(row)\"\r\n              [row]=\"row\"\r\n              [group]=\"group.value\"\r\n              [rowIndex]=\"getRowIndex(row)\"\r\n              [expanded]=\"getRowExpanded(row)\"\r\n              [rowClass]=\"rowClass\"\r\n              (activate)=\"selector.onActivate($event, i)\"\r\n            >\r\n            </datatable-body-row>\r\n          </ng-template>\r\n        </datatable-row-wrapper>\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\r\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n      </datatable-scroller>\r\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\r\n    </datatable-selection>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    class: 'datatable-body'\r\n  }\r\n})\r\nexport class DataTableBodyComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean;\r\n  @Input() scrollbarH: boolean;\r\n  @Input() loadingIndicator: boolean;\r\n  @Input() externalPaging: boolean;\r\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number);\r\n  @Input() offsetX: number;\r\n  @Input() emptyMessage: string;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() selected: any[] = [];\r\n  @Input() rowIdentity: any;\r\n  @Input() rowDetail: any;\r\n  @Input() groupHeader: any;\r\n  @Input() selectCheck: any;\r\n  @Input() displayCheck: any;\r\n  @Input() trackByProp: string;\r\n  @Input() rowClass: any;\r\n  @Input() groupedRows: any;\r\n  @Input() groupExpansionDefault: boolean;\r\n  @Input() innerWidth: number;\r\n  @Input() groupRowsBy: string;\r\n  @Input() virtualization: boolean;\r\n  @Input() summaryRow: boolean;\r\n  @Input() summaryPosition: string;\r\n  @Input() summaryHeight: number;\r\n\r\n  @Input() set pageSize(val: number) {\r\n    this._pageSize = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get pageSize(): number {\r\n    return this._pageSize;\r\n  }\r\n\r\n  @Input() set rows(val: any[]) {\r\n    this._rows = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get rows(): any[] {\r\n    return this._rows;\r\n  }\r\n\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n    const colsByPin = columnsByPin(val);\r\n    this.columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input() set offset(val: number) {\r\n    this._offset = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get offset(): number {\r\n    return this._offset;\r\n  }\r\n\r\n  @Input() set rowCount(val: number) {\r\n    this._rowCount = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get rowCount(): number {\r\n    return this._rowCount;\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  get bodyWidth(): string {\r\n    if (this.scrollbarH) {\r\n      return this.innerWidth + 'px';\r\n    } else {\r\n      return '100%';\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  @HostBinding('style.height')\r\n  set bodyHeight(val) {\r\n    if (this.scrollbarV) {\r\n      this._bodyHeight = val + 'px';\r\n    } else {\r\n      this._bodyHeight = 'auto';\r\n    }\r\n\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get bodyHeight() {\r\n    return this._bodyHeight;\r\n  }\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() detailToggle: EventEmitter<any> = new EventEmitter();\r\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild(ScrollerComponent, { static: false }) scroller: ScrollerComponent;\r\n\r\n  /**\r\n   * Returns if selection is enabled.\r\n   */\r\n  get selectEnabled(): boolean {\r\n    return !!this.selectionType;\r\n  }\r\n\r\n  /**\r\n   * Property that would calculate the height of scroll bar\r\n   * based on the row heights cache for virtual scroll and virtualization. Other scenarios\r\n   * calculate scroll height automatically (as height will be undefined).\r\n   */\r\n  get scrollHeight(): number | undefined {\r\n    if (this.scrollbarV && this.virtualization && this.rowCount) {\r\n      return this.rowHeightsCache.query(this.rowCount - 1);\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n\r\n  rowHeightsCache: RowHeightCache = new RowHeightCache();\r\n  temp: any[] = [];\r\n  offsetY = 0;\r\n  indexes: any = {};\r\n  columnGroupWidths: any;\r\n  columnGroupWidthsWithoutGroup: any;\r\n  rowTrackingFn: any;\r\n  listener: any;\r\n  rowIndexes: any = new Map();\r\n  rowExpansions: any[] = [];\r\n\r\n  _rows: any[];\r\n  _bodyHeight: any;\r\n  _columns: any[];\r\n  _rowCount: number;\r\n  _offset: number;\r\n  _pageSize: number;\r\n\r\n  /**\r\n   * Creates an instance of DataTableBodyComponent.\r\n   */\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    // declare fn here so we can get access to the `this` property\r\n    this.rowTrackingFn = (index: number, row: any): any => {\r\n      const idx = this.getRowIndex(row);\r\n      if (this.trackByProp) {\r\n        return row[this.trackByProp];\r\n      } else {\r\n        return idx;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Called after the constructor, initializing input properties\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.rowDetail) {\r\n      this.listener = this.rowDetail.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\r\n        if (type === 'row') {\r\n          this.toggleRowExpansion(value);\r\n        }\r\n        if (type === 'all') {\r\n          this.toggleAllRows(value);\r\n        }\r\n\r\n        // Refresh rows after toggle\r\n        // Fixes #883\r\n        this.updateIndexes();\r\n        this.updateRows();\r\n        this.cd.markForCheck();\r\n      });\r\n    }\r\n\r\n    if (this.groupHeader) {\r\n      this.listener = this.groupHeader.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\r\n        if (type === 'group') {\r\n          this.toggleRowExpansion(value);\r\n        }\r\n        if (type === 'all') {\r\n          this.toggleAllRows(value);\r\n        }\r\n\r\n        // Refresh rows after toggle\r\n        // Fixes #883\r\n        this.updateIndexes();\r\n        this.updateRows();\r\n        this.cd.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called once, before the instance is destroyed.\r\n   */\r\n  ngOnDestroy(): void {\r\n    if (this.rowDetail || this.groupHeader) {\r\n      this.listener.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the Y offset given a new offset.\r\n   */\r\n  updateOffsetY(offset?: number): void {\r\n    // scroller is missing on empty table\r\n    if (!this.scroller) {\r\n      return;\r\n    }\r\n\r\n    if (this.scrollbarV && this.virtualization && offset) {\r\n      // First get the row Index that we need to move to.\r\n      const rowIndex = this.pageSize * offset;\r\n      offset = this.rowHeightsCache.query(rowIndex - 1);\r\n    } else if (this.scrollbarV && !this.virtualization) {\r\n      offset = 0;\r\n    }\r\n\r\n    this.scroller.setOffset(offset || 0);\r\n  }\r\n\r\n  /**\r\n   * Body was scrolled, this is mainly useful for\r\n   * when a user is server-side pagination via virtual scroll.\r\n   */\r\n  onBodyScroll(event: any): void {\r\n    const scrollYPos: number = event.scrollYPos;\r\n    const scrollXPos: number = event.scrollXPos;\r\n\r\n    // if scroll change, trigger update\r\n    // this is mainly used for header cell positions\r\n    if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\r\n      this.scroll.emit({\r\n        offsetY: scrollYPos,\r\n        offsetX: scrollXPos\r\n      });\r\n    }\r\n\r\n    this.offsetY = scrollYPos;\r\n    this.offsetX = scrollXPos;\r\n\r\n    this.updateIndexes();\r\n    this.updatePage(event.direction);\r\n    this.updateRows();\r\n  }\r\n\r\n  /**\r\n   * Updates the page given a direction.\r\n   */\r\n  updatePage(direction: string): void {\r\n    let offset = this.indexes.first / this.pageSize;\r\n\r\n    if (direction === 'up') {\r\n      offset = Math.ceil(offset);\r\n    } else if (direction === 'down') {\r\n      offset = Math.floor(offset);\r\n    }\r\n\r\n    if (direction !== undefined && !isNaN(offset)) {\r\n      this.page.emit({ offset });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the rows in the view port\r\n   */\r\n  updateRows(): void {\r\n    const { first, last } = this.indexes;\r\n    let rowIndex = first;\r\n    let idx = 0;\r\n    const temp: any[] = [];\r\n\r\n    this.rowIndexes.clear();\r\n\r\n    // if grouprowsby has been specified treat row paging\r\n    // parameters as group paging parameters ie if limit 10 has been\r\n    // specified treat it as 10 groups rather than 10 rows\r\n    if (this.groupedRows) {\r\n      let maxRowsPerGroup = 3;\r\n      // if there is only one group set the maximum number of\r\n      // rows per group the same as the total number of rows\r\n      if (this.groupedRows.length === 1) {\r\n        maxRowsPerGroup = this.groupedRows[0].value.length;\r\n      }\r\n\r\n      while (rowIndex < last && rowIndex < this.groupedRows.length) {\r\n        // Add the groups into this page\r\n        const group = this.groupedRows[rowIndex];\r\n        temp[idx] = group;\r\n        idx++;\r\n\r\n        // Group index in this context\r\n        rowIndex++;\r\n      }\r\n    } else {\r\n      while (rowIndex < last && rowIndex < this.rowCount) {\r\n        const row = this.rows[rowIndex];\r\n\r\n        if (row) {\r\n          this.rowIndexes.set(row, rowIndex);\r\n          temp[idx] = row;\r\n        }\r\n\r\n        idx++;\r\n        rowIndex++;\r\n      }\r\n    }\r\n\r\n    this.temp = temp;\r\n  }\r\n\r\n  /**\r\n   * Get the row height\r\n   */\r\n  getRowHeight(row: any): number {\r\n    // if its a function return it\r\n    if (typeof this.rowHeight === 'function') {\r\n      return this.rowHeight(row);\r\n    }\r\n\r\n    return this.rowHeight as number;\r\n  }\r\n\r\n  /**\r\n   * @param group the group with all rows\r\n   */\r\n  getGroupHeight(group: any): number {\r\n    let rowHeight = 0;\r\n\r\n    if (group.value) {\r\n      for (let index = 0; index < group.value.length; index++) {\r\n        rowHeight += this.getRowAndDetailHeight(group.value[index]);\r\n      }\r\n    }\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  /**\r\n   * Calculate row height based on the expanded state of the row.\r\n   */\r\n  getRowAndDetailHeight(row: any): number {\r\n    let rowHeight = this.getRowHeight(row);\r\n    const expanded = this.getRowExpanded(row);\r\n\r\n    // Adding detail row height if its expanded.\r\n    if (expanded) {\r\n      rowHeight += this.getDetailRowHeight(row);\r\n    }\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  /**\r\n   * Get the height of the detail row.\r\n   */\r\n  getDetailRowHeight = (row?: any, index?: any): number => {\r\n    if (!this.rowDetail) {\r\n      return 0;\r\n    }\r\n    const rowHeight = this.rowDetail.rowHeight;\r\n    return typeof rowHeight === 'function' ? rowHeight(row, index) : (rowHeight as number);\r\n  };\r\n\r\n  /**\r\n   * Calculates the styles for the row so that the rows can be moved in 2D space\r\n   * during virtual scroll inside the DOM.   In the below case the Y position is\r\n   * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\r\n   * 100 px then following styles are generated:\r\n   *\r\n   * transform: translate3d(0px, 0px, 0px);    ->  row0\r\n   * transform: translate3d(0px, 30px, 0px);   ->  row1\r\n   * transform: translate3d(0px, 130px, 0px);  ->  row2\r\n   *\r\n   * Row heights have to be calculated based on the row heights cache as we wont\r\n   * be able to determine which row is of what height before hand.  In the above\r\n   * case the positionY of the translate3d for row2 would be the sum of all the\r\n   * heights of the rows before it (i.e. row0 and row1).\r\n   *\r\n   * @param rows the row that needs to be placed in the 2D space.\r\n   * @returns the CSS3 style to be applied\r\n   *\r\n   * @memberOf DataTableBodyComponent\r\n   */\r\n  getRowsStyles(rows: any): any {\r\n    const styles: any = {};\r\n\r\n    // only add styles for the group if there is a group\r\n    if (this.groupedRows) {\r\n      styles.width = this.columnGroupWidths.total;\r\n    }\r\n\r\n    if (this.scrollbarV && this.virtualization) {\r\n      let idx = 0;\r\n\r\n      if (this.groupedRows) {\r\n        // Get the latest row rowindex in a group\r\n        const row = rows[rows.length - 1];\r\n        idx = row ? this.getRowIndex(row) : 0;\r\n      } else {\r\n        idx = this.getRowIndex(rows);\r\n      }\r\n\r\n      // const pos = idx * rowHeight;\r\n      // The position of this row would be the sum of all row heights\r\n      // until the previous row position.\r\n      const pos = this.rowHeightsCache.query(idx - 1);\r\n\r\n      translateXY(styles, 0, pos);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Calculate bottom summary row offset for scrollbar mode.\r\n   * For more information about cache and offset calculation\r\n   * see description for `getRowsStyles` method\r\n   *\r\n   * @returns the CSS3 style to be applied\r\n   *\r\n   * @memberOf DataTableBodyComponent\r\n   */\r\n  getBottomSummaryRowStyles(): any {\r\n    if (!this.scrollbarV || !this.rows || !this.rows.length) {\r\n      return null;\r\n    }\r\n\r\n    const styles = { position: 'absolute' };\r\n    const pos = this.rowHeightsCache.query(this.rows.length - 1);\r\n\r\n    translateXY(styles, 0, pos);\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Hides the loading indicator\r\n   */\r\n  hideIndicator(): void {\r\n    setTimeout(() => (this.loadingIndicator = false), 500);\r\n  }\r\n\r\n  /**\r\n   * Updates the index of the rows in the viewport\r\n   */\r\n  updateIndexes(): void {\r\n    let first = 0;\r\n    let last = 0;\r\n\r\n    if (this.scrollbarV) {\r\n      if (this.virtualization) {\r\n        // Calculation of the first and last indexes will be based on where the\r\n        // scrollY position would be at.  The last index would be the one\r\n        // that shows up inside the view port the last.\r\n        const height = parseInt(this.bodyHeight, 0);\r\n        first = this.rowHeightsCache.getRowIndex(this.offsetY);\r\n        last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\r\n      } else {\r\n        // If virtual rows are not needed\r\n        // We render all in one go\r\n        first = 0;\r\n        last = this.rowCount;\r\n      }\r\n    } else {\r\n      // The server is handling paging and will pass an array that begins with the\r\n      // element at a specified offset.  first should always be 0 with external paging.\r\n      if (!this.externalPaging) {\r\n        first = Math.max(this.offset * this.pageSize, 0);\r\n      }\r\n      last = Math.min(first + this.pageSize, this.rowCount);\r\n    }\r\n\r\n    this.indexes = { first, last };\r\n  }\r\n\r\n  /**\r\n   * Refreshes the full Row Height cache.  Should be used\r\n   * when the entire row array state has changed.\r\n   */\r\n  refreshRowHeightCache(): void {\r\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\r\n      return;\r\n    }\r\n\r\n    // clear the previous row height cache if already present.\r\n    // this is useful during sorts, filters where the state of the\r\n    // rows array is changed.\r\n    this.rowHeightsCache.clearCache();\r\n\r\n    // Initialize the tree only if there are rows inside the tree.\r\n    if (this.rows && this.rows.length) {\r\n      const rowExpansions = new Set();\r\n      for (const row of this.rows) {\r\n        if (this.getRowExpanded(row)) {\r\n          rowExpansions.add(row);\r\n        }\r\n      }\r\n\r\n      this.rowHeightsCache.initCache({\r\n        rows: this.rows,\r\n        rowHeight: this.rowHeight,\r\n        detailRowHeight: this.getDetailRowHeight,\r\n        externalVirtual: this.scrollbarV && this.externalPaging,\r\n        rowCount: this.rowCount,\r\n        rowIndexes: this.rowIndexes,\r\n        rowExpansions\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the index for the view port\r\n   */\r\n  getAdjustedViewPortIndex(): number {\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    // If the scroll bar is just below the row which is highlighted then make that as the\r\n    // first index.\r\n    const viewPortFirstRowIndex = this.indexes.first;\r\n\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\r\n      return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\r\n    }\r\n\r\n    return viewPortFirstRowIndex;\r\n  }\r\n\r\n  /**\r\n   * Toggle the Expansion of the row i.e. if the row is expanded then it will\r\n   * collapse and vice versa.   Note that the expanded status is stored as\r\n   * a part of the row object itself as we have to preserve the expanded row\r\n   * status in case of sorting and filtering of the row set.\r\n   */\r\n  toggleRowExpansion(row: any): void {\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n    const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\r\n    const expanded = rowExpandedIdx > -1;\r\n\r\n    // If the detailRowHeight is auto --> only in case of non-virtualized scroll\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\r\n      // const idx = this.rowIndexes.get(row) || 0;\r\n      const idx = this.getRowIndex(row);\r\n      this.rowHeightsCache.update(idx, detailRowHeight);\r\n    }\r\n\r\n    // Update the toggled row and update thive nevere heights in the cache.\r\n    if (expanded) {\r\n      this.rowExpansions.splice(rowExpandedIdx, 1);\r\n    } else {\r\n      this.rowExpansions.push(row);\r\n    }\r\n\r\n    this.detailToggle.emit({\r\n      rows: [row],\r\n      currentIndex: viewPortFirstRowIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand/Collapse all the rows no matter what their state is.\r\n   */\r\n  toggleAllRows(expanded: boolean): void {\r\n    // clear prev expansions\r\n    this.rowExpansions = [];\r\n\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n\r\n    if (expanded) {\r\n      for (const row of this.rows) {\r\n        this.rowExpansions.push(row);\r\n      }\r\n    }\r\n\r\n    if (this.scrollbarV) {\r\n      // Refresh the full row heights cache since every row was affected.\r\n      this.recalcLayout();\r\n    }\r\n\r\n    // Emit all rows that have been expanded.\r\n    this.detailToggle.emit({\r\n      rows: this.rows,\r\n      currentIndex: viewPortFirstRowIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Recalculates the table\r\n   */\r\n  recalcLayout(): void {\r\n    this.refreshRowHeightCache();\r\n    this.updateIndexes();\r\n    this.updateRows();\r\n  }\r\n\r\n  /**\r\n   * Tracks the column\r\n   */\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  /**\r\n   * Gets the row pinning group styles\r\n   */\r\n  stylesByGroup(group: string) {\r\n    const widths = this.columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'left') {\r\n      translateXY(styles, offsetX, 0);\r\n    } else if (group === 'right') {\r\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n      const totalDiff = widths.total - bodyWidth;\r\n      const offsetDiff = totalDiff - offsetX;\r\n      const offset = offsetDiff * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Returns if the row was expanded and set default row expansion when row expansion is empty\r\n   */\r\n  getRowExpanded(row: any): boolean {\r\n    if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\r\n      for (const group of this.groupedRows) {\r\n        this.rowExpansions.push(group);\r\n      }\r\n    }\r\n\r\n    return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\r\n  }\r\n\r\n  getRowExpandedIdx(row: any, expanded: any[]): number {\r\n    if (!expanded || !expanded.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return expanded.findIndex(r => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the row index given a row\r\n   */\r\n  getRowIndex(row: any): number {\r\n    return this.rowIndexes.get(row) || 0;\r\n  }\r\n\r\n  onTreeAction(row: any) {\r\n    this.treeAction.emit({ row });\r\n  }\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DataTableFooterTemplateDirective } from './footer-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-footer' })\r\nexport class DatatableFooterDirective {\r\n  @Input() footerHeight: number;\r\n  @Input() totalMessage: string;\r\n  @Input() selectedMessage: string | boolean;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableFooterTemplateDirective, { read: TemplateRef, static: false })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter, ChangeDetectionStrategy, Input, TemplateRef } from '@angular/core';\r\nimport { DatatableFooterDirective } from './footer.directive';\r\n@Component({\r\n  selector: 'datatable-footer',\r\n  template: `\r\n    <div\r\n      class=\"datatable-footer-inner\"\r\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\r\n      [style.height.px]=\"footerHeight\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"footerTemplate\"\r\n        [ngTemplateOutlet]=\"footerTemplate.template\"\r\n        [ngTemplateOutletContext]=\"{\r\n          rowCount: rowCount,\r\n          pageSize: pageSize,\r\n          selectedCount: selectedCount,\r\n          curPage: curPage,\r\n          offset: offset\r\n        }\"\r\n      >\r\n      </ng-template>\r\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\r\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\r\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\r\n      </div>\r\n      <datatable-pager\r\n        *ngIf=\"!footerTemplate\"\r\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\r\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\r\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\r\n        [pagerNextIcon]=\"pagerNextIcon\"\r\n        [page]=\"curPage\"\r\n        [size]=\"pageSize\"\r\n        [count]=\"rowCount\"\r\n        [hidden]=\"!isVisible\"\r\n        (change)=\"page.emit($event)\"\r\n      >\r\n      </datatable-pager>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-footer'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableFooterComponent {\r\n  @Input() footerHeight: number;\r\n  @Input() rowCount: number;\r\n  @Input() pageSize: number;\r\n  @Input() offset: number;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n  @Input() totalMessage: string;\r\n  @Input() footerTemplate: DatatableFooterDirective;\r\n\r\n  @Input() selectedCount: number = 0;\r\n  @Input() selectedMessage: string | boolean;\r\n\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n\r\n  get isVisible(): boolean {\r\n    return this.rowCount / this.pageSize > 1;\r\n  }\r\n\r\n  get curPage(): number {\r\n    return this.offset + 1;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-pager',\r\n  template: `\r\n    <ul class=\"pager\">\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\r\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\r\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li\r\n        role=\"button\"\r\n        [attr.aria-label]=\"'page ' + pg.number\"\r\n        class=\"pages\"\r\n        *ngFor=\"let pg of pages\"\r\n        [class.active]=\"pg.number === page\"\r\n      >\r\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\r\n          {{ pg.text }}\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\r\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\r\n          <i class=\"{{ pagerNextIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  `,\r\n  host: {\r\n    class: 'datatable-pager'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTablePagerComponent {\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input()\r\n  set size(val: number) {\r\n    this._size = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get size(): number {\r\n    return this._size;\r\n  }\r\n\r\n  @Input()\r\n  set count(val: number) {\r\n    this._count = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n\r\n  @Input()\r\n  set page(val: number) {\r\n    this._page = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  get totalPages(): number {\r\n    const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\r\n    return Math.max(count || 0, 1);\r\n  }\r\n\r\n  @Output() change: EventEmitter<any> = new EventEmitter();\r\n\r\n  _count: number = 0;\r\n  _page: number = 1;\r\n  _size: number = 0;\r\n  pages: any;\r\n\r\n  canPrevious(): boolean {\r\n    return this.page > 1;\r\n  }\r\n\r\n  canNext(): boolean {\r\n    return this.page < this.totalPages;\r\n  }\r\n\r\n  prevPage(): void {\r\n    this.selectPage(this.page - 1);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.selectPage(this.page + 1);\r\n  }\r\n\r\n  selectPage(page: number): void {\r\n    if (page > 0 && page <= this.totalPages && page !== this.page) {\r\n      this.page = page;\r\n\r\n      this.change.emit({\r\n        page\r\n      });\r\n    }\r\n  }\r\n\r\n  calcPages(page?: number): any[] {\r\n    const pages = [];\r\n    let startPage = 1;\r\n    let endPage = this.totalPages;\r\n    const maxSize = 5;\r\n    const isMaxSized = maxSize < this.totalPages;\r\n\r\n    page = page || this.page;\r\n\r\n    if (isMaxSized) {\r\n      startPage = page - Math.floor(maxSize / 2);\r\n      endPage = page + Math.floor(maxSize / 2);\r\n\r\n      if (startPage < 1) {\r\n        startPage = 1;\r\n        endPage = Math.min(startPage + maxSize - 1, this.totalPages);\r\n      } else if (endPage > this.totalPages) {\r\n        startPage = Math.max(this.totalPages - maxSize + 1, 1);\r\n        endPage = this.totalPages;\r\n      }\r\n    }\r\n\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      pages.push({\r\n        number: num,\r\n        text: <string>(<any>num)\r\n      });\r\n    }\r\n\r\n    return pages;\r\n  }\r\n}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-progress',\r\n  template: `\r\n    <div class=\"progress-linear\" role=\"progressbar\">\r\n      <div class=\"container\">\r\n        <div class=\"bar\"></div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProgressBarComponent {}\r\n","export enum Keys {\r\n  up = 38,\r\n  down = 40,\r\n  return = 13,\r\n  escape = 27,\r\n  left = 37,\r\n  right = 39\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  HostBinding,\r\n  ElementRef,\r\n  Output,\r\n  KeyValueDiffers,\r\n  KeyValueDiffer,\r\n  EventEmitter,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  DoCheck,\r\n  SkipSelf\r\n} from '@angular/core';\r\n\r\nimport { TreeStatus } from './body-cell.component';\r\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\r\nimport { Keys } from '../../utils/keys';\r\nimport { ScrollbarHelper } from '../../services/scrollbar-helper.service';\r\nimport { translateXY } from '../../utils/translate';\r\nimport { style } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'datatable-body-row',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div\r\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\r\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\r\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\r\n    >\r\n      <datatable-body-cell\r\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\r\n        tabindex=\"-1\"\r\n        [row]=\"row\"\r\n        [group]=\"group\"\r\n        [rowDetail]=\"rowDetail\"\r\n        [expanded]=\"expanded\"\r\n        [isSelected]=\"isSelected\"\r\n        [rowIndex]=\"rowIndex\"\r\n        [column]=\"column\"\r\n        [rowHeight]=\"rowHeight\"\r\n        [displayCheck]=\"displayCheck\"\r\n        [treeStatus]=\"treeStatus\"\r\n        (activate)=\"onActivate($event, ii)\"\r\n        (treeAction)=\"onTreeAction()\"\r\n      >\r\n      </datatable-body-cell>\r\n    </div>\r\n  `\r\n})\r\nexport class DataTableBodyRowComponent implements DoCheck {\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n    this.recalculateColumns(val);\r\n    this.buildStylesByGroup();\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input() set innerWidth(val: number) {\r\n    if (this._columns) {\r\n      const colByPin = columnsByPin(this._columns);\r\n      this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n    }\r\n\r\n    this._innerWidth = val;\r\n    this.recalculateColumns();\r\n    this.buildStylesByGroup();\r\n  }\r\n\r\n  get innerWidth(): number {\r\n    return this._innerWidth;\r\n  }\r\n\r\n  @Input() expanded: boolean;\r\n  @Input() rowClass: any;\r\n  @Input() row: any;\r\n  @Input() group: any;\r\n  @Input() isSelected: boolean;\r\n  @Input() rowIndex: number;\r\n  @Input() displayCheck: any;\r\n  @Input() treeStatus: TreeStatus = 'collapsed';\r\n  @Input() rowDetail: any;\r\n\r\n  @Input()\r\n  set offsetX(val: number) {\r\n    this._offsetX = val;\r\n    this.buildStylesByGroup();\r\n  }\r\n  get offsetX() {\r\n    return this._offsetX;\r\n  }\r\n\r\n  @HostBinding('class')\r\n  get cssClass() {\r\n    let cls = 'datatable-body-row';\r\n    if (this.isSelected) {\r\n      cls += ' active';\r\n    }\r\n    if (this.rowIndex % 2 !== 0) {\r\n      cls += ' datatable-row-odd';\r\n    }\r\n    if (this.rowIndex % 2 === 0) {\r\n      cls += ' datatable-row-even';\r\n    }\r\n\r\n    if (this.rowClass) {\r\n      const res = this.rowClass(this.row);\r\n      if (typeof res === 'string') {\r\n        cls += ` ${res}`;\r\n      } else if (typeof res === 'object') {\r\n        const keys = Object.keys(res);\r\n        for (const k of keys) {\r\n          if (res[k] === true) {\r\n            cls += ` ${k}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  rowHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  get columnsTotalWidths(): string {\r\n    return this._columnGroupWidths.total;\r\n  }\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  _element: any;\r\n  _columnGroupWidths: any;\r\n  _columnsByPin: any;\r\n  _offsetX: number;\r\n  _columns: any[];\r\n  _innerWidth: number;\r\n  _groupStyles: { [prop: string]: {} } = {\r\n    left: {},\r\n    center: {},\r\n    right: {}\r\n  };\r\n\r\n  private _rowDiffer: KeyValueDiffer<{}, {}>;\r\n\r\n  constructor(\r\n    private differs: KeyValueDiffers,\r\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\r\n    private cd: ChangeDetectorRef,\r\n    element: ElementRef\r\n  ) {\r\n    this._element = element.nativeElement;\r\n    this._rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this._rowDiffer.diff(this.row)) {\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  trackByGroups(index: number, colGroup: any): any {\r\n    return colGroup.type;\r\n  }\r\n\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  buildStylesByGroup() {\r\n    this._groupStyles.left = this.calcStylesByGroup('left');\r\n    this._groupStyles.center = this.calcStylesByGroup('center');\r\n    this._groupStyles.right = this.calcStylesByGroup('right');\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  calcStylesByGroup(group: string) {\r\n    const widths = this._columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (this.row && !!this.row.detail && group === 'left') {\r\n      styles.width = `100%`;\r\n    }\r\n\r\n    if (group === 'left') {\r\n      translateXY(styles, offsetX, 0);\r\n    } else if (group === 'right') {\r\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n      const totalDiff = widths.total - bodyWidth;\r\n      const offsetDiff = totalDiff - offsetX;\r\n      const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  onActivate(event: any, index: number): void {\r\n    event.cellIndex = index;\r\n    event.rowElement = this._element;\r\n    this.activate.emit(event);\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isTargetRow = event.target === this._element;\r\n\r\n    const isAction =\r\n      keyCode === Keys.return ||\r\n      keyCode === Keys.down ||\r\n      keyCode === Keys.up ||\r\n      keyCode === Keys.left ||\r\n      keyCode === Keys.right;\r\n\r\n    if (isAction && isTargetRow) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      this.activate.emit({\r\n        type: 'keydown',\r\n        event,\r\n        row: this.row,\r\n        rowElement: this._element\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter', ['$event'])\r\n  onMouseenter(event: any): void {\r\n    this.activate.emit({\r\n      type: 'mouseenter',\r\n      event,\r\n      row: this.row,\r\n      rowElement: this._element\r\n    });\r\n  }\r\n\r\n  recalculateColumns(val: any[] = this.columns): void {\r\n    this._columns = val;\r\n    const colsByPin = columnsByPin(this._columns);\r\n    this._columnsByPin = columnsByPinArr(this._columns);\r\n    this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\r\n  }\r\n\r\n  onTreeAction() {\r\n    this.treeAction.emit();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  DoCheck,\r\n  ChangeDetectionStrategy,\r\n  KeyValueDiffer,\r\n  ChangeDetectorRef,\r\n  KeyValueDiffers\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\n\r\n@Component({\r\n  selector: 'datatable-row-wrapper',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\r\n      <ng-template\r\n        *ngIf=\"groupHeader && groupHeader.template\"\r\n        [ngTemplateOutlet]=\"groupHeader.template\"\r\n        [ngTemplateOutletContext]=\"groupContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)\">\r\n    </ng-content>\r\n    <div\r\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\r\n      [style.height.px]=\"detailRowHeight\"\r\n      class=\"datatable-row-detail\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"rowDetail && rowDetail.template\"\r\n        [ngTemplateOutlet]=\"rowDetail.template\"\r\n        [ngTemplateOutletContext]=\"rowContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-row-wrapper'\r\n  }\r\n})\r\nexport class DataTableRowWrapperComponent implements DoCheck {\r\n  @Input() innerWidth: number;\r\n  @Input() rowDetail: any;\r\n  @Input() groupHeader: any;\r\n  @Input() offsetX: number;\r\n  @Input() detailRowHeight: any;\r\n  @Input() row: any;\r\n  @Input() groupedRows: any;\r\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\r\n\r\n  @Input() set rowIndex(val: number) {\r\n    this._rowIndex = val;\r\n    this.rowContext.rowIndex = val;\r\n    this.groupContext.rowIndex = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowIndex(): number {\r\n    return this._rowIndex;\r\n  }\r\n\r\n  @Input() set expanded(val: boolean) {\r\n    this._expanded = val;\r\n    this.groupContext.expanded = val;\r\n    this.rowContext.expanded = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  groupContext: any = {\r\n    group: this.row,\r\n    expanded: this.expanded,\r\n    rowIndex: this.rowIndex\r\n  };\r\n\r\n  rowContext: any = {\r\n    row: this.row,\r\n    expanded: this.expanded,\r\n    rowIndex: this.rowIndex\r\n  };\r\n\r\n  private rowDiffer: KeyValueDiffer<{}, {}>;\r\n  private _expanded: boolean = false;\r\n  private _rowIndex: number;\r\n\r\n  constructor(private cd: ChangeDetectorRef, private differs: KeyValueDiffers) {\r\n    this.rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this.rowDiffer.diff(this.row)) {\r\n      this.rowContext.row = this.row;\r\n      this.groupContext.group = this.row;\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onContextmenu($event: MouseEvent): void {\r\n    this.rowContextmenu.emit({ event: $event, row: this.row });\r\n  }\r\n\r\n  getGroupHeaderStyle(): any {\r\n    const styles = {};\r\n\r\n    styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\r\n    styles['backface-visibility'] = 'hidden';\r\n    styles['width'] = this.innerWidth;\r\n\r\n    return styles;\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-row-detail-template]'\r\n})\r\nexport class DatatableRowDetailTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableRowDetailTemplateDirective } from './row-detail-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-row-detail' })\r\nexport class DatatableRowDetailDirective {\r\n  /**\r\n   * The detail row height is required especially\r\n   * when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((row?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Row detail row visbility was toggled.\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of the row\r\n   */\r\n  toggleExpandRow(row: any): void {\r\n    this.toggle.emit({\r\n      type: 'row',\r\n      value: row\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to expand all the rows.\r\n   */\r\n  expandAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to collapse all the rows.\r\n   */\r\n  collapseAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-group-header-template]'\r\n})\r\nexport class DatatableGroupHeaderTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableGroupHeaderTemplateDirective } from './body-group-header-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-group-header' })\r\nexport class DatatableGroupHeaderDirective {\r\n  /**\r\n   * Row height is required when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((group?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Track toggling of group visibility\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of a group\r\n   */\r\n  toggleExpandGroup(group: any): void {\r\n    this.toggle.emit({\r\n      type: 'group',\r\n      value: group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand all groups\r\n   */\r\n  expandAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Collapse all groups\r\n   */\r\n  collapseAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  PipeTransform,\r\n  HostBinding,\r\n  ViewChild,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  ViewContainerRef,\r\n  OnDestroy,\r\n  DoCheck,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { TableColumn } from '../../types/table-column.type';\r\nimport { MouseEvent, KeyboardEvent } from '../../events';\r\nimport { SortDirection } from '../../types/sort-direction.type';\r\nimport { Keys } from '../../utils/keys';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';\r\n\r\n@Component({\r\n  selector: 'datatable-body-cell',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div\r\n      class=\"datatable-body-cell-label\"\r\n      style=\"display: flex; align-items:center; height: 100%;\"\r\n      [style.margin-left.px]=\"calcLeftMargin(column, row)\"\r\n    >\r\n      <a\r\n        *ngIf=\"column?.prop === 'ice-expandable' && row?.detail?.length > 0\"\r\n        href=\"javascript:void(0)\"\r\n        [class.datatable-icon-down]=\"!expanded\"\r\n        [class.datatable-icon-up]=\"expanded\"\r\n        style=\"font-size: 18px; display: flex; align-items: center;\"\r\n        title=\"Expand/Collapse Row\"\r\n        (click)=\"toggleExpandRow(row, $event)\"\r\n      >\r\n      </a>\r\n      <ng-container *ngIf=\"column?.prop !== 'ice-expandable'\">\r\n        <label\r\n          *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\r\n          class=\"datatable-checkbox\"\r\n        >\r\n          <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\r\n        </label>\r\n        <ng-container *ngIf=\"column.isTreeColumn\">\r\n          <button\r\n            *ngIf=\"!column.treeToggleTemplate\"\r\n            class=\"datatable-tree-button\"\r\n            [disabled]=\"treeStatus === 'disabled'\"\r\n            (click)=\"onTreeAction()\"\r\n          >\r\n            <span>\r\n              <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\r\n              <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\r\n              <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\r\n            </span>\r\n          </button>\r\n          <ng-template\r\n            *ngIf=\"column.treeToggleTemplate\"\r\n            [ngTemplateOutlet]=\"column.treeToggleTemplate\"\r\n            [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\r\n          >\r\n          </ng-template>\r\n        </ng-container>\r\n\r\n        <div *ngIf=\"column.icons as icons\" style=\"display: flex; flex-direction: column; margin-right: 10px;\">\r\n          <mat-icon\r\n            *ngFor=\"let i of getIcons(row, icons)\"\r\n            [innerHTML]=\"i.icon\"\r\n            [matTooltip]=\"i.text\"\r\n            class=\"{{ i.class }} mat-icon material-icons ice-ml-10\"\r\n          ></mat-icon>\r\n        </div>\r\n\r\n        <mat-icon\r\n          *ngIf=\"\r\n            column.iconCustomTooltipHtmlText &&\r\n            column.prop &&\r\n            selectFieldValue(row, column.iconCustomTooltipHtmlText) as customHtml\r\n          \"\r\n          iceCustomHtmlToolTip\r\n          [iceTooltipHtmlText]=\"sanatizeHtml(customHtml)\"\r\n          [duration]=\"1500\"\r\n          class=\"material-icons\"\r\n          [ngClass]=\"column.prop && selectFieldValue(row, column.iconColor)\"\r\n          >priority_high</mat-icon\r\n        >\r\n\r\n        <mat-icon\r\n          *ngIf=\"column.prop && row[column.prop.toString() + 'InfoTooltip']\"\r\n          [matTooltip]=\"column.prop && row[column.prop.toString() + 'InfoTooltip']\"\r\n          class=\"mat-icon material-icons\"\r\n          >info</mat-icon\r\n        >\r\n\r\n        <mat-icon\r\n          *ngIf=\"column.prop && row[column.prop.toString() + 'Excluded']\"\r\n          [matTooltip]=\"column.prop && row[column.prop.toString() + 'Excluded']\"\r\n          class=\"mat-icon material-icons\"\r\n          >block</mat-icon\r\n        >\r\n\r\n        <h4\r\n          *ngIf=\"\r\n            !column.actionButtonIcon &&\r\n            !column.cellTemplate &&\r\n            !column.selectOptions &&\r\n            (!column.editable || !(isEditable(column, row) | async))\r\n          \"\r\n          class=\"ice-data-table-row\"\r\n          iceCustomHtmlToolTip\r\n          [iceTooltipHtmlText]=\"getTooltipValue(value, row, column)\"\r\n          [showToolTipOnTextOverflow]=\"true\"\r\n          [showToolTip]=\"hasToShowToolTip(row, column)\"\r\n          [innerHTML]=\"value\"\r\n          (click)=\"onClickField(row, column.onClickAction, $event)\"\r\n        ></h4>\r\n\r\n        <button\r\n          *ngIf=\"column.actionButtonIcon && !(column.hideActionButton && column.hideActionButton(row) | async)\"\r\n          mat-icon-button\r\n          [matTooltip]=\"column.actionButtonTooltip\"\r\n          (click)=\"onClickRowActionButton($event, column, row)\"\r\n        >\r\n          <mat-icon class=\"mat-icon material-icons\">{{ column.actionButtonIcon }}</mat-icon>\r\n        </button>\r\n\r\n        <ice-datatable-row-select\r\n          style=\"margin-top: 18px\"\r\n          [options]=\"column.selectOptions\"\r\n          [ngClass]=\"column.cellClass\"\r\n          (update)=\"updateSelect(column, row, $event)\"\r\n          [value]=\"value || column.defaultValue\"\r\n          [selectDisabled]=\"column.disabled\"\r\n          *ngIf=\"column.selectOptions && !(column.hideIfEmpty && column.disabled && value === '')\"\r\n        ></ice-datatable-row-select>\r\n\r\n        <ng-container *ngIf=\"!column.selectOptions && (column.editable && isEditable(column, row) | async)\">\r\n          <mat-icon class=\"mat-icon material-icons\" *ngIf=\"!column.hideEditIcon\">edit</mat-icon>\r\n          <ice-editable-text\r\n            [ngClass]=\"column.cellClass\"\r\n            (update)=\"editField(column, row, $event)\"\r\n            [errorText]=\"selectFieldValue(row, column.errorMessageField)\"\r\n            [value]=\"value\"\r\n          >\r\n            {{ value }}\r\n          </ice-editable-text>\r\n        </ng-container>\r\n\r\n        <ng-template\r\n          #cellTemplate\r\n          *ngIf=\"column.cellTemplate\"\r\n          [ngTemplateOutlet]=\"column.cellTemplate\"\r\n          [ngTemplateOutletContext]=\"cellContext\"\r\n        >\r\n        </ng-template>\r\n      </ng-container>\r\n    </div>\r\n  `\r\n})\r\nexport class DataTableBodyCellComponent implements DoCheck, OnDestroy {\r\n  @Input() displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;\r\n\r\n  @Input() set rowDetail(rowDetail: any) {\r\n    this._rowDetail = rowDetail;\r\n  }\r\n\r\n  get rowDetail(): any {\r\n    return this._rowDetail;\r\n  }\r\n\r\n  @Input() set group(group: any) {\r\n    this._group = group;\r\n    this.cellContext.group = group;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get group() {\r\n    return this._group;\r\n  }\r\n\r\n  @Input() set rowHeight(val: number) {\r\n    this._rowHeight = val;\r\n    this.cellContext.rowHeight = val;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowHeight() {\r\n    return this._rowHeight;\r\n  }\r\n\r\n  @Input() set isSelected(val: boolean) {\r\n    this._isSelected = val;\r\n    this.cellContext.isSelected = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get isSelected(): boolean {\r\n    return this._isSelected;\r\n  }\r\n\r\n  @Input() set expanded(val: boolean) {\r\n    this._expanded = val;\r\n    this.cellContext.expanded = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  @Input() set rowIndex(val: number) {\r\n    this._rowIndex = val;\r\n    this.cellContext.rowIndex = val;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowIndex(): number {\r\n    return this._rowIndex;\r\n  }\r\n\r\n  @Input() set column(column: TableColumn) {\r\n    this._column = column;\r\n    this.cellContext.column = column;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  @Input() set row(row: any) {\r\n    this._row = row;\r\n    this.cellContext.row = row;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get row(): any {\r\n    return this._row;\r\n  }\r\n\r\n  @Input() set sorts(val: any[]) {\r\n    this._sorts = val;\r\n    this.calcSortDir = this.calcSortDir(val);\r\n  }\r\n\r\n  get sorts(): any[] {\r\n    return this._sorts;\r\n  }\r\n\r\n  @Input() set treeStatus(status: TreeStatus) {\r\n    if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\r\n      this._treeStatus = 'collapsed';\r\n    } else {\r\n      this._treeStatus = status;\r\n    }\r\n    this.cellContext.treeStatus = this._treeStatus;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get treeStatus(): TreeStatus {\r\n    return this._treeStatus;\r\n  }\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild('cellTemplate', { read: ViewContainerRef, static: true })\r\n  cellTemplate: ViewContainerRef;\r\n\r\n  @HostBinding('class')\r\n  get columnCssClasses(): any {\r\n    let cls = 'datatable-body-cell';\r\n    if (this.column.cellClass) {\r\n      if (typeof this.column.cellClass === 'string') {\r\n        cls += ' ' + this.column.cellClass;\r\n      } else if (typeof this.column.cellClass === 'function') {\r\n        const res = this.column.cellClass({\r\n          row: this.row,\r\n          group: this.group,\r\n          column: this.column,\r\n          value: this.value,\r\n          rowHeight: this.rowHeight\r\n        });\r\n\r\n        if (typeof res === 'string') {\r\n          cls += res;\r\n        } else if (typeof res === 'object') {\r\n          const keys = Object.keys(res);\r\n          for (const k of keys) {\r\n            if (res[k] === true) {\r\n              cls += ` ${k}`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!this.sortDir) {\r\n      cls += ' sort-active';\r\n    }\r\n    if (this.isFocused) {\r\n      cls += ' active';\r\n    }\r\n    if (this.sortDir === SortDirection.asc) {\r\n      cls += ' sort-asc';\r\n    }\r\n    if (this.sortDir === SortDirection.desc) {\r\n      cls += ' sort-desc';\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('style.width.px')\r\n  get width(): number {\r\n    return this.column.width;\r\n  }\r\n\r\n  @HostBinding('style.minWidth.px')\r\n  get minWidth(): number {\r\n    return this.column.minWidth;\r\n  }\r\n\r\n  @HostBinding('style.maxWidth.px')\r\n  get maxWidth(): number {\r\n    return this.column.maxWidth;\r\n  }\r\n\r\n  @HostBinding('style.height')\r\n  get height(): string | number {\r\n    const height = this.rowHeight;\r\n    if (isNaN(height)) {\r\n      return height;\r\n    }\r\n    return height + 'px';\r\n  }\r\n  _isEditable: { [a: string]: Observable<boolean> } = {};\r\n  sanitizedValue: any;\r\n  value: any;\r\n  sortDir: SortDirection;\r\n  isFocused = false;\r\n  onCheckboxChangeFn = this.onCheckboxChange.bind(this);\r\n  activateFn = this.activate.emit.bind(this.activate);\r\n\r\n  cellContext: any = {\r\n    onCheckboxChangeFn: this.onCheckboxChangeFn,\r\n    activateFn: this.activateFn,\r\n    row: this.row,\r\n    group: this.group,\r\n    value: this.value,\r\n    column: this.column,\r\n    rowHeight: this.rowHeight,\r\n    isSelected: this.isSelected,\r\n    rowIndex: this.rowIndex,\r\n    treeStatus: this.treeStatus,\r\n    onTreeAction: this.onTreeAction.bind(this)\r\n  };\r\n\r\n  private _isSelected: boolean;\r\n  private _sorts: any[];\r\n  private _column: TableColumn;\r\n  private _row: any;\r\n  private _rowDetail: any;\r\n  private _group: any;\r\n  private _rowHeight: number;\r\n  private _rowIndex: number;\r\n  private _expanded: boolean;\r\n  private _element: any;\r\n  private _treeStatus: TreeStatus;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private sanitizer: DomSanitizer) {\r\n    this._element = element.nativeElement;\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    this.checkValueUpdates();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.cellTemplate) {\r\n      this.cellTemplate.clear();\r\n    }\r\n  }\r\n\r\n  checkValueUpdates(): void {\r\n    let value = '';\r\n\r\n    if (!this.row || !this.column) {\r\n      value = '';\r\n    } else {\r\n      const val = this.column.$$valueGetter(this.row, this.column.prop);\r\n      const userPipe: PipeTransform = this.column.pipe;\r\n\r\n      if (userPipe) {\r\n        value = userPipe.transform(val);\r\n      } else if (value !== undefined) {\r\n        value = val;\r\n      }\r\n    }\r\n\r\n    if (this.value !== value) {\r\n      this.value = value;\r\n      this.cellContext.value = value;\r\n      this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus(): void {\r\n    this.isFocused = true;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur(): void {\r\n    this.isFocused = false;\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.activate.emit({\r\n      type: 'click',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element\r\n    });\r\n  }\r\n\r\n  @HostListener('mouseup', ['$event'])\r\n  middleclickEvent(event) {\r\n    if (event.which === 2) {\r\n      this.activate.emit({\r\n        type: 'middleclick',\r\n        event,\r\n        row: this.row,\r\n        group: this.group,\r\n        rowHeight: this.rowHeight,\r\n        column: this.column,\r\n        value: this.value,\r\n        cellElement: this._element\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('dblclick', ['$event'])\r\n  onDblClick(event: MouseEvent): void {\r\n    this.activate.emit({\r\n      type: 'dblclick',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element\r\n    });\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isTargetCell = event.target === this._element;\r\n\r\n    const isAction =\r\n      keyCode === Keys.return ||\r\n      keyCode === Keys.down ||\r\n      keyCode === Keys.up ||\r\n      keyCode === Keys.left ||\r\n      keyCode === Keys.right;\r\n\r\n    if (isAction && isTargetCell) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      this.activate.emit({\r\n        type: 'keydown',\r\n        event,\r\n        row: this.row,\r\n        group: this.group,\r\n        rowHeight: this.rowHeight,\r\n        column: this.column,\r\n        value: this.value,\r\n        cellElement: this._element\r\n      });\r\n    }\r\n  }\r\n\r\n  onCheckboxChange(event: any): void {\r\n    this.activate.emit({\r\n      type: 'checkbox',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element,\r\n      treeStatus: 'collapsed'\r\n    });\r\n  }\r\n\r\n  calcSortDir(sorts: any[]): any {\r\n    if (!sorts) {\r\n      return;\r\n    }\r\n\r\n    const sort = sorts.find((s: any) => {\r\n      return s.prop === this.column.prop;\r\n    });\r\n\r\n    if (sort) {\r\n      return sort.dir;\r\n    }\r\n  }\r\n\r\n  stripHtml(html: string): string {\r\n    if (!html.replace) {\r\n      return html;\r\n    }\r\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\r\n  }\r\n\r\n  onTreeAction() {\r\n    this.treeAction.emit(this.row);\r\n  }\r\n\r\n  calcLeftMargin(column: any, row: any) {\r\n    const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\r\n    return column.isTreeColumn ? row.level * levelIndent : 0;\r\n  }\r\n\r\n  hasToShowToolTip(row, field) {\r\n    return row && field && field.tooltip && field.tooltip.length > 0;\r\n  }\r\n\r\n  getTooltipValue(value, row, field) {\r\n    if (row && field && field.tooltip && field.tooltip.length > 0) {\r\n      return row[`${field.tooltip}`];\r\n    }\r\n    return value;\r\n  }\r\n\r\n  getIcons(row, icons) {\r\n    if (row && icons) {\r\n      const iconsArray = icons.split('.');\r\n      return iconsArray.length > 1 && row[iconsArray[0]] ? row[iconsArray[0]][iconsArray[1]] || [] : row[icons] || [];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  selectFieldValue(row, prop) {\r\n    if (row && prop) {\r\n      const propArray = prop.split('.');\r\n      return propArray.length > 1 && row[propArray[0]] ? row[propArray[0]][propArray[1]] : row[prop];\r\n    }\r\n    return ' ';\r\n  }\r\n\r\n  onClickRowActionButton(event, field, row) {\r\n    if (field && row) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      field.action(row);\r\n    }\r\n  }\r\n\r\n  sanatizeHtml(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html) as string;\r\n  }\r\n\r\n  isEditable(field: any, row: any): Observable<boolean> {\r\n    if (field && row) {\r\n      if (!this._isEditable[field.prop + row.id]) {\r\n        this._isEditable[field.prop + row.id] = field.editable(row);\r\n      }\r\n      return this._isEditable[field.prop + row.id];\r\n    }\r\n    return of(false);\r\n  }\r\n\r\n  updateSelect(field, row: any, newValue: any) {\r\n    row[field.prop] = newValue;\r\n    if (field.onEdit) {\r\n      field.onEdit(row);\r\n    }\r\n  }\r\n\r\n  editField(field, row: any, newValue: any) {\r\n    field.onEdit({ ...row, [field.prop]: newValue });\r\n  }\r\n\r\n  toggleExpandRow(row, event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (this.rowDetail) {\r\n      this.rowDetail.toggleExpandRow(row);\r\n    }\r\n  }\r\n\r\n  onClickField(row, action, event) {\r\n    if (row && action) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      action(row);\r\n    }\r\n  }\r\n}\r\n","export function selectRows(selected: any[], row: any, comparefn: any) {\r\n  const selectedIndex = comparefn(row, selected);\r\n\r\n  if (selectedIndex > -1) {\r\n    selected.splice(selectedIndex, 1);\r\n  } else {\r\n    selected.push(row);\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport function selectRowsBetween(\r\n  selected: any[],\r\n  rows: any[],\r\n  index: number,\r\n  prevIndex: number,\r\n  comparefn: any\r\n): any[] {\r\n  const reverse = index < prevIndex;\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const row = rows[i];\r\n    const greater = i >= prevIndex && i <= index;\r\n    const lesser = i <= prevIndex && i >= index;\r\n\r\n    let range = { start: 0, end: 0 };\r\n    if (reverse) {\r\n      range = {\r\n        start: index,\r\n        end: prevIndex\r\n      };\r\n    } else {\r\n      range = {\r\n        start: prevIndex,\r\n        end: index + 1\r\n      };\r\n    }\r\n\r\n    if ((reverse && lesser) || (!reverse && greater)) {\r\n      // if in the positive range to be added to `selected`, and\r\n      // not already in the selected array, add it\r\n      if (i >= range.start && i <= range.end) {\r\n        selected.push(row);\r\n      }\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { selectRowsBetween, selectRows } from '../../utils/selection';\r\nimport { Keys } from '../../utils/keys';\r\n\r\nexport interface Model {\r\n  type: string;\r\n  event: MouseEvent | KeyboardEvent;\r\n  row: any;\r\n  rowElement: any;\r\n  cellElement: any;\r\n  cellIndex: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-selection',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableSelectionComponent {\r\n  @Input() rows: any[];\r\n  @Input() selected: any[];\r\n  @Input() selectEnabled: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() rowIdentity: any;\r\n  @Input() selectCheck: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n\r\n  prevIndex: number;\r\n\r\n  selectRow(event: KeyboardEvent | MouseEvent, index: number, row: any): void {\r\n    if (!this.selectEnabled) return;\r\n\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const multi = this.selectionType === SelectionType.multi;\r\n    const multiClick = this.selectionType === SelectionType.multiClick;\r\n    let selected: any[] = [];\r\n\r\n    if (multi || chkbox || multiClick) {\r\n      if (event.shiftKey) {\r\n        selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\r\n      } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\r\n        selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\r\n      } else {\r\n        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n      }\r\n    } else {\r\n      selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n    }\r\n\r\n    if (typeof this.selectCheck === 'function') {\r\n      selected = selected.filter(this.selectCheck.bind(this));\r\n    }\r\n\r\n    this.selected.splice(0, this.selected.length);\r\n    this.selected.push(...selected);\r\n\r\n    this.prevIndex = index;\r\n\r\n    this.select.emit({\r\n      selected\r\n    });\r\n  }\r\n\r\n  onActivate(model: Model, index: number): void {\r\n    const { type, event, row } = model;\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\r\n\r\n    if (select) {\r\n      this.selectRow(event, index, row);\r\n    } else if (type === 'keydown') {\r\n      if ((<KeyboardEvent>event).keyCode === Keys.return) {\r\n        this.selectRow(event, index, row);\r\n      } else {\r\n        this.onKeyboardFocus(model);\r\n      }\r\n    }\r\n    this.activate.emit(model);\r\n  }\r\n\r\n  onKeyboardFocus(model: Model): void {\r\n    const { keyCode } = <KeyboardEvent>model.event;\r\n    const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\r\n\r\n    if (shouldFocus) {\r\n      const isCellSelection = this.selectionType === SelectionType.cell;\r\n\r\n      if (!model.cellElement || !isCellSelection) {\r\n        this.focusRow(model.rowElement, keyCode);\r\n      } else if (isCellSelection) {\r\n        this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  focusRow(rowElement: any, keyCode: number): void {\r\n    const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n    if (nextRowElement) nextRowElement.focus();\r\n  }\r\n\r\n  getPrevNextRow(rowElement: any, keyCode: number): any {\r\n    const parentElement = rowElement.parentElement;\r\n\r\n    if (parentElement) {\r\n      let focusElement: HTMLElement;\r\n      if (keyCode === Keys.up) {\r\n        focusElement = parentElement.previousElementSibling;\r\n      } else if (keyCode === Keys.down) {\r\n        focusElement = parentElement.nextElementSibling;\r\n      }\r\n\r\n      if (focusElement && focusElement.children.length) {\r\n        return focusElement.children[0];\r\n      }\r\n    }\r\n  }\r\n\r\n  focusCell(cellElement: any, rowElement: any, keyCode: number, cellIndex: number): void {\r\n    let nextCellElement: HTMLElement;\r\n\r\n    if (keyCode === Keys.left) {\r\n      nextCellElement = cellElement.previousElementSibling;\r\n    } else if (keyCode === Keys.right) {\r\n      nextCellElement = cellElement.nextElementSibling;\r\n    } else if (keyCode === Keys.up || keyCode === Keys.down) {\r\n      const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n      if (nextRowElement) {\r\n        const children = nextRowElement.getElementsByClassName('datatable-body-cell');\r\n        if (children.length) nextCellElement = children[cellIndex];\r\n      }\r\n    }\r\n\r\n    if (nextCellElement) nextCellElement.focus();\r\n  }\r\n\r\n  getRowSelected(row: any): boolean {\r\n    return this.getRowSelectedIdx(row, this.selected) > -1;\r\n  }\r\n\r\n  getRowSelectedIdx(row: any, selected: any[]): number {\r\n    if (!selected || !selected.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return selected.findIndex(r => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, PipeTransform, TemplateRef } from '@angular/core';\r\n\r\nexport interface ISummaryColumn {\r\n  summaryFunc?: (cells: any[]) => any;\r\n  summaryTemplate?: TemplateRef<any>;\r\n\r\n  prop: string;\r\n  pipe?: PipeTransform;\r\n}\r\n\r\nfunction defaultSumFunc(cells: any[]): any {\r\n  const cellsWithValues = cells.filter(cell => !!cell);\r\n\r\n  if (!cellsWithValues.length) {\r\n    return null;\r\n  }\r\n  if (cellsWithValues.some(cell => typeof cell !== 'number')) {\r\n    return null;\r\n  }\r\n\r\n  return cellsWithValues.reduce((res, cell) => res + cell);\r\n}\r\n\r\nfunction noopSumFunc(cells: any[]): void {\r\n  return null;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-summary-row',\r\n  template: `\r\n    <datatable-body-row\r\n      *ngIf=\"summaryRow && _internalColumns\"\r\n      tabindex=\"-1\"\r\n      [innerWidth]=\"innerWidth\"\r\n      [offsetX]=\"offsetX\"\r\n      [columns]=\"_internalColumns\"\r\n      [rowHeight]=\"rowHeight\"\r\n      [row]=\"summaryRow\"\r\n      [rowIndex]=\"-1\"\r\n    >\r\n    </datatable-body-row>\r\n  `,\r\n  host: {\r\n    class: 'datatable-summary-row'\r\n  }\r\n})\r\nexport class DataTableSummaryRowComponent implements OnChanges {\r\n  @Input() rows: any[];\r\n  @Input() columns: ISummaryColumn[];\r\n\r\n  @Input() rowHeight: number;\r\n  @Input() offsetX: number;\r\n  @Input() innerWidth: number;\r\n\r\n  _internalColumns: ISummaryColumn[];\r\n  summaryRow: any = {};\r\n\r\n  ngOnChanges() {\r\n    if (!this.columns || !this.rows) {\r\n      return;\r\n    }\r\n    this.updateInternalColumns();\r\n    this.updateValues();\r\n  }\r\n\r\n  private updateInternalColumns() {\r\n    this._internalColumns = this.columns.map(col => ({\r\n      ...col,\r\n      cellTemplate: col.summaryTemplate\r\n    }));\r\n  }\r\n\r\n  private updateValues() {\r\n    this.summaryRow = {};\r\n\r\n    this.columns\r\n      .filter(col => !col.summaryTemplate)\r\n      .forEach(col => {\r\n        const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\r\n        const sumFunc = this.getSummaryFunction(col);\r\n\r\n        this.summaryRow[col.prop] = col.pipe\r\n          ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\r\n          : sumFunc(cellsFromSingleColumn);\r\n      });\r\n  }\r\n\r\n  private getSummaryFunction(column: ISummaryColumn): (a: any[]) => any {\r\n    if (column.summaryFunc === undefined) {\r\n      return defaultSumFunc;\r\n    } else if (column.summaryFunc === null) {\r\n      return noopSumFunc;\r\n    } else {\r\n      return column.summaryFunc;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ice-custom-tooltip',\r\n  templateUrl: './ice-custom-tooltip.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./ice-custom-tooltip.component.scss'],\r\n  host: {\r\n    class: 'ice-custom-tooltip'\r\n  }\r\n})\r\nexport class CustomToolTipComponent {\r\n  @Input() text: string;\r\n}\r\n","import { Overlay, OverlayPositionBuilder, OverlayRef } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { ComponentRef, Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\r\nimport { CustomToolTipComponent } from '../components/ice-custom-tooltip/ice-custom-tooltip.component';\r\n\r\n@Directive({\r\n  selector: '[iceCustomHtmlToolTip]'\r\n})\r\nexport class ToolTipRendererDirective implements OnDestroy {\r\n  @Input() iceTooltipHtmlText: string;\r\n  @Input() showToolTip = true;\r\n  @Input() showToolTipOnTextOverflow = false;\r\n  @Input() duration = 0;\r\n\r\n  private _overlayRef: OverlayRef;\r\n  private timeout: any;\r\n  private componentInstance: any;\r\n\r\n  constructor(\r\n    private _overlay: Overlay,\r\n    private _overlayPositionBuilder: OverlayPositionBuilder,\r\n    private _elementRef: ElementRef\r\n  ) {}\r\n\r\n  @HostListener('mouseenter')\r\n  show() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n    if (\r\n      (this.showToolTipOnTextOverflow &&\r\n        this._elementRef.nativeElement.offsetWidth < this._elementRef.nativeElement.scrollWidth) ||\r\n      this.showToolTip\r\n    ) {\r\n      if (!this._overlayRef) {\r\n        const positionStrategy = this._overlayPositionBuilder.flexibleConnectedTo(this._elementRef).withPositions([\r\n          {\r\n            originX: 'start',\r\n            originY: 'top',\r\n            overlayX: 'start',\r\n            overlayY: 'bottom',\r\n            offsetY: -5\r\n          }\r\n        ]);\r\n        this._overlayRef = this._overlay.create({ positionStrategy });\r\n      }\r\n      if (!this._overlayRef.hasAttached()) {\r\n        const tooltipRef: ComponentRef<CustomToolTipComponent> = this._overlayRef.attach(\r\n          new ComponentPortal(CustomToolTipComponent)\r\n        );\r\n        this.componentInstance = tooltipRef;\r\n        tooltipRef.instance.text = this.iceTooltipHtmlText;\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hide() {\r\n    this.timeout = setTimeout(() => {\r\n      this.closeToolTip();\r\n    }, this.duration);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n    this.closeToolTip();\r\n    this._overlayRef = null!;\r\n  }\r\n\r\n  private closeToolTip() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.detach();\r\n      this.componentInstance = null!;\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, ViewChildren } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ice-datatable-row-select',\r\n  templateUrl: './ice-datatable-select.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DatatableSelectComponent implements OnInit {\r\n  editing = false;\r\n  active = false;\r\n  rows = [];\r\n\r\n  @Input() align = 'left';\r\n  @Input() focusOnEnter = false;\r\n  @Input() editOnFocus = false;\r\n  @Input() selectDisabled = false;\r\n  @Output() update = new EventEmitter<string>();\r\n  @Input() options = [];\r\n  @Input() default: string;\r\n  @Input() value: string;\r\n  @ViewChildren('selectElement') selectEl;\r\n\r\n  ngOnInit() {\r\n    if (this.value) {\r\n      this.update.emit(this.value);\r\n    }\r\n  }\r\n\r\n  emitUpdate(newValue) {\r\n    this.update.emit(newValue);\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n  ViewChildren,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ice-editable-text',\r\n  templateUrl: './ice-editable-text.component.html',\r\n  styleUrls: ['./ice-editable-text.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'ice-editable-text'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EditableTextComponent implements AfterViewInit {\r\n  editing = false;\r\n  active = false;\r\n\r\n  @Input() align = 'left';\r\n  @Input() editOnSpace = true;\r\n  @Input() editOnClick = true;\r\n  @Input() focusOnEnter = true;\r\n  @Input() editOnFocus = false;\r\n  @Input() disabled = false;\r\n  @Input() value: string;\r\n  @Input() errorText = '';\r\n  @Output() focus = new EventEmitter<null>();\r\n  @Output() toggleEditing = new EventEmitter<null>();\r\n  @Output() toggleActive = new EventEmitter<null>();\r\n  @Output() update = new EventEmitter<string>();\r\n  @ViewChildren('inputElement') inputEl;\r\n  @ViewChild('contentWrapper', { static: false }) content: ElementRef;\r\n\r\n  emitUpdate(newText) {\r\n    if (!this.disabled) {\r\n      this.update.emit(newText);\r\n    }\r\n  }\r\n\r\n  emitToggleEditing($event) {\r\n    $event.stopPropagation();\r\n    if (!this.disabled) {\r\n      this.editing = !this.editing;\r\n    }\r\n  }\r\n\r\n  emitFocus() {\r\n    if (this.focus) {\r\n      this.focus.emit(null);\r\n    }\r\n  }\r\n\r\n  emitToggleActive($event) {\r\n    $event.stopPropagation();\r\n    if (!this.disabled) {\r\n      this.active = !this.active;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.inputEl.changes.subscribe(d => {\r\n      return d.last && d.last.nativeElement.focus();\r\n    });\r\n    if (this.value == null) {\r\n      this.value =\r\n        this.content &&\r\n        this.content.nativeElement.childNodes.length > 0 &&\r\n        this.content.nativeElement.childNodes[0].data;\r\n    }\r\n  }\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { TableColumnProp } from '../types/table-column.type';\r\n\r\nexport type OptionalValueGetter = (row: any) => any | undefined;\r\nexport function optionalGetterForProp(prop: TableColumnProp): OptionalValueGetter {\r\n  return prop && (row => getterForProp(prop)(row, prop));\r\n}\r\n\r\n/**\r\n * This functions rearrange items by their parents\r\n * Also sets the level value to each of the items\r\n *\r\n * Note: Expecting each item has a property called parentId\r\n * Note: This algorithm will fail if a list has two or more items with same ID\r\n * NOTE: This algorithm will fail if there is a deadlock of relationship\r\n *\r\n * For example,\r\n *\r\n * Input\r\n *\r\n * id -> parent\r\n * 1  -> 0\r\n * 2  -> 0\r\n * 3  -> 1\r\n * 4  -> 1\r\n * 5  -> 2\r\n * 7  -> 8\r\n * 6  -> 3\r\n *\r\n *\r\n * Output\r\n * id -> level\r\n * 1      -> 0\r\n * --3    -> 1\r\n * ----6  -> 2\r\n * --4    -> 1\r\n * 2      -> 0\r\n * --5    -> 1\r\n * 7     -> 8\r\n *\r\n *\r\n * @param rows\r\n *\r\n */\r\nexport function groupRowsByParents(rows: any[], from?: OptionalValueGetter, to?: OptionalValueGetter): any[] {\r\n  if (from && to) {\r\n    const nodeById = {};\r\n    const l = rows.length;\r\n    let node: TreeNode | null = null;\r\n\r\n    nodeById[0] = new TreeNode(); // that's the root node\r\n\r\n    const uniqIDs = rows.reduce((arr, item) => {\r\n      const toValue = to(item);\r\n      if (arr.indexOf(toValue) === -1) {\r\n        arr.push(toValue);\r\n      }\r\n      return arr;\r\n    }, []);\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // make TreeNode objects for each item\r\n      nodeById[to(rows[i])] = new TreeNode(rows[i]);\r\n    }\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // link all TreeNode objects\r\n      node = nodeById[to(rows[i])];\r\n      let parent = 0;\r\n      const fromValue = from(node.row);\r\n      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\r\n        parent = fromValue;\r\n      }\r\n      node.parent = nodeById[parent];\r\n      node.row['level'] = node.parent.row['level'] + 1;\r\n      node.parent.children.push(node);\r\n    }\r\n\r\n    let resolvedRows: any[] = [];\r\n    nodeById[0].flatten(function() {\r\n      resolvedRows = [...resolvedRows, this.row];\r\n    }, true);\r\n\r\n    return resolvedRows;\r\n  } else {\r\n    return rows;\r\n  }\r\n}\r\n\r\nclass TreeNode {\r\n  public row: any;\r\n  public parent: any;\r\n  public children: any[];\r\n\r\n  constructor(row: any | null = null) {\r\n    if (!row) {\r\n      row = {\r\n        level: -1,\r\n        treeStatus: 'expanded'\r\n      };\r\n    }\r\n    this.row = row;\r\n    this.parent = null;\r\n    this.children = [];\r\n  }\r\n\r\n  flatten(f: any, recursive: boolean) {\r\n    if (this.row['treeStatus'] === 'expanded') {\r\n      for (let i = 0, l = this.children.length; i < l; i++) {\r\n        const child = this.children[i];\r\n        f.apply(child, Array.prototype.slice.call(arguments, 2));\r\n        if (recursive) child.flatten.apply(child, arguments);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Creates a unique object id.\r\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n */\r\nexport function id() {\r\n  return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n}\r\n","import { camelCase, deCamelCase } from './camel-case';\r\nimport { id } from './id';\r\nimport { getterForProp } from './column-prop-getters';\r\nimport { TableColumn } from '../types/table-column.type';\r\nimport { DataTableColumnDirective } from '../components/columns/column.directive';\r\n\r\n/**\r\n * Sets the column defaults\r\n */\r\nexport function setColumnDefaults(columns: TableColumn[]) {\r\n  if (!columns) return;\r\n\r\n  // Only one column should hold the tree view\r\n  // Thus if multiple columns are provided with\r\n  // isTreeColumn as true we take only the first one\r\n  let treeColumnFound: boolean = false;\r\n\r\n  for (const column of columns) {\r\n    if (!column.$$id) {\r\n      column.$$id = id();\r\n    }\r\n\r\n    // prop can be numeric; zero is valid not a missing prop\r\n    // translate name => prop\r\n    if (isNullOrUndefined(column.prop) && column.name) {\r\n      column.prop = camelCase(column.name);\r\n    }\r\n\r\n    if (!column.$$valueGetter) {\r\n      column.$$valueGetter = getterForProp(column.prop);\r\n    }\r\n\r\n    // format props if no name passed\r\n    if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = deCamelCase(String(column.prop));\r\n    }\r\n\r\n    if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = ''; // Fixes IE and Edge displaying `null`\r\n    }\r\n\r\n    if (!column.hasOwnProperty('resizeable')) {\r\n      column.resizeable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('sortable')) {\r\n      column.sortable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('draggable')) {\r\n      column.draggable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('canAutoResize')) {\r\n      column.canAutoResize = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('width')) {\r\n      column.width = 150;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('isTreeColumn')) {\r\n      column.isTreeColumn = false;\r\n    } else {\r\n      if (column.isTreeColumn && !treeColumnFound) {\r\n        // If the first column with isTreeColumn is true found\r\n        // we mark that treeCoulmn is found\r\n        treeColumnFound = true;\r\n      } else {\r\n        // After that isTreeColumn property for any other column\r\n        // will be set as false\r\n        column.isTreeColumn = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function isNullOrUndefined<T>(value: T | null | undefined): value is null | undefined {\r\n  return value === null || value === undefined;\r\n}\r\n\r\n/**\r\n * Translates templates definitions to objects\r\n */\r\nexport function translateTemplates(templates: DataTableColumnDirective[]): any[] {\r\n  const result: any[] = [];\r\n  for (const temp of templates) {\r\n    const col: any = {};\r\n\r\n    const props = Object.getOwnPropertyNames(temp);\r\n    for (const prop of props) {\r\n      col[prop] = temp[prop];\r\n    }\r\n\r\n    if (temp.headerTemplate) {\r\n      col.headerTemplate = temp.headerTemplate;\r\n    }\r\n\r\n    if (temp.cellTemplate) {\r\n      col.cellTemplate = temp.cellTemplate;\r\n    }\r\n\r\n    if (temp.summaryFunc) {\r\n      col.summaryFunc = temp.summaryFunc;\r\n    }\r\n\r\n    if (temp.summaryTemplate) {\r\n      col.summaryTemplate = temp.summaryTemplate;\r\n    }\r\n\r\n    result.push(col);\r\n  }\r\n\r\n  return result;\r\n}\r\n","export enum ColumnMode {\r\n  standard = 'standard',\r\n  flex = 'flex',\r\n  force = 'force'\r\n}\r\n","export enum ContextmenuType {\r\n  header = 'header',\r\n  body = 'body'\r\n}\r\n","/**\r\n * Throttle a function\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context: any;\r\n  let args: any;\r\n  let result: any;\r\n  let timeout: any = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function(this: any) {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target: any, key: PropertyKey, descriptor: PropertyDescriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { columnsByPin, columnsTotalWidth } from './column';\r\n\r\n/**\r\n * Calculates the Total Flex Grow\r\n */\r\nexport function getTotalFlexGrow(columns: any[]) {\r\n  let totalFlexGrow = 0;\r\n\r\n  for (const c of columns) {\r\n    totalFlexGrow += c.flexGrow || 0;\r\n  }\r\n\r\n  return totalFlexGrow;\r\n}\r\n\r\n/**\r\n * Adjusts the column widths.\r\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\r\n */\r\nexport function adjustColumnWidths(allColumns: any, expectedWidth: any) {\r\n  const columnsWidth = columnsTotalWidth(allColumns);\r\n  const totalFlexGrow = getTotalFlexGrow(allColumns);\r\n  const colsByGroup = columnsByPin(allColumns);\r\n\r\n  if (columnsWidth !== expectedWidth) {\r\n    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\r\n  }\r\n}\r\n\r\n/**\r\n * Resizes columns based on the flexGrow property, while respecting manually set widths\r\n */\r\nfunction scaleColumns(colsByGroup: any, maxWidth: any, totalFlexGrow: any) {\r\n  // calculate total width and flexgrow points for coulumns that can be resized\r\n  for (const attr in colsByGroup) {\r\n    for (const column of colsByGroup[attr]) {\r\n      if (!column.canAutoResize) {\r\n        maxWidth -= column.width;\r\n        totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\r\n      } else {\r\n        column.width = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const hasMinWidth = {};\r\n  let remainingWidth = maxWidth;\r\n\r\n  // resize columns until no width is left to be distributed\r\n  do {\r\n    const widthPerFlexPoint = remainingWidth / totalFlexGrow;\r\n    remainingWidth = 0;\r\n\r\n    for (const attr in colsByGroup) {\r\n      for (const column of colsByGroup[attr]) {\r\n        // if the column can be resize and it hasn't reached its minimum width yet\r\n        if (column.canAutoResize && !hasMinWidth[column.prop]) {\r\n          const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\r\n          if (column.minWidth !== undefined && newWidth < column.minWidth) {\r\n            remainingWidth += newWidth - column.minWidth;\r\n            column.width = column.minWidth;\r\n            hasMinWidth[column.prop] = true;\r\n          } else {\r\n            column.width = newWidth;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } while (remainingWidth !== 0);\r\n}\r\n\r\n/**\r\n * Forces the width of the columns to\r\n * distribute equally but overflowing when necessary\r\n *\r\n * Rules:\r\n *\r\n *  - If combined withs are less than the total width of the grid,\r\n *    proportion the widths given the min / max / normal widths to fill the width.\r\n *\r\n *  - If the combined widths, exceed the total width of the grid,\r\n *    use the standard widths.\r\n *\r\n *  - If a column is resized, it should always use that width\r\n *\r\n *  - The proportional widths should never fall below min size if specified.\r\n *\r\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\r\n *    the width should use the original width; not the newly proportioned widths.\r\n */\r\nexport function forceFillColumnWidths(\r\n  allColumns: any[],\r\n  expectedWidth: number,\r\n  startIdx: number,\r\n  allowBleed: boolean,\r\n  defaultColWidth: number = 300\r\n) {\r\n  const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\r\n    return c.canAutoResize !== false;\r\n  });\r\n\r\n  for (const column of columnsToResize) {\r\n    if (!column.$$oldWidth) {\r\n      column.$$oldWidth = column.width;\r\n    }\r\n  }\r\n\r\n  let additionWidthPerColumn = 0;\r\n  let exceedsWindow = false;\r\n  let contentWidth = getContentWidth(allColumns, defaultColWidth);\r\n  let remainingWidth = expectedWidth - contentWidth;\r\n  const columnsProcessed: any[] = [];\r\n  const remainingWidthLimit = 1; // when to stop\r\n\r\n  // This loop takes care of the\r\n  do {\r\n    additionWidthPerColumn = remainingWidth / columnsToResize.length;\r\n    exceedsWindow = contentWidth >= expectedWidth;\r\n\r\n    for (const column of columnsToResize) {\r\n      if (exceedsWindow && allowBleed) {\r\n        column.width = column.$$oldWidth || column.width || defaultColWidth;\r\n      } else {\r\n        const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\r\n\r\n        if (column.minWidth && newSize < column.minWidth) {\r\n          column.width = column.minWidth;\r\n          columnsProcessed.push(column);\r\n        } else if (column.maxWidth && newSize > column.maxWidth) {\r\n          column.width = column.maxWidth;\r\n          columnsProcessed.push(column);\r\n        } else {\r\n          column.width = newSize;\r\n        }\r\n      }\r\n\r\n      column.width = Math.max(0, column.width);\r\n    }\r\n\r\n    contentWidth = getContentWidth(allColumns);\r\n    remainingWidth = expectedWidth - contentWidth;\r\n    removeProcessedColumns(columnsToResize, columnsProcessed);\r\n  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\r\n}\r\n\r\n/**\r\n * Remove the processed columns from the current active columns.\r\n */\r\nfunction removeProcessedColumns(columnsToResize: any[], columnsProcessed: any[]) {\r\n  for (const column of columnsProcessed) {\r\n    const index = columnsToResize.indexOf(column);\r\n    columnsToResize.splice(index, 1);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the width of the columns\r\n */\r\nfunction getContentWidth(allColumns: any, defaultColWidth: number = 300): number {\r\n  let contentWidth = 0;\r\n\r\n  for (const column of allColumns) {\r\n    contentWidth += column.width || defaultColWidth;\r\n  }\r\n\r\n  return contentWidth;\r\n}\r\n","import {\n  Component,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  ViewChild,\n  HostListener,\n  ContentChildren,\n  OnInit,\n  QueryList,\n  AfterViewInit,\n  HostBinding,\n  ContentChild,\n  DoCheck,\n  KeyValueDiffers,\n  KeyValueDiffer,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SkipSelf,\n  OnDestroy,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { DatatableGroupHeaderDirective } from './body/body-group-header.directive';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { INgxDatatableConfig } from '../ngx-datatable.module';\nimport { groupRowsByParents, optionalGetterForProp } from '../utils/tree';\nimport { TableColumn } from '../types/table-column.type';\nimport { setColumnDefaults, translateTemplates } from '../utils/column-helper';\nimport { ColumnMode } from '../types/column-mode.type';\nimport { SelectionType } from '../types/selection.type';\nimport { SortType } from '../types/sort.type';\nimport { ContextmenuType } from '../types/contextmenu.type';\nimport { DataTableColumnDirective } from './columns/column.directive';\nimport { DatatableRowDetailDirective } from './row-detail/row-detail.directive';\nimport { DatatableFooterDirective } from './footer/footer.directive';\nimport { DataTableBodyComponent } from './body/body.component';\nimport { DataTableHeaderComponent } from './header/header.component';\nimport { ScrollbarHelper } from '../services/scrollbar-helper.service';\nimport { ColumnChangesService } from '../services/column-changes.service';\nimport { DimensionsHelper } from '../services/dimensions-helper.service';\nimport { throttleable } from '../utils/throttle';\nimport { forceFillColumnWidths, adjustColumnWidths } from '../utils/math';\nimport { sortRows } from '../utils/sort';\n\n@Component({\n  selector: 'ngx-datatable',\n  templateUrl: './datatable.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./datatable.component.scss'],\n  host: {\n    class: 'ngx-datatable'\n  }\n})\nexport class DatatableComponent implements OnInit, DoCheck, AfterViewInit {\n  /**\n   * Template for the target marker of drag target columns.\n   */\n  @Input() targetMarkerTemplate: any;\n\n  /**\n   * Rows that are displayed in the table.\n   */\n  @Input() set rows(val: any) {\n    this._rows = val;\n\n    if (val) {\n      this._internalRows = [...val];\n    }\n\n    // auto sort on new updates\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    }\n\n    // auto group by parent on new update\n    this._internalRows = groupRowsByParents(\n      this._internalRows,\n      optionalGetterForProp(this.treeFromRelation),\n      optionalGetterForProp(this.treeToRelation)\n    );\n\n    // recalculate sizes/etc\n    this.recalculate();\n\n    if (this._rows && this._groupRowsBy) {\n      // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n      this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n    }\n\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Gets the rows.\n   */\n  get rows(): any {\n    return this._rows;\n  }\n\n  /**\n   * This attribute allows the user to set the name of the column to group the data with\n   */\n  @Input() set groupRowsBy(val: string) {\n    if (val) {\n      this._groupRowsBy = val;\n      if (this._rows && this._groupRowsBy) {\n        // cretes a new array with the data grouped\n        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n      }\n    }\n  }\n\n  get groupRowsBy() {\n    return this._groupRowsBy;\n  }\n\n  /**\n   * This attribute allows the user to set a grouped array in the following format:\n   *  [\n   *    {groupid=1} [\n   *      {id=1 name=\"test1\"},\n   *      {id=2 name=\"test2\"},\n   *      {id=3 name=\"test3\"}\n   *    ]},\n   *    {groupid=2>[\n   *      {id=4 name=\"test4\"},\n   *      {id=5 name=\"test5\"},\n   *      {id=6 name=\"test6\"}\n   *    ]}\n   *  ]\n   */\n  @Input() groupedRows: any[];\n\n  @Input() expandable: boolean = false;\n\n  /**\n   * Columns to be displayed.\n   */\n  @Input() set columns(val: TableColumn[]) {\n    val = [\n      ...(this.expandable\n        ? [\n            {\n              width: 50,\n              prop: 'ice-expandable',\n              name: '',\n              resizeable: false,\n              canAutoResize: false,\n              draggable: false,\n              sortable: false\n            }\n          ]\n        : []),\n      ...val\n    ];\n    if (val) {\n      this._internalColumns = [...val];\n      setColumnDefaults(this._internalColumns);\n      this.recalculateColumns();\n    }\n\n    this._columns = val;\n  }\n\n  /**\n   * Get the columns.\n   */\n  get columns(): TableColumn[] {\n    return this._columns;\n  }\n\n  /**\n   * List of row objects that should be\n   * represented as selected in the grid.\n   * Default value: `[]`\n   */\n  @Input() selected: any[] = [];\n\n  /**\n   * Enable vertical scrollbars\n   */\n  @Input() scrollbarV: boolean = false;\n\n  /**\n   * Enable horz scrollbars\n   */\n  @Input() scrollbarH: boolean = false;\n\n  /**\n   * The row height; which is necessary\n   * to calculate the height for the lazy rendering.\n   */\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number) = 30;\n\n  /**\n   * Type of column width distribution formula.\n   * Example: flex, force, standard\n   */\n  @Input() columnMode: ColumnMode = ColumnMode.standard;\n\n  /**\n   * The minimum header height in pixels.\n   * Pass a falsey for no header\n   */\n  @Input() headerHeight: any = 30;\n\n  /**\n   * The minimum footer height in pixels.\n   * Pass falsey for no footer\n   */\n  @Input() footerHeight: number = 0;\n\n  /**\n   * If the table should use external paging\n   * otherwise its assumed that all data is preloaded.\n   */\n  @Input() externalPaging: boolean = false;\n\n  /**\n   * If the table should use external sorting or\n   * the built-in basic sorting.\n   */\n  @Input() externalSorting: boolean = false;\n\n  /**\n   * The page size to be shown.\n   * Default value: `undefined`\n   */\n  @Input() set limit(val: number | undefined) {\n    this._limit = val;\n\n    // recalculate sizes/etc\n    this.recalculate();\n  }\n\n  /**\n   * Gets the limit.\n   */\n  get limit(): number | undefined {\n    return this._limit;\n  }\n\n  /**\n   * The total count of all rows.\n   * Default value: `0`\n   */\n  @Input() set count(val: number) {\n    this._count = val;\n\n    // recalculate sizes/etc\n    this.recalculate();\n  }\n\n  /**\n   * Gets the count.\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * The current offset ( page - 1 ) shown.\n   * Default value: `0`\n   */\n  @Input() set offset(val: number) {\n    this._offset = val;\n  }\n  get offset(): number {\n    return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n  }\n\n  /**\n   * Show the linear loading bar.\n   * Default value: `false`\n   */\n  @Input() loadingIndicator: boolean = false;\n\n  /**\n   * Type of row selection. Options are:\n   *\n   *  - `single`\n   *  - `multi`\n   *  - `checkbox`\n   *  - `multiClick`\n   *  - `cell`\n   *\n   * For no selection pass a `falsey`.\n   * Default value: `undefined`\n   */\n  @Input() selectionType: SelectionType;\n\n  /**\n   * Enable/Disable ability to re-order columns\n   * by dragging them.\n   */\n  @Input() reorderable: boolean = true;\n\n  /**\n   * Swap columns on re-order columns or\n   * move them.\n   */\n  @Input() swapColumns: boolean = true;\n\n  /**\n   * The type of sorting\n   */\n  @Input() sortType: SortType = SortType.single;\n\n  /**\n   * Array of sorted columns by property and type.\n   * Default value: `[]`\n   */\n  @Input() sorts: any[] = [];\n\n  /**\n   * Css class overrides\n   */\n  @Input() cssClasses: any = {\n    sortAscending: 'datatable-icon-up',\n    sortDescending: 'datatable-icon-down',\n    pagerLeftArrow: 'datatable-icon-left',\n    pagerRightArrow: 'datatable-icon-right',\n    pagerPrevious: 'datatable-icon-prev',\n    pagerNext: 'datatable-icon-skip'\n  };\n\n  /**\n   * Message overrides for localization\n   *\n   * emptyMessage     [default] = 'No data to display'\n   * totalMessage     [default] = 'total'\n   * selectedMessage  [default] = 'selected'\n   */\n  @Input() messages: any = {\n    // Message to show when array is presented\n    // but contains no values\n    emptyMessage: 'No data to display',\n\n    // Footer total message\n    totalMessage: 'total',\n\n    // Footer selected message\n    selectedMessage: 'selected'\n  };\n\n  /**\n   * Row specific classes.\n   * Similar implementation to ngClass.\n   *\n   *  [rowClass]=\"'first second'\"\n   *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\n   */\n  @Input() rowClass: any;\n\n  /**\n   * A boolean/function you can use to check whether you want\n   * to select a particular row based on a criteria. Example:\n   *\n   *    (selection) => {\n   *      return selection !== 'Ethel Price';\n   *    }\n   */\n  @Input() selectCheck: any;\n\n  /**\n   * A function you can use to check whether you want\n   * to show the checkbox for a particular row based on a criteria. Example:\n   *\n   *    (row, column, value) => {\n   *      return row.name !== 'Ethel Price';\n   *    }\n   */\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean;\n\n  /**\n   * A boolean you can use to set the detault behaviour of rows and groups\n   * whether they will start expanded or not. If ommited the default is NOT expanded.\n   *\n   */\n  @Input() groupExpansionDefault: boolean = false;\n\n  /**\n   * Property to which you can use for custom tracking of rows.\n   * Example: 'name'\n   */\n  @Input() trackByProp: string;\n\n  /**\n   * Property to which you can use for determining select all\n   * rows on current page or not.\n   *\n   * @memberOf DatatableComponent\n   */\n  @Input() selectAllRowsOnPage = false;\n\n  /**\n   * A flag for row virtualization on / off\n   */\n  @Input() virtualization: boolean = true;\n\n  /**\n   * Tree from relation\n   */\n  @Input() treeFromRelation: string;\n\n  /**\n   * Tree to relation\n   */\n  @Input() treeToRelation: string;\n\n  /**\n   * A flag for switching summary row on / off\n   */\n  @Input() summaryRow: boolean = false;\n\n  /**\n   * A height of summary row\n   */\n  @Input() summaryHeight: number = 30;\n\n  /**\n   * A property holds a summary row position: top/bottom\n   */\n  @Input() summaryPosition: string = 'top';\n\n  /**\n   * Body was scrolled typically in a `scrollbarV:true` scenario.\n   */\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A cell or row was focused via keyboard or mouse click.\n   */\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A cell or row was selected.\n   */\n  @Output() select: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Column sort was invoked.\n   */\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Ice column filter was invoked.\n   */\n  @Output() filter: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The table was paged either triggered by the pager or the body scroll.\n   */\n  @Output() page: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Columns were re-ordered.\n   */\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Column was resized.\n   */\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The context menu was invoked on the table.\n   * type indicates whether the header or the body was clicked.\n   * content contains either the column or the row that was clicked.\n   */\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent; type: ContextmenuType; content: any }>(false);\n\n  /**\n   * A row was expanded ot collapsed for tree\n   */\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * CSS class applied if the header height if fixed height.\n   */\n  @HostBinding('class.fixed-header')\n  get isFixedHeader(): boolean {\n    const headerHeight: number | string = this.headerHeight;\n    return typeof headerHeight === 'string' ? <string>headerHeight !== 'auto' : true;\n  }\n\n  /**\n   * CSS class applied to the root element if\n   * the row heights are fixed heights.\n   */\n  @HostBinding('class.fixed-row')\n  get isFixedRow(): boolean {\n    return this.rowHeight !== 'auto';\n  }\n\n  /**\n   * CSS class applied to root element if\n   * vertical scrolling is enabled.\n   */\n  @HostBinding('class.scroll-vertical')\n  get isVertScroll(): boolean {\n    return this.scrollbarV;\n  }\n\n  /**\n   * CSS class applied to root element if\n   * virtualization is enabled.\n   */\n  @HostBinding('class.virtualized')\n  get isVirtualized(): boolean {\n    return this.virtualization;\n  }\n\n  /**\n   * CSS class applied to the root element\n   * if the horziontal scrolling is enabled.\n   */\n  @HostBinding('class.scroll-horz')\n  get isHorScroll(): boolean {\n    return this.scrollbarH;\n  }\n\n  /**\n   * CSS class applied to root element is selectable.\n   */\n  @HostBinding('class.selectable')\n  get isSelectable(): boolean {\n    return this.selectionType !== undefined;\n  }\n\n  /**\n   * CSS class applied to root is checkbox selection.\n   */\n  @HostBinding('class.checkbox-selection')\n  get isCheckboxSelection(): boolean {\n    return this.selectionType === SelectionType.checkbox;\n  }\n\n  /**\n   * CSS class applied to root if cell selection.\n   */\n  @HostBinding('class.cell-selection')\n  get isCellSelection(): boolean {\n    return this.selectionType === SelectionType.cell;\n  }\n\n  /**\n   * CSS class applied to root if single select.\n   */\n  @HostBinding('class.single-selection')\n  get isSingleSelection(): boolean {\n    return this.selectionType === SelectionType.single;\n  }\n\n  /**\n   * CSS class added to root element if mulit select\n   */\n  @HostBinding('class.multi-selection')\n  get isMultiSelection(): boolean {\n    return this.selectionType === SelectionType.multi;\n  }\n\n  /**\n   * CSS class added to root element if mulit click select\n   */\n  @HostBinding('class.multi-click-selection')\n  get isMultiClickSelection(): boolean {\n    return this.selectionType === SelectionType.multiClick;\n  }\n\n  /**\n   * Column templates gathered from `ContentChildren`\n   * if described in your markup.\n   */\n  @ContentChildren(DataTableColumnDirective)\n  set columnTemplates(val: QueryList<DataTableColumnDirective>) {\n    this._columnTemplates = val;\n    this.translateColumns(val);\n  }\n\n  /**\n   * Returns the column templates.\n   */\n  get columnTemplates(): QueryList<DataTableColumnDirective> {\n    return this._columnTemplates;\n  }\n\n  /**\n   * Row Detail templates gathered from the ContentChild\n   */\n  @ContentChild(DatatableRowDetailDirective, { static: false })\n  rowDetail: DatatableRowDetailDirective;\n\n  /**\n   * Group Header templates gathered from the ContentChild\n   */\n  @ContentChild(DatatableGroupHeaderDirective, { static: false })\n  groupHeader: DatatableGroupHeaderDirective;\n\n  /**\n   * Footer template gathered from the ContentChild\n   */\n  @ContentChild(DatatableFooterDirective, { static: false })\n  footer: DatatableFooterDirective;\n\n  /**\n   * Reference to the body component for manually\n   * invoking functions on the body.\n   */\n  @ViewChild(DataTableBodyComponent, { static: false })\n  bodyComponent: DataTableBodyComponent;\n\n  /**\n   * Reference to the header component for manually\n   * invoking functions on the header.\n   *\n   * @memberOf DatatableComponent\n   */\n  @ViewChild(DataTableHeaderComponent, { static: false })\n  headerComponent: DataTableHeaderComponent;\n\n  /**\n   * Returns if all rows are selected.\n   */\n  get allRowsSelected(): boolean {\n    let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n\n    if (this.selectAllRowsOnPage) {\n      const indexes = this.bodyComponent.indexes;\n      const rowsOnPage = indexes.last - indexes.first;\n      allRowsSelected = this.selected.length === rowsOnPage;\n    }\n\n    return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n  }\n\n  element: HTMLElement;\n  _innerWidth: number;\n  pageSize: number;\n  bodyHeight: number;\n  rowCount: number = 0;\n  rowDiffer: KeyValueDiffer<{}, {}>;\n\n  _offsetX = new BehaviorSubject(0);\n  _limit: number | undefined;\n  _count: number = 0;\n  _offset: number = 0;\n  _rows: any[];\n  _groupRowsBy: string;\n  _internalRows: any[];\n  _internalColumns: TableColumn[];\n  _columns: TableColumn[];\n  _columnTemplates: QueryList<DataTableColumnDirective>;\n  _subscriptions: Subscription[] = [];\n\n  constructor(\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\n    @SkipSelf() private dimensionsHelper: DimensionsHelper,\n    private cd: ChangeDetectorRef,\n    element: ElementRef,\n    differs: KeyValueDiffers,\n    private columnChangesService: ColumnChangesService,\n    @Optional() @Inject('configuration') private configuration: INgxDatatableConfig\n  ) {\n    // get ref to elm for measuring\n    this.element = element.nativeElement;\n    this.rowDiffer = differs.find({}).create();\n\n    // apply global settings from Module.forRoot\n    if (this.configuration && this.configuration.messages) {\n      this.messages = { ...this.configuration.messages };\n    }\n  }\n\n  /**\n   * Lifecycle hook that is called after data-bound\n   * properties of a directive are initialized.\n   */\n  ngOnInit(): void {\n    // need to call this immediatly to size\n    // if the table is hidden the visibility\n    // listener will invoke this itself upon show\n    this.recalculate();\n  }\n\n  /**\n   * Lifecycle hook that is called after a component's\n   * view has been fully initialized.\n   */\n  ngAfterViewInit(): void {\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    }\n\n    // this has to be done to prevent the change detection\n    // tree from freaking out because we are readjusting\n    if (typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      this.recalculate();\n\n      // emit page for virtual server-side kickoff\n      if (this.externalPaging && this.scrollbarV) {\n        this.page.emit({\n          count: this.count,\n          pageSize: this.pageSize,\n          limit: this.limit,\n          offset: 0\n        });\n      }\n    });\n  }\n\n  /**\n   * Lifecycle hook that is called after a component's\n   * content has been fully initialized.\n   */\n  ngAfterContentInit() {\n    this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\n    this.listenForColumnInputChanges();\n  }\n\n  /**\n   * This will be used when displaying or selecting rows.\n   * when tracking/comparing them, we'll use the value of this fn,\n   *\n   * (`fn(x) === fn(y)` instead of `x === y`)\n   */\n  @Input() rowIdentity: (x: any) => any = (x: any) => {\n    if (this._groupRowsBy) {\n      // each group in groupedRows are stored as {key, value: [rows]},\n      // where key is the groupRowsBy index\n      return x.key;\n    } else {\n      return x;\n    }\n  };\n\n  /**\n   * Translates the templates to the column objects\n   */\n  translateColumns(val: any) {\n    if (val) {\n      const arr = val.toArray();\n      if (arr.length) {\n        this._internalColumns = translateTemplates(arr);\n        setColumnDefaults(this._internalColumns);\n        this.recalculateColumns();\n        this.sortInternalRows();\n        this.cd.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Creates a map with the data grouped by the user choice of grouping index\n   *\n   * @param originalArray the original array passed via parameter\n   * @param groupByIndex  the index of the column to group the data by\n   */\n  groupArrayBy(originalArray: any, groupBy: any) {\n    // create a map to hold groups with their corresponding results\n    const map = new Map();\n    let i: number = 0;\n\n    originalArray.forEach((item: any) => {\n      const key = item[groupBy];\n      if (!map.has(key)) {\n        map.set(key, [item]);\n      } else {\n        map.get(key).push(item);\n      }\n      i++;\n    });\n\n    const addGroup = (key: any, value: any) => {\n      return { key, value };\n    };\n\n    // convert map back to a simple array of objects\n    return Array.from(map, x => addGroup(x[0], x[1]));\n  }\n\n  /*\n   * Lifecycle hook that is called when Angular dirty checks a directive.\n   */\n  ngDoCheck(): void {\n    if (this.rowDiffer.diff(this.rows)) {\n      if (!this.externalSorting) {\n        this.sortInternalRows();\n      } else {\n        this._internalRows = [...this.rows];\n      }\n\n      // auto group by parent on new update\n      this._internalRows = groupRowsByParents(\n        this._internalRows,\n        optionalGetterForProp(this.treeFromRelation),\n        optionalGetterForProp(this.treeToRelation)\n      );\n\n      this.recalculatePages();\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * Recalc's the sizes of the grid.\n   *\n   * Updated automatically on changes to:\n   *\n   *  - Columns\n   *  - Rows\n   *  - Paging related\n   *\n   * Also can be manually invoked or upon window resize.\n   */\n  recalculate(): void {\n    this.recalculateDims();\n    this.recalculateColumns();\n  }\n\n  /**\n   * Window resize handler to update sizes.\n   */\n  @HostListener('window:resize')\n  @throttleable(5)\n  onWindowResize(): void {\n    this.recalculate();\n  }\n\n  /**\n   * Recalulcates the column widths based on column width\n   * distribution mode and scrollbar offsets.\n   */\n  recalculateColumns(\n    columns: any[] = this._internalColumns,\n    forceIdx: number = -1,\n    allowBleed: boolean = this.scrollbarH\n  ): any[] | undefined {\n    if (!columns) return undefined;\n\n    let width = this._innerWidth;\n    if (this.scrollbarV) {\n      width = width - this.scrollbarHelper.width;\n    }\n\n    if (this.columnMode === ColumnMode.force) {\n      forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n    } else if (this.columnMode === ColumnMode.flex) {\n      adjustColumnWidths(columns, width);\n    }\n\n    return columns;\n  }\n\n  /**\n   * Recalculates the dimensions of the table size.\n   * Internally calls the page size and row count calcs too.\n   *\n   */\n  recalculateDims(): void {\n    const dims = this.dimensionsHelper.getDimensions(this.element);\n    this._innerWidth = Math.floor(dims.width);\n\n    if (this.scrollbarV) {\n      let height = dims.height;\n      if (this.headerHeight) height = height - this.headerHeight;\n      if (this.footerHeight) height = height - this.footerHeight;\n      this.bodyHeight = height;\n    }\n\n    this.recalculatePages();\n  }\n\n  /**\n   * Recalculates the pages after a update.\n   */\n  recalculatePages(): void {\n    this.pageSize = this.calcPageSize();\n    this.rowCount = this.calcRowCount();\n  }\n\n  /**\n   * Body triggered a page event.\n   */\n  onBodyPage({ offset }: any): void {\n    // Avoid pagination caming from body events like scroll when the table\n    // has no virtualization and the external paging is enable.\n    // This means, let's the developer handle pagination by my him(her) self\n    if (this.externalPaging && !this.virtualization) {\n      return;\n    }\n\n    this.offset = offset;\n\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n  }\n\n  /**\n   * The body triggered a scroll event.\n   */\n  onBodyScroll(event: MouseEvent): void {\n    this._offsetX.next(event.offsetX);\n    this.scroll.emit(event);\n    this.cd.detectChanges();\n  }\n\n  /**\n   * The footer triggered a page event.\n   */\n  onFooterPage(event: any) {\n    this.offset = event.page - 1;\n    this.bodyComponent.updateOffsetY(this.offset);\n\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n  }\n\n  /**\n   * Recalculates the sizes of the page\n   */\n  calcPageSize(val: any[] = this.rows): number {\n    // Keep the page size constant even if the row has been expanded.\n    // This is because an expanded row is still considered to be a child of\n    // the original row.  Hence calculation would use rowHeight only.\n    if (this.scrollbarV && this.virtualization) {\n      const size = Math.ceil(this.bodyHeight / (this.rowHeight as number));\n      return Math.max(size, 0);\n    }\n\n    // if limit is passed, we are paging\n    if (this.limit !== undefined) {\n      return this.limit;\n    }\n\n    // otherwise use row length\n    if (val) {\n      return val.length;\n    }\n\n    // other empty :(\n    return 0;\n  }\n\n  /**\n   * Calculates the row count.\n   */\n  calcRowCount(val: any[] = this.rows): number {\n    if (!this.externalPaging) {\n      if (!val) return 0;\n\n      if (this.groupedRows) {\n        return this.groupedRows.length;\n      } else if (this.treeFromRelation != null && this.treeToRelation != null) {\n        return this._internalRows.length;\n      } else {\n        return val.length;\n      }\n    }\n\n    return this.count;\n  }\n\n  /**\n   * The header triggered a contextmenu event.\n   */\n  onColumnContextmenu({ event, column }: any): void {\n    this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n  }\n\n  /**\n   * The body triggered a contextmenu event.\n   */\n  onRowContextmenu({ event, row }: any): void {\n    this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n  }\n\n  /**\n   * The header triggered a column resize event.\n   */\n  onColumnResize({ column, newValue }: any): void {\n    /* Safari/iOS 10.2 workaround */\n    if (column === undefined) {\n      return;\n    }\n\n    let idx: number;\n    const cols = this._internalColumns.map((c, i) => {\n      c = { ...c };\n\n      if (c.$$id === column.$$id) {\n        idx = i;\n        c.width = newValue;\n\n        // set this so we can force the column\n        // width distribution to be to this value\n        c.$$oldWidth = newValue;\n      }\n\n      return c;\n    });\n\n    this.recalculateColumns(cols, idx);\n    this._internalColumns = cols;\n\n    this.resize.emit({\n      column,\n      newValue\n    });\n  }\n\n  /**\n   * The header triggered a column re-order event.\n   */\n  onColumnReorder({ column, newValue, prevValue }: any): void {\n    const cols = this._internalColumns.map(c => {\n      return { ...c };\n    });\n\n    if (this.swapColumns) {\n      const prevCol = cols[newValue];\n      cols[newValue] = column;\n      cols[prevValue] = prevCol;\n    } else {\n      if (newValue > prevValue) {\n        const movedCol = cols[prevValue];\n        for (let i = prevValue; i < newValue; i++) {\n          cols[i] = cols[i + 1];\n        }\n        cols[newValue] = movedCol;\n      } else {\n        const movedCol = cols[prevValue];\n        for (let i = prevValue; i > newValue; i--) {\n          cols[i] = cols[i - 1];\n        }\n        cols[newValue] = movedCol;\n      }\n    }\n\n    this._internalColumns = cols;\n\n    this.reorder.emit({\n      column,\n      newValue,\n      prevValue\n    });\n  }\n\n  onColumnFilter(event: any): void {\n    this.filter.emit(event);\n  }\n\n  /**\n   * The header triggered a column sort event.\n   */\n  onColumnSort(event: any): void {\n    // clean selected rows\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n\n    this.sorts = event.sorts;\n\n    // this could be optimized better since it will resort\n    // the rows again on the 'push' detection...\n    if (this.externalSorting === false) {\n      // don't use normal setter so we don't resort\n      this.sortInternalRows();\n    }\n\n    // auto group by parent on new update\n    this._internalRows = groupRowsByParents(\n      this._internalRows,\n      optionalGetterForProp(this.treeFromRelation),\n      optionalGetterForProp(this.treeToRelation)\n    );\n\n    // Always go to first page when sorting to see the newly sorted data\n    this.offset = 0;\n    this.bodyComponent.updateOffsetY(this.offset);\n    this.sort.emit(event);\n  }\n\n  /**\n   * Toggle all row selection\n   */\n  onHeaderSelect(event: any): void {\n    if (this.selectAllRowsOnPage) {\n      // before we splice, chk if we currently have all selected\n      const first = this.bodyComponent.indexes.first;\n      const last = this.bodyComponent.indexes.last;\n      const allSelected = this.selected.length === last - first;\n\n      // remove all existing either way\n      this.selected = [];\n\n      // do the opposite here\n      if (!allSelected) {\n        this.selected.push(...this._internalRows.slice(first, last));\n      }\n    } else {\n      // before we splice, chk if we currently have all selected\n      const allSelected = this.selected.length === this.rows.length;\n      // remove all existing either way\n      this.selected = [];\n      // do the opposite here\n      if (!allSelected) {\n        this.selected.push(...this.rows);\n      }\n    }\n\n    this.select.emit({\n      selected: this.selected\n    });\n  }\n\n  /**\n   * A row was selected from body\n   */\n  onBodySelect(event: any): void {\n    this.select.emit(event);\n  }\n\n  /**\n   * A row was expanded or collapsed for tree\n   */\n  onTreeAction(event: any) {\n    const row = event.row;\n    // TODO: For duplicated items this will not work\n    const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\n    this.treeAction.emit({ row, rowIndex });\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n\n  /**\n   * listen for changes to input bindings of all DataTableColumnDirective and\n   * trigger the columnTemplates.changes observable to emit\n   */\n  private listenForColumnInputChanges(): void {\n    this._subscriptions.push(\n      this.columnChangesService.columnInputChanges$.subscribe(() => {\n        if (this.columnTemplates) {\n          this.columnTemplates.notifyOnChanges();\n        }\n      })\n    );\n  }\n\n  private sortInternalRows(): void {\n    this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ScrollbarHelper } from './services/scrollbar-helper.service';\nimport { DimensionsHelper } from './services/dimensions-helper.service';\nimport { ColumnChangesService } from './services/column-changes.service';\nimport { DataTableFooterTemplateDirective } from './components/footer/footer-template.directive';\nimport { VisibilityDirective } from './directives/visibility.directive';\nimport { DraggableDirective } from './directives/draggable.directive';\nimport { ResizeableDirective } from './directives/resizeable.directive';\nimport { OrderableDirective } from './directives/orderable.directive';\nimport { LongPressDirective } from './directives/long-press.directive';\nimport { ScrollerComponent } from './components/body/scroller.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { DataTableColumnDirective } from './components/columns/column.directive';\nimport { DataTableHeaderComponent } from './components/header/header.component';\nimport { DataTableHeaderCellComponent } from './components/header/header-cell.component';\nimport { DataTableBodyComponent } from './components/body/body.component';\nimport { DataTableFooterComponent } from './components/footer/footer.component';\nimport { DataTablePagerComponent } from './components/footer/pager.component';\nimport { ProgressBarComponent } from './components/body/progress-bar.component';\nimport { DataTableBodyRowComponent } from './components/body/body-row.component';\nimport { DataTableRowWrapperComponent } from './components/body/body-row-wrapper.component';\nimport { DatatableRowDetailDirective } from './components/row-detail/row-detail.directive';\nimport { DatatableGroupHeaderDirective } from './components/body/body-group-header.directive';\nimport { DatatableRowDetailTemplateDirective } from './components/row-detail/row-detail-template.directive';\nimport { DataTableBodyCellComponent } from './components/body/body-cell.component';\nimport { DataTableSelectionComponent } from './components/body/selection.component';\nimport { DataTableColumnHeaderDirective } from './components/columns/column-header.directive';\nimport { DataTableColumnCellDirective } from './components/columns/column-cell.directive';\nimport { DataTableColumnCellTreeToggle } from './components/columns/tree.directive';\nimport { DatatableFooterDirective } from './components/footer/footer.directive';\nimport { DatatableGroupHeaderTemplateDirective } from './components/body/body-group-header-template.directive';\nimport { DataTableSummaryRowComponent } from './components/body/summary/summary-row.component';\nimport { ToolTipRendererDirective } from './directives/ice-custom-html-tooltip.directive';\nimport { CustomToolTipComponent } from './components/ice-custom-tooltip/ice-custom-tooltip.component';\nimport { DatatableSelectComponent } from './components/ice-datatable-select/ice-datatable-select.component';\nimport { EditableTextComponent } from './components/ice-editable-text/ice-editable-text.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { DatatableComponent } from './components/datatable.component';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTooltipModule,\n    OverlayModule,\n    MatIconModule,\n    MatButtonModule,\n    BrowserModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n  declarations: [\n    DataTableFooterTemplateDirective,\n    VisibilityDirective,\n    DraggableDirective,\n    ResizeableDirective,\n    OrderableDirective,\n    LongPressDirective,\n    ToolTipRendererDirective,\n    ScrollerComponent,\n    DatatableComponent,\n    DataTableColumnDirective,\n    DataTableHeaderComponent,\n    DataTableHeaderCellComponent,\n    DataTableBodyComponent,\n    DataTableFooterComponent,\n    DataTablePagerComponent,\n    ProgressBarComponent,\n    DataTableBodyRowComponent,\n    DataTableRowWrapperComponent,\n    CustomToolTipComponent,\n    DatatableSelectComponent,\n    EditableTextComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableBodyCellComponent,\n    DataTableSelectionComponent,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DatatableFooterDirective,\n    DatatableGroupHeaderTemplateDirective,\n    DataTableSummaryRowComponent\n  ],\n  exports: [\n    DatatableComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableColumnDirective,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DataTableFooterTemplateDirective,\n    DatatableFooterDirective,\n    DataTablePagerComponent,\n    DatatableGroupHeaderTemplateDirective\n  ],\n  entryComponents: [CustomToolTipComponent]\n})\nexport class NgxDatatableModule {\n  /**\n   * Configure global configuration via INgxDatatableConfig\n   * @param configuration\n   */\n  static forRoot(configuration: INgxDatatableConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxDatatableModule,\n      providers: [{ provide: 'configuration', useValue: configuration }]\n    };\n  }\n}\n\n/**\n * Interface definition for INgxDatatableConfig global configuration\n */\nexport interface INgxDatatableConfig {\n  messages: {\n    emptyMessage: string; // Message to show when array is presented, but contains no values\n    totalMessage: string; // Footer total message\n    selectedMessage: string; // Footer selected message\n  };\n}\n","if (typeof document !== 'undefined' && !document.elementsFromPoint) {\r\n  document.elementsFromPoint = elementsFromPoint;\r\n}\r\n\r\n/*tslint:disable*/\r\n/**\r\n * Polyfill for `elementsFromPoint`\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\r\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\r\n * https://gist.github.com/oslego/7265412\r\n */\r\nexport function elementsFromPoint(x: number, y: number) {\r\n  const elements = [];\r\n  const previousPointerEvents = [];\r\n  let current: any; // TODO: window.getComputedStyle should be used with inferred type (Element)\r\n  let i;\r\n  let d;\r\n\r\n  //if (document === undefined) return elements;\r\n\r\n  // get all elements via elementFromPoint, and remove them from hit-testing in order\r\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\r\n    // push the element and its current style\r\n    elements.push(current);\r\n    previousPointerEvents.push({\r\n      value: current.style.getPropertyValue('pointer-events'),\r\n      priority: current.style.getPropertyPriority('pointer-events')\r\n    });\r\n\r\n    // add \"pointer-events: none\", to get to the underlying element\r\n    current.style.setProperty('pointer-events', 'none', 'important');\r\n  }\r\n\r\n  // restore the previous pointer-events values\r\n  for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]); ) {\r\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\r\n  }\r\n\r\n  // return our results\r\n  return elements;\r\n}\r\n/*tslint:enable*/\r\n","export enum ClickType {\r\n  single = 'single',\r\n  double = 'double'\r\n}\r\n"]}