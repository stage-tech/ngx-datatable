!(function (e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? t(
        exports,
        require('@angular/core'),
        require('@angular/common'),
        require('@angular/material/icon'),
        require('@angular/material/button'),
        require('@angular/cdk/overlay'),
        require('@angular/material/tooltip'),
        require('rxjs'),
        require('rxjs/operators'),
        require('@angular/material/form-field'),
        require('@angular/platform-browser'),
        require('@angular/cdk/portal'),
        require('@angular/forms'),
        require('@angular/material/input'),
        require('css-element-queries'),
        require('@angular/material/select')
      )
    : 'function' == typeof define && define.amd
    ? define('@stage/ngx-datatable', [
        'exports',
        '@angular/core',
        '@angular/common',
        '@angular/material/icon',
        '@angular/material/button',
        '@angular/cdk/overlay',
        '@angular/material/tooltip',
        'rxjs',
        'rxjs/operators',
        '@angular/material/form-field',
        '@angular/platform-browser',
        '@angular/cdk/portal',
        '@angular/forms',
        '@angular/material/input',
        'css-element-queries',
        '@angular/material/select'
      ], t)
    : t(
        (((e = 'undefined' != typeof globalThis ? globalThis : e || self).stage = e.stage || {}),
        (e.stage['ngx-datatable'] = {})),
        e.ng.core,
        e.ng.common,
        e.ng.material.icon,
        e.ng.material.button,
        e.ng.cdk.overlay,
        e.ng.material.tooltip,
        e.rxjs,
        e.rxjs.operators,
        e.ng.material.formField,
        e.ng.platformBrowser,
        e.ng.cdk.portal,
        e.ng.forms,
        e.ng.material.input,
        e.cssElementQueries,
        e.ng.material.select
      );
})(this, function (e, t, n, o, r, i, a, s, l, c, u, p, h, d, g, f) {
  'use strict';
  var y = (function () {
    function e(e) {
      (this.document = e), (this.width = this.getWidth());
    }
    return (
      (e.prototype.getWidth = function () {
        var e = this.document.createElement('div');
        (e.style.visibility = 'hidden'),
          (e.style.width = '100px'),
          (e.style.msOverflowStyle = 'scrollbar'),
          this.document.body.appendChild(e);
        var t = e.offsetWidth;
        e.style.overflow = 'scroll';
        var n = this.document.createElement('div');
        (n.style.width = '100%'), e.appendChild(n);
        var o = n.offsetWidth;
        return e.parentNode.removeChild(e), t - o;
      }),
      e
    );
  })();
  (y.decorators = [{ type: t.Injectable }]),
    (y.ctorParameters = function () {
      return [{ type: void 0, decorators: [{ type: t.Inject, args: [n.DOCUMENT] }] }];
    });
  var m = (function () {
    function e() {}
    return (
      (e.prototype.getDimensions = function (e) {
        return e.getBoundingClientRect();
      }),
      e
    );
  })();
  m.decorators = [{ type: t.Injectable }];
  var b = (function () {
    function e() {
      this.columnInputChanges = new s.Subject();
    }
    return (
      Object.defineProperty(e.prototype, 'columnInputChanges$', {
        get: function () {
          return this.columnInputChanges.asObservable();
        },
        enumerable: !1,
        configurable: !0
      }),
      (e.prototype.onInputChange = function () {
        this.columnInputChanges.next();
      }),
      e
    );
  })();
  b.decorators = [{ type: t.Injectable }];
  var v = function (e) {
    this.template = e;
  };
  (v.decorators = [{ type: t.Directive, args: [{ selector: '[ngx-datatable-footer-template]' }] }]),
    (v.ctorParameters = function () {
      return [{ type: t.TemplateRef }];
    });
  var w = (function () {
    function e(e, n) {
      (this.element = e), (this.zone = n), (this.isVisible = !1), (this.visible = new t.EventEmitter());
    }
    return (
      (e.prototype.ngOnInit = function () {
        this.runCheck();
      }),
      (e.prototype.ngOnDestroy = function () {
        clearTimeout(this.timeout);
      }),
      (e.prototype.onVisibilityChange = function () {
        var e = this;
        this.zone.run(function () {
          (e.isVisible = !0), e.visible.emit(!0);
        });
      }),
      (e.prototype.runCheck = function () {
        var e = this,
          t = function () {
            var n = e.element.nativeElement,
              o = n.offsetHeight,
              r = n.offsetWidth;
            o && r
              ? (clearTimeout(e.timeout), e.onVisibilityChange())
              : (clearTimeout(e.timeout),
                e.zone.runOutsideAngular(function () {
                  e.timeout = setTimeout(function () {
                    return t();
                  }, 50);
                }));
          };
        this.timeout = setTimeout(function () {
          return t();
        });
      }),
      e
    );
  })();
  (w.decorators = [{ type: t.Directive, args: [{ selector: '[visibilityObserver]' }] }]),
    (w.ctorParameters = function () {
      return [{ type: t.ElementRef }, { type: t.NgZone }];
    }),
    (w.propDecorators = {
      isVisible: [{ type: t.HostBinding, args: ['class.visible'] }],
      visible: [{ type: t.Output }]
    });
  var x = (function () {
    function e(e) {
      (this.dragX = !0),
        (this.dragY = !0),
        (this.dragStart = new t.EventEmitter()),
        (this.dragging = new t.EventEmitter()),
        (this.dragEnd = new t.EventEmitter()),
        (this.isDragging = !1),
        (this.element = e.nativeElement);
    }
    return (
      (e.prototype.ngOnChanges = function (e) {
        e.dragEventTarget &&
          e.dragEventTarget.currentValue &&
          this.dragModel.dragging &&
          this.onMousedown(e.dragEventTarget.currentValue);
      }),
      (e.prototype.ngOnDestroy = function () {
        this._destroySubscription();
      }),
      (e.prototype.onMouseup = function (e) {
        this.isDragging &&
          ((this.isDragging = !1),
          this.element.classList.remove('dragging'),
          this.subscription &&
            (this._destroySubscription(),
            this.dragEnd.emit({ event: e, element: this.element, model: this.dragModel })));
      }),
      (e.prototype.onMousedown = function (e) {
        var t = this;
        if (e.target.classList.contains('draggable') && (this.dragX || this.dragY)) {
          e.preventDefault(), (this.isDragging = !0);
          var n = { x: e.clientX, y: e.clientY },
            o = s.fromEvent(document, 'mouseup');
          this.subscription = o.subscribe(function (e) {
            return t.onMouseup(e);
          });
          var r = s
            .fromEvent(document, 'mousemove')
            .pipe(l.takeUntil(o))
            .subscribe(function (e) {
              return t.move(e, n);
            });
          this.subscription.add(r), this.dragStart.emit({ event: e, element: this.element, model: this.dragModel });
        }
      }),
      (e.prototype.move = function (e, t) {
        if (this.isDragging) {
          var n = e.clientX - t.x,
            o = e.clientY - t.y;
          this.dragX && (this.element.style.left = n + 'px'),
            this.dragY && (this.element.style.top = o + 'px'),
            this.element.classList.add('dragging'),
            this.dragging.emit({ event: e, element: this.element, model: this.dragModel });
        }
      }),
      (e.prototype._destroySubscription = function () {
        this.subscription && (this.subscription.unsubscribe(), (this.subscription = void 0));
      }),
      e
    );
  })();
  (x.decorators = [{ type: t.Directive, args: [{ selector: '[draggable]' }] }]),
    (x.ctorParameters = function () {
      return [{ type: t.ElementRef }];
    }),
    (x.propDecorators = {
      dragEventTarget: [{ type: t.Input }],
      dragModel: [{ type: t.Input }],
      dragX: [{ type: t.Input }],
      dragY: [{ type: t.Input }],
      dragStart: [{ type: t.Output }],
      dragging: [{ type: t.Output }],
      dragEnd: [{ type: t.Output }]
    });
  var C = (function () {
    function e(e, n) {
      (this.renderer = n),
        (this.resizeEnabled = !0),
        (this.resize = new t.EventEmitter()),
        (this.resizing = !1),
        (this.element = e.nativeElement);
    }
    return (
      (e.prototype.ngAfterViewInit = function () {
        var e = this.renderer;
        (this.resizeHandle = e.createElement('span')),
          this.resizeEnabled
            ? e.addClass(this.resizeHandle, 'resize-handle')
            : e.addClass(this.resizeHandle, 'resize-handle--not-resizable'),
          e.appendChild(this.element, this.resizeHandle);
      }),
      (e.prototype.ngOnDestroy = function () {
        this._destroySubscription(),
          this.renderer.destroyNode
            ? this.renderer.destroyNode(this.resizeHandle)
            : this.resizeHandle &&
              this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);
      }),
      (e.prototype.onMouseup = function () {
        (this.resizing = !1),
          this.subscription &&
            !this.subscription.closed &&
            (this._destroySubscription(), this.resize.emit(this.element.clientWidth));
      }),
      (e.prototype.onMousedown = function (e) {
        var t = this,
          n = e.target.classList.contains('resize-handle'),
          o = this.element.clientWidth,
          r = e.screenX;
        if (n) {
          e.stopPropagation(), (this.resizing = !0);
          var i = s.fromEvent(document, 'mouseup');
          this.subscription = i.subscribe(function (e) {
            return t.onMouseup();
          });
          var a = s
            .fromEvent(document, 'mousemove')
            .pipe(l.takeUntil(i))
            .subscribe(function (e) {
              return t.move(e, o, r);
            });
          this.subscription.add(a);
        }
      }),
      (e.prototype.move = function (e, t, n) {
        var o = t + (e.screenX - n),
          r = !this.minWidth || o >= this.minWidth,
          i = !this.maxWidth || o <= this.maxWidth;
        r && i && (this.element.style.width = o + 'px');
      }),
      (e.prototype._destroySubscription = function () {
        this.subscription && (this.subscription.unsubscribe(), (this.subscription = void 0));
      }),
      e
    );
  })();
  (C.decorators = [
    { type: t.Directive, args: [{ selector: '[resizeable]', host: { '[class.resizeable]': 'resizeEnabled' } }] }
  ]),
    (C.ctorParameters = function () {
      return [{ type: t.ElementRef }, { type: t.Renderer2 }];
    }),
    (C.propDecorators = {
      resizeEnabled: [{ type: t.Input }],
      minWidth: [{ type: t.Input }],
      maxWidth: [{ type: t.Input }],
      resize: [{ type: t.Output }],
      onMousedown: [{ type: t.HostListener, args: ['mousedown', ['$event']] }]
    });
  Object.create;
  function I(e) {
    var t = 'function' == typeof Symbol && Symbol.iterator,
      n = t && e[t],
      o = 0;
    if (n) return n.call(e);
    if (e && 'number' == typeof e.length)
      return {
        next: function () {
          return e && o >= e.length && (e = void 0), { value: e && e[o++], done: !e };
        }
      };
    throw new TypeError(t ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
  }
  function T(e, t) {
    var n = 'function' == typeof Symbol && e[Symbol.iterator];
    if (!n) return e;
    var o,
      r,
      i = n.call(e),
      a = [];
    try {
      for (; (void 0 === t || t-- > 0) && !(o = i.next()).done; ) a.push(o.value);
    } catch (e) {
      r = { error: e };
    } finally {
      try {
        o && !o.done && (n = i.return) && n.call(i);
      } finally {
        if (r) throw r.error;
      }
    }
    return a;
  }
  function S() {
    for (var e = [], t = 0; t < arguments.length; t++) e = e.concat(T(arguments[t]));
    return e;
  }
  Object.create;
  var E = (function () {
    function e(e, n) {
      (this.document = n),
        (this.reorder = new t.EventEmitter()),
        (this.targetChanged = new t.EventEmitter()),
        (this.differ = e.find({}).create());
    }
    return (
      (e.prototype.ngAfterContentInit = function () {
        this.updateSubscriptions(), this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));
      }),
      (e.prototype.ngOnDestroy = function () {
        this.draggables.forEach(function (e) {
          e.dragStart.unsubscribe(), e.dragging.unsubscribe(), e.dragEnd.unsubscribe();
        });
      }),
      (e.prototype.updateSubscriptions = function () {
        var e = this,
          t = this.differ.diff(this.createMapDiffs());
        if (t) {
          var n = function (e) {
            var t = e.previousValue;
            t && (t.dragStart.unsubscribe(), t.dragging.unsubscribe(), t.dragEnd.unsubscribe());
          };
          t.forEachAddedItem(function (t) {
            var o = t.currentValue,
              r = t.previousValue;
            n({ previousValue: r }),
              o &&
                (o.dragStart.subscribe(e.onDragStart.bind(e)),
                o.dragging.subscribe(e.onDragging.bind(e)),
                o.dragEnd.subscribe(e.onDragEnd.bind(e)));
          }),
            t.forEachRemovedItem(n);
        }
      }),
      (e.prototype.onDragStart = function () {
        var e, t;
        this.positions = {};
        var n = 0;
        try {
          for (var o = I(this.draggables.toArray()), r = o.next(); !r.done; r = o.next()) {
            var i = r.value,
              a = i.element,
              s = parseInt(a.offsetLeft.toString(), 0);
            this.positions[i.dragModel.prop] = {
              left: s,
              right: s + parseInt(a.offsetWidth.toString(), 0),
              index: n++,
              element: a
            };
          }
        } catch (t) {
          e = { error: t };
        } finally {
          try {
            r && !r.done && (t = o.return) && t.call(o);
          } finally {
            if (e) throw e.error;
          }
        }
      }),
      (e.prototype.onDragging = function (e) {
        e.element;
        var t = e.model,
          n = e.event,
          o = this.positions[t.prop],
          r = this.isTarget(t, n);
        r
          ? this.lastDraggingIndex !== r.i &&
            (this.targetChanged.emit({ prevIndex: this.lastDraggingIndex, newIndex: r.i, initialIndex: o.index }),
            (this.lastDraggingIndex = r.i))
          : this.lastDraggingIndex !== o.index &&
            (this.targetChanged.emit({ prevIndex: this.lastDraggingIndex, initialIndex: o.index }),
            (this.lastDraggingIndex = o.index));
      }),
      (e.prototype.onDragEnd = function (e) {
        var t = e.element,
          n = e.model,
          o = e.event,
          r = this.positions[n.prop],
          i = this.isTarget(n, o);
        i && this.reorder.emit({ prevIndex: r.index, newIndex: i.i, model: n }),
          (this.lastDraggingIndex = void 0),
          (t.style.left = 'auto');
      }),
      (e.prototype.isTarget = function (e, t) {
        var n = 0,
          o = t.x || t.clientX,
          r = t.y || t.clientY,
          i = this.document.elementsFromPoint(o, r),
          a = function (t) {
            var o = s.positions[t];
            if (
              e.prop !== t &&
              i.find(function (e) {
                return e === o.element;
              })
            )
              return { value: { pos: o, i: n } };
            n++;
          },
          s = this;
        for (var l in this.positions) {
          var c = a(l);
          if ('object' == typeof c) return c.value;
        }
      }),
      (e.prototype.createMapDiffs = function () {
        return this.draggables.toArray().reduce(function (e, t) {
          return (e[t.dragModel.$$id] = t), e;
        }, {});
      }),
      e
    );
  })();
  (E.decorators = [{ type: t.Directive, args: [{ selector: '[orderable]' }] }]),
    (E.ctorParameters = function () {
      return [{ type: t.KeyValueDiffers }, { type: void 0, decorators: [{ type: t.Inject, args: [n.DOCUMENT] }] }];
    }),
    (E.propDecorators = {
      reorder: [{ type: t.Output }],
      targetChanged: [{ type: t.Output }],
      draggables: [{ type: t.ContentChildren, args: [x, { descendants: !0 }] }]
    });
  var P = (function () {
    function e() {
      (this.pressEnabled = !0),
        (this.duration = 500),
        (this.longPressStart = new t.EventEmitter()),
        (this.longPressing = new t.EventEmitter()),
        (this.longPressEnd = new t.EventEmitter()),
        (this.mouseX = 0),
        (this.mouseY = 0);
    }
    return (
      Object.defineProperty(e.prototype, 'press', {
        get: function () {
          return this.pressing;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(e.prototype, 'isLongPress', {
        get: function () {
          return this.isLongPressing;
        },
        enumerable: !1,
        configurable: !0
      }),
      (e.prototype.onMouseDown = function (e) {
        var t = this;
        if (1 === e.which && this.pressEnabled && !e.target.classList.contains('resize-handle')) {
          (this.mouseX = e.clientX), (this.mouseY = e.clientY), (this.pressing = !0), (this.isLongPressing = !1);
          var n = s.fromEvent(document, 'mouseup');
          (this.subscription = n.subscribe(function (e) {
            return t.onMouseup();
          })),
            (this.timeout = setTimeout(function () {
              (t.isLongPressing = !0),
                t.longPressStart.emit({ event: e, model: t.pressModel }),
                t.subscription.add(
                  s
                    .fromEvent(document, 'mousemove')
                    .pipe(l.takeUntil(n))
                    .subscribe(function (e) {
                      return t.onMouseMove(e);
                    })
                ),
                t.loop(e);
            }, this.duration)),
            this.loop(e);
        }
      }),
      (e.prototype.onMouseMove = function (e) {
        if (this.pressing && !this.isLongPressing) {
          var t = Math.abs(e.clientX - this.mouseX) > 10,
            n = Math.abs(e.clientY - this.mouseY) > 10;
          (t || n) && this.endPress();
        }
      }),
      (e.prototype.loop = function (e) {
        var t = this;
        this.isLongPressing &&
          (this.timeout = setTimeout(function () {
            t.longPressing.emit({ event: e, model: t.pressModel }), t.loop(e);
          }, 50));
      }),
      (e.prototype.endPress = function () {
        clearTimeout(this.timeout),
          (this.isLongPressing = !1),
          (this.pressing = !1),
          this._destroySubscription(),
          this.longPressEnd.emit({ model: this.pressModel });
      }),
      (e.prototype.onMouseup = function () {
        this.endPress();
      }),
      (e.prototype.ngOnDestroy = function () {
        this._destroySubscription();
      }),
      (e.prototype._destroySubscription = function () {
        this.subscription && (this.subscription.unsubscribe(), (this.subscription = void 0));
      }),
      e
    );
  })();
  (P.decorators = [{ type: t.Directive, args: [{ selector: '[long-press]' }] }]),
    (P.propDecorators = {
      pressEnabled: [{ type: t.Input }],
      pressModel: [{ type: t.Input }],
      duration: [{ type: t.Input }],
      longPressStart: [{ type: t.Output }],
      longPressing: [{ type: t.Output }],
      longPressEnd: [{ type: t.Output }],
      press: [{ type: t.HostBinding, args: ['class.press'] }],
      isLongPress: [{ type: t.HostBinding, args: ['class.longpress'] }],
      onMouseDown: [{ type: t.HostListener, args: ['mousedown', ['$event']] }]
    });
  var R = (function () {
    function e(e, n, o) {
      (this.ngZone = e),
        (this.renderer = o),
        (this.scrollbarV = !1),
        (this.scrollbarH = !1),
        (this.scroll = new t.EventEmitter()),
        (this.scrollYPos = 0),
        (this.scrollXPos = 0),
        (this.prevScrollYPos = 0),
        (this.prevScrollXPos = 0),
        (this._scrollEventListener = null),
        (this.element = n.nativeElement);
    }
    return (
      (e.prototype.ngOnInit = function () {
        if (this.scrollbarV || this.scrollbarH) {
          var e = this.renderer;
          (this.parentElement = e.parentNode(e.parentNode(this.element))),
            (this._scrollEventListener = this.onScrolled.bind(this)),
            this.parentElement.addEventListener('scroll', this._scrollEventListener);
        }
      }),
      (e.prototype.ngOnDestroy = function () {
        this._scrollEventListener &&
          (this.parentElement.removeEventListener('scroll', this._scrollEventListener),
          (this._scrollEventListener = null));
      }),
      (e.prototype.setOffset = function (e) {
        this.parentElement && (this.parentElement.scrollTop = e);
      }),
      (e.prototype.onScrolled = function (e) {
        var t = this,
          n = e.currentTarget;
        requestAnimationFrame(function () {
          (t.scrollYPos = n.scrollTop), (t.scrollXPos = n.scrollLeft), t.updateOffset();
        });
      }),
      (e.prototype.updateOffset = function () {
        var e;
        this.scrollYPos < this.prevScrollYPos ? (e = 'down') : this.scrollYPos > this.prevScrollYPos && (e = 'up'),
          this.scroll.emit({ direction: e, scrollYPos: this.scrollYPos, scrollXPos: this.scrollXPos }),
          (this.prevScrollYPos = this.scrollYPos),
          (this.prevScrollXPos = this.scrollXPos);
      }),
      e
    );
  })();
  (R.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-scroller',
          template: ' <ng-content></ng-content> ',
          host: { class: 'datatable-scroll' },
          changeDetection: t.ChangeDetectionStrategy.OnPush
        }
      ]
    }
  ]),
    (R.ctorParameters = function () {
      return [{ type: t.NgZone }, { type: t.ElementRef }, { type: t.Renderer2 }];
    }),
    (R.propDecorators = {
      scrollbarV: [{ type: t.Input }],
      scrollbarH: [{ type: t.Input }],
      scrollHeight: [{ type: t.HostBinding, args: ['style.height.px'] }, { type: t.Input }],
      scrollWidth: [{ type: t.HostBinding, args: ['style.width.px'] }, { type: t.Input }],
      scroll: [{ type: t.Output }]
    });
  var D = function (e) {
    this.template = e;
  };
  (D.decorators = [{ type: t.Directive, args: [{ selector: '[ngx-datatable-header-template]' }] }]),
    (D.ctorParameters = function () {
      return [{ type: t.TemplateRef }];
    });
  var O = function (e) {
    this.template = e;
  };
  (O.decorators = [{ type: t.Directive, args: [{ selector: '[ngx-datatable-cell-template]' }] }]),
    (O.ctorParameters = function () {
      return [{ type: t.TemplateRef }];
    });
  var H = function (e) {
    this.template = e;
  };
  (H.decorators = [{ type: t.Directive, args: [{ selector: '[ngx-datatable-tree-toggle]' }] }]),
    (H.ctorParameters = function () {
      return [{ type: t.TemplateRef }];
    });
  var k,
    _ = (function () {
      function e(e) {
        (this.columnChangesService = e), (this.isFirstChange = !0);
      }
      return (
        Object.defineProperty(e.prototype, 'cellTemplate', {
          get: function () {
            return this._cellTemplateInput || this._cellTemplateQuery;
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'headerTemplate', {
          get: function () {
            return this._headerTemplateInput || this._headerTemplateQuery;
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'treeToggleTemplate', {
          get: function () {
            return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;
          },
          enumerable: !1,
          configurable: !0
        }),
        (e.prototype.ngOnChanges = function () {
          this.isFirstChange ? (this.isFirstChange = !1) : this.columnChangesService.onInputChange();
        }),
        e
      );
    })();
  function z(e) {
    var t,
      n,
      o = { left: [], center: [], right: [] };
    if (e)
      try {
        for (var r = I(e), i = r.next(); !i.done; i = r.next()) {
          var a = i.value;
          a.frozenLeft ? o.left.push(a) : a.frozenRight ? o.right.push(a) : o.center.push(a);
        }
      } catch (e) {
        t = { error: e };
      } finally {
        try {
          i && !i.done && (n = r.return) && n.call(r);
        } finally {
          if (t) throw t.error;
        }
      }
    return o;
  }
  function M(e, t) {
    return { left: F(e.left), center: F(e.center), right: F(e.right), total: Math.floor(F(t)) };
  }
  function F(e, t) {
    var n,
      o,
      r = 0;
    if (e)
      try {
        for (var i = I(e), a = i.next(); !a.done; a = i.next()) {
          var s = a.value,
            l = t && s[t] ? s[t] : s.width;
          r += parseFloat(l);
        }
      } catch (e) {
        n = { error: e };
      } finally {
        try {
          a && !a.done && (o = i.return) && o.call(i);
        } finally {
          if (n) throw n.error;
        }
      }
    return r;
  }
  function j(e, t) {
    var n,
      o,
      r = 0;
    try {
      for (var i = I(e), a = i.next(); !a.done; a = i.next()) {
        var s = a.value;
        r += t && s[t] ? s[t] : s.width;
      }
    } catch (e) {
      n = { error: e };
    } finally {
      try {
        a && !a.done && (o = i.return) && o.call(i);
      } finally {
        if (n) throw n.error;
      }
    }
    return r;
  }
  function B(e) {
    var t = [],
      n = z(e);
    return (
      t.push({ type: 'left', columns: n.left }),
      t.push({ type: 'center', columns: n.center }),
      t.push({ type: 'right', columns: n.right }),
      t
    );
  }
  function A(e) {
    return (e = (e = (e = (e = e.replace(/[^a-zA-Z0-9 ]/g, ' ')).replace(/([a-z](?=[A-Z]))/g, '$1 '))
      .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')
      .trim()
      .toLowerCase()).replace(/([ 0-9]+)([a-zA-Z])/g, function (e, t, n) {
      return t.trim() + n.toUpperCase();
    }));
  }
  function W(e) {
    return e
      .replace(/([A-Z])/g, function (e) {
        return ' ' + e;
      })
      .replace(/^./, function (e) {
        return e.toUpperCase();
      });
  }
  (_.decorators = [{ type: t.Directive, args: [{ selector: 'ngx-datatable-column' }] }]),
    (_.ctorParameters = function () {
      return [{ type: b }];
    }),
    (_.propDecorators = {
      name: [{ type: t.Input }],
      prop: [{ type: t.Input }],
      frozenLeft: [{ type: t.Input }],
      frozenRight: [{ type: t.Input }],
      flexGrow: [{ type: t.Input }],
      resizeable: [{ type: t.Input }],
      comparator: [{ type: t.Input }],
      pipe: [{ type: t.Input }],
      sortable: [{ type: t.Input }],
      draggable: [{ type: t.Input }],
      canAutoResize: [{ type: t.Input }],
      minWidth: [{ type: t.Input }],
      width: [{ type: t.Input }],
      maxWidth: [{ type: t.Input }],
      checkboxable: [{ type: t.Input }],
      headerCheckboxable: [{ type: t.Input }],
      headerClass: [{ type: t.Input }],
      cellClass: [{ type: t.Input }],
      isTreeColumn: [{ type: t.Input }],
      treeLevelIndent: [{ type: t.Input }],
      summaryFunc: [{ type: t.Input }],
      summaryTemplate: [{ type: t.Input }],
      _cellTemplateInput: [{ type: t.Input, args: ['cellTemplate'] }],
      _cellTemplateQuery: [{ type: t.ContentChild, args: [O, { read: t.TemplateRef, static: !0 }] }],
      _headerTemplateInput: [{ type: t.Input, args: ['headerTemplate'] }],
      _headerTemplateQuery: [{ type: t.ContentChild, args: [D, { read: t.TemplateRef, static: !0 }] }],
      _treeToggleTemplateInput: [{ type: t.Input, args: ['treeToggleTemplate'] }],
      _treeToggleTemplateQuery: [{ type: t.ContentChild, args: [H, { read: t.TemplateRef, static: !0 }] }]
    }),
    ((k = e.SortType || (e.SortType = {})).single = 'single'),
    (k.multi = 'multi');
  var V = {},
    $ = 'undefined' != typeof document ? document.createElement('div').style : void 0,
    L = function () {
      var e = 'undefined' != typeof window ? window.getComputedStyle(document.documentElement, '') : void 0,
        t =
          void 0 !== e
            ? Array.prototype.slice
                .call(e)
                .join('')
                .match(/-(moz|webkit|ms)-/)
            : null,
        n = null !== t ? t[1] : void 0,
        o = void 0 !== n ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + n + ')', 'i'))[1] : void 0;
      return o ? { dom: o, lowercase: n, css: '-' + n + '-', js: n[0].toUpperCase() + n.substr(1) } : void 0;
    },
    G = L();
  function X(e) {
    var t = A(e);
    return V[t] || (void 0 !== G && void 0 !== $[G.css + e] ? (V[t] = G.css + e) : void 0 !== $[e] && (V[t] = e)), V[t];
  }
  var N = 'undefined' != typeof window ? X('transform') : void 0,
    Y = 'undefined' != typeof window ? X('backfaceVisibility') : void 0,
    K = 'undefined' != typeof window ? !!X('transform') : void 0,
    U = 'undefined' != typeof window ? !!X('perspective') : void 0,
    q = 'undefined' != typeof window ? window.navigator.userAgent : 'Chrome',
    Q = /Safari\//.test(q) && !/Chrome\//.test(q);
  function Z(e, t, n) {
    void 0 !== N && K
      ? !Q && U
        ? ((e[N] = 'translate3d(' + t + 'px, ' + n + 'px, 0)'), (e[Y] = 'hidden'))
        : (e[A(N)] = 'translate(' + t + 'px, ' + n + 'px)')
      : ((e.top = n + 'px'), (e.left = t + 'px'));
  }
  var J,
    ee,
    te = (function () {
      function n(e) {
        (this.cd = e),
          (this.sort = new t.EventEmitter()),
          (this.reorder = new t.EventEmitter()),
          (this.resize = new t.EventEmitter()),
          (this.select = new t.EventEmitter()),
          (this.columnContextmenu = new t.EventEmitter(!1)),
          (this.filter = new t.EventEmitter()),
          (this._columnGroupWidths = { total: 100 }),
          (this._styleByGroup = { left: {}, center: {}, right: {} }),
          (this.destroyed = !1);
      }
      return (
        Object.defineProperty(n.prototype, 'innerWidth', {
          get: function () {
            return this._innerWidth;
          },
          set: function (e) {
            var t = this;
            (this._innerWidth = e),
              setTimeout(function () {
                if (t._columns) {
                  var e = z(t._columns);
                  (t._columnGroupWidths = M(e, t._columns)), t.setStylesByGroup();
                }
              });
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(n.prototype, 'headerHeight', {
          get: function () {
            return this._headerHeight;
          },
          set: function (e) {
            this._headerHeight = 'auto' !== e ? e + 'px' : e;
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(n.prototype, 'columns', {
          get: function () {
            return this._columns;
          },
          set: function (e) {
            var t = this;
            this._columns = e;
            var n = z(e);
            (this._columnsByPin = B(e)),
              setTimeout(function () {
                (t._columnGroupWidths = M(n, e)), t.setStylesByGroup();
              });
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(n.prototype, 'offsetX', {
          get: function () {
            return this._offsetX;
          },
          set: function (e) {
            (this._offsetX = e), this.setStylesByGroup();
          },
          enumerable: !1,
          configurable: !0
        }),
        (n.prototype.ngOnDestroy = function () {
          this.destroyed = !0;
        }),
        (n.prototype.onLongPressStart = function (e) {
          var t = e.event;
          (e.model.dragging = !0), (this.dragEventTarget = t);
        }),
        (n.prototype.onLongPressEnd = function (e) {
          var t = this,
            n = e.event,
            o = e.model;
          (this.dragEventTarget = n),
            setTimeout(function () {
              var e = t._columns.find(function (e) {
                return e.$$id === o.$$id;
              });
              e && (e.dragging = !1);
            }, 5);
        }),
        Object.defineProperty(n.prototype, 'headerWidth', {
          get: function () {
            return this.scrollbarH ? this.innerWidth + 'px' : '100%';
          },
          enumerable: !1,
          configurable: !0
        }),
        (n.prototype.trackByGroups = function (e, t) {
          return t.type;
        }),
        (n.prototype.columnTrackingFn = function (e, t) {
          return t.$$id;
        }),
        (n.prototype.onColumnResized = function (e, t) {
          e <= t.minWidth ? (e = t.minWidth) : e >= t.maxWidth && (e = t.maxWidth),
            this.resize.emit({ column: t, prevValue: t.width, newValue: e });
        }),
        (n.prototype.onColumnReordered = function (e) {
          var t = e.prevIndex,
            n = e.newIndex,
            o = e.model,
            r = this.getColumn(n);
          (r.isTarget = !1),
            (r.targetMarkerContext = void 0),
            this.reorder.emit({ column: o, prevValue: t, newValue: n });
        }),
        (n.prototype.onTargetChanged = function (e) {
          var t = e.prevIndex,
            n = e.newIndex,
            o = e.initialIndex;
          if (t || 0 === t) {
            var r = this.getColumn(t);
            (r.isTarget = !1), (r.targetMarkerContext = void 0);
          }
          if (n || 0 === n) {
            var i = this.getColumn(n);
            (i.isTarget = !0),
              o !== n &&
                (i.targetMarkerContext = { class: 'targetMarker '.concat(o > n ? 'dragFromRight' : 'dragFromLeft') });
          }
        }),
        (n.prototype.getColumn = function (e) {
          var t = this._columnsByPin[0].columns.length;
          if (e < t) return this._columnsByPin[0].columns[e];
          var n = this._columnsByPin[1].columns.length;
          return e < t + n ? this._columnsByPin[1].columns[e - t] : this._columnsByPin[2].columns[e - t - n];
        }),
        (n.prototype.onSort = function (e) {
          var t = e.column,
            n = e.prevValue,
            o = e.newValue;
          if (!t.dragging) {
            var r = this.calcNewSorts(t, n, o);
            this.sort.emit({ sorts: r, column: t, prevValue: n, newValue: o });
          }
        }),
        (n.prototype.calcNewSorts = function (t, n, o) {
          var r = 0;
          this.sorts || (this.sorts = []);
          var i = this.sorts.map(function (e, n) {
            return (e = Object.assign({}, e)).prop === t.prop && (r = n), e;
          });
          return (
            void 0 === o
              ? i.splice(r, 1)
              : n
              ? (i[r].dir = o)
              : (this.sortType === e.SortType.single && i.splice(0, this.sorts.length),
                i.push({ dir: o, prop: t.prop })),
            i
          );
        }),
        (n.prototype.setStylesByGroup = function () {
          (this._styleByGroup.left = this.calcStylesByGroup('left')),
            (this._styleByGroup.center = this.calcStylesByGroup('center')),
            (this._styleByGroup.right = this.calcStylesByGroup('right')),
            this.destroyed || this.cd.detectChanges();
        }),
        (n.prototype.calcStylesByGroup = function (e) {
          var t = this._columnGroupWidths,
            n = this.offsetX,
            o = { width: t[e] + 'px' };
          if ('center' === e) Z(o, -1 * n, 0);
          else if ('right' === e) {
            Z(o, -1 * (t.total - this.innerWidth), 0);
          }
          return o;
        }),
        (n.prototype.onColumnFilter = function (e) {
          this.filter.emit(e);
        }),
        n
      );
    })();
  function ne() {
    return '';
  }
  function oe(e) {
    return null == e ? ne : 'number' == typeof e ? re : -1 !== e.indexOf('.') ? ae : ie;
  }
  function re(e, t) {
    if (null == e) return '';
    if (!e || null == t) return e;
    var n = e[t];
    return null == n ? '' : n;
  }
  function ie(e, t) {
    if (null == e) return '';
    if (!e || !t) return e;
    var n = e[t];
    return null == n ? '' : n;
  }
  function ae(e, t) {
    if (null == e) return '';
    if (!e || !t) return e;
    var n = e[t];
    if (void 0 !== n) return n;
    n = e;
    var o = t.split('.');
    if (o.length) for (var r = 0; r < o.length; r++) if (null == (n = n[o[r]])) return '';
    return n;
  }
  function se(t, n) {
    return t === e.SortType.single
      ? n === e.SortDirection.asc
        ? e.SortDirection.desc
        : e.SortDirection.asc
      : n
      ? n === e.SortDirection.asc
        ? e.SortDirection.desc
        : void e.SortDirection.desc
      : e.SortDirection.asc;
  }
  function le(e, t) {
    if ((null == e && (e = 0), null == t && (t = 0), e instanceof Date && t instanceof Date)) {
      if (e < t) return -1;
      if (e > t) return 1;
    } else if (isNaN(parseFloat(e)) || !isFinite(e) || isNaN(parseFloat(t)) || !isFinite(t)) {
      if (((e = String(e)), (t = String(t)), e.toLowerCase() < t.toLowerCase())) return -1;
      if (e.toLowerCase() > t.toLowerCase()) return 1;
    } else {
      if (parseFloat(e) < parseFloat(t)) return -1;
      if (parseFloat(e) > parseFloat(t)) return 1;
    }
    return 0;
  }
  function ce(t, n, o) {
    if (!t) return [];
    if (!o || !o.length || !n) return S(t);
    var r = new Map();
    t.forEach(function (e, t) {
      return r.set(e, t);
    });
    var i = S(t),
      a = n.reduce(function (e, t) {
        return t.comparator && 'function' == typeof t.comparator && (e[t.prop] = t.comparator), e;
      }, {}),
      s = o.map(function (e) {
        var t = e.prop;
        return { prop: t, dir: e.dir, valueGetter: oe(t), compareFn: a[t] || le };
      });
    return i.sort(function (t, n) {
      var o, i;
      try {
        for (var a = I(s), l = a.next(); !l.done; l = a.next()) {
          var c = l.value,
            u = c.prop,
            p = c.valueGetter,
            h = p(t, u),
            d = p(n, u),
            g = c.dir !== e.SortDirection.desc ? c.compareFn(h, d, t, n, c.dir) : -c.compareFn(h, d, t, n, c.dir);
          if (0 !== g) return g;
        }
      } catch (e) {
        o = { error: e };
      } finally {
        try {
          l && !l.done && (i = a.return) && i.call(a);
        } finally {
          if (o) throw o.error;
        }
      }
      return r.has(t) && r.has(n) ? (r.get(t) < r.get(n) ? -1 : 1) : 0;
    });
  }
  (te.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-header',
          template:
            '\n    <div\n      role="row"\n      orderable\n      (reorder)="onColumnReordered($event)"\n      (targetChanged)="onTargetChanged($event)"\n      [style.width.px]="_columnGroupWidths.total"\n      class="datatable-header-inner"\n    >\n      <div\n        *ngFor="let colGroup of _columnsByPin; trackBy: trackByGroups"\n        [class]="\'datatable-row-\' + colGroup.type"\n        [ngStyle]="_styleByGroup[colGroup.type]"\n      >\n        <datatable-header-cell\n          role="columnheader"\n          *ngFor="let column of colGroup.columns; trackBy: columnTrackingFn"\n          [ngClass]="{ \'filter-template-wrap\': column.filter }"\n          resizeable\n          [resizeEnabled]="column.resizeable"\n          (resize)="onColumnResized($event, column)"\n          long-press\n          [pressModel]="column"\n          [pressEnabled]="reorderable && column.draggable"\n          (longPressStart)="onLongPressStart($event)"\n          (longPressEnd)="onLongPressEnd($event)"\n          draggable\n          [dragX]="reorderable && column.draggable && column.dragging"\n          [dragY]="false"\n          [dragModel]="column"\n          [dragEventTarget]="dragEventTarget"\n          [headerHeight]="headerHeight"\n          [isTarget]="column.isTarget"\n          [targetMarkerTemplate]="targetMarkerTemplate"\n          [targetMarkerContext]="column.targetMarkerContext"\n          [column]="column"\n          [sortType]="sortType"\n          [sorts]="sorts"\n          [selectionType]="selectionType"\n          [sortAscendingIcon]="sortAscendingIcon"\n          [sortDescendingIcon]="sortDescendingIcon"\n          [sortUnsetIcon]="sortUnsetIcon"\n          [allRowsSelected]="allRowsSelected"\n          (sort)="onSort($event)"\n          (filter)="onColumnFilter($event)"\n          (select)="select.emit($event)"\n          (columnContextmenu)="columnContextmenu.emit($event)"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  ',
          host: { class: 'datatable-header' },
          changeDetection: t.ChangeDetectionStrategy.OnPush
        }
      ]
    }
  ]),
    (te.ctorParameters = function () {
      return [{ type: t.ChangeDetectorRef }];
    }),
    (te.propDecorators = {
      sortAscendingIcon: [{ type: t.Input }],
      sortDescendingIcon: [{ type: t.Input }],
      sortUnsetIcon: [{ type: t.Input }],
      scrollbarH: [{ type: t.Input }],
      dealsWithGroup: [{ type: t.Input }],
      targetMarkerTemplate: [{ type: t.Input }],
      innerWidth: [{ type: t.Input }],
      sorts: [{ type: t.Input }],
      sortType: [{ type: t.Input }],
      allRowsSelected: [{ type: t.Input }],
      selectionType: [{ type: t.Input }],
      reorderable: [{ type: t.Input }],
      headerHeight: [{ type: t.HostBinding, args: ['style.height'] }, { type: t.Input }],
      columns: [{ type: t.Input }],
      offsetX: [{ type: t.Input }],
      sort: [{ type: t.Output }],
      reorder: [{ type: t.Output }],
      resize: [{ type: t.Output }],
      select: [{ type: t.Output }],
      columnContextmenu: [{ type: t.Output }],
      filter: [{ type: t.Output }],
      headerWidth: [{ type: t.HostBinding, args: ['style.width'] }]
    }),
    ((J = e.SelectionType || (e.SelectionType = {})).single = 'single'),
    (J.multi = 'multi'),
    (J.multiClick = 'multiClick'),
    (J.cell = 'cell'),
    (J.checkbox = 'checkbox'),
    ((ee = e.SortDirection || (e.SortDirection = {})).asc = 'asc'),
    (ee.desc = 'desc');
  var ue = (function () {
    function n(e) {
      (this.cd = e),
        (this.sort = new t.EventEmitter()),
        (this.select = new t.EventEmitter()),
        (this.columnContextmenu = new t.EventEmitter(!1)),
        (this.filter = new t.EventEmitter()),
        (this.sortFn = this.onSort.bind(this)),
        (this.selectFn = this.select.emit.bind(this.select)),
        (this.filterCache = {}),
        (this.cellContext = {
          column: this.column,
          sortDir: this.sortDir,
          sortFn: this.sortFn,
          allRowsSelected: this.allRowsSelected,
          selectFn: this.selectFn
        });
    }
    return (
      Object.defineProperty(n.prototype, 'allRowsSelected', {
        get: function () {
          return this._allRowsSelected;
        },
        set: function (e) {
          (this._allRowsSelected = e), (this.cellContext.allRowsSelected = e);
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'column', {
        get: function () {
          return this._column;
        },
        set: function (e) {
          (this._column = e), (this.cellContext.column = e), this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'sorts', {
        get: function () {
          return this._sorts;
        },
        set: function (e) {
          (this._sorts = e),
            (this.sortDir = this.calcSortDir(e)),
            (this.cellContext.sortDir = this.sortDir),
            (this.sortClass = this.calcSortClass(this.sortDir)),
            this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'columnCssClasses', {
        get: function () {
          var e,
            t,
            n = 'datatable-header-cell';
          if (
            (this.column.sortable && (n += ' sortable'),
            this.column.resizeable && (n += ' resizeable'),
            this.column.headerClass)
          )
            if ('string' == typeof this.column.headerClass) n += ' ' + this.column.headerClass;
            else if ('function' == typeof this.column.headerClass) {
              var o = this.column.headerClass({ column: this.column });
              if ('string' == typeof o) n += o;
              else if ('object' == typeof o) {
                var r = Object.keys(o);
                try {
                  for (var i = I(r), a = i.next(); !a.done; a = i.next()) {
                    var s = a.value;
                    !0 === o[s] && (n += ' ' + s);
                  }
                } catch (t) {
                  e = { error: t };
                } finally {
                  try {
                    a && !a.done && (t = i.return) && t.call(i);
                  } finally {
                    if (e) throw e.error;
                  }
                }
              }
            }
          var l = this.sortDir;
          return l && (n += ' sort-active sort-' + l), n;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'name', {
        get: function () {
          return void 0 === this.column.headerTemplate ? this.column.name : void 0;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'minWidth', {
        get: function () {
          return this.column.minWidth;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'maxWidth', {
        get: function () {
          return this.column.maxWidth;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'width', {
        get: function () {
          return this.column.width;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isCheckboxable', {
        get: function () {
          return (
            this.column.checkboxable &&
            this.column.headerCheckboxable &&
            this.selectionType === e.SelectionType.checkbox
          );
        },
        enumerable: !1,
        configurable: !0
      }),
      (n.prototype.onContextmenu = function (e) {
        this.columnContextmenu.emit({ event: e, column: this.column });
      }),
      (n.prototype.ngOnInit = function () {
        this.sortClass = this.calcSortClass(this.sortDir);
      }),
      (n.prototype.calcSortDir = function (e) {
        var t = this;
        if (e && this.column) {
          var n = e.find(function (e) {
            return e.prop === t.column.prop;
          });
          if (n) return n.dir;
        }
      }),
      (n.prototype.onSort = function () {
        if (this.column.sortable) {
          var e = se(this.sortType, this.sortDir);
          this.sort.emit({ column: this.column, prevValue: this.sortDir, newValue: e });
        }
      }),
      (n.prototype.calcSortClass = function (t) {
        if (this.cellContext.column.sortable)
          return t === e.SortDirection.asc
            ? 'sort-btn sort-asc ' + this.sortAscendingIcon
            : t === e.SortDirection.desc
            ? 'sort-btn sort-desc ' + this.sortDescendingIcon
            : 'sort-btn ' + this.sortUnsetIcon;
      }),
      (n.prototype.setFilter = function (e) {
        this.filter.emit({ column: e, value: this.filterCache[e] });
      }),
      (n.prototype.resetFilter = function (e) {
        (this.filterCache[e] = ''), this.filter.emit({ column: e });
      }),
      n
    );
  })();
  (ue.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-header-cell',
          template:
            '\n    <div class="datatable-header-cell-template-wrap">\n      <ng-container *ngIf="column.filter">\n        <mat-form-field class="filter-header">\n          <input\n            matInput\n            [placeholder]="column.name"\n            [(ngModel)]="filterCache[column.prop]"\n            (ngModelChange)="setFilter(column.prop)"\n          />\n          <button\n            mat-button\n            *ngIf="filterCache[column.prop]"\n            matSuffix\n            mat-icon-button\n            aria-label="Clear"\n            (click)="resetFilter(column.prop)"\n          >\n            <mat-icon class="mat-icon material-icons">close</mat-icon>\n          </button>\n        </mat-form-field>\n        <button mat-icon-button>\n          <mat-icon class="mat-icon material-icons" (click)="onSort()">sort</mat-icon>\n        </button>\n      </ng-container>\n      <ng-container *ngIf="!column.filter">\n        <ng-template\n          *ngIf="isTarget"\n          [ngTemplateOutlet]="targetMarkerTemplate"\n          [ngTemplateOutletContext]="targetMarkerContext"\n        >\n        </ng-template>\n        <label *ngIf="isCheckboxable" class="datatable-checkbox">\n          <input type="checkbox" [checked]="allRowsSelected" (change)="select.emit(!allRowsSelected)" />\n        </label>\n        <span *ngIf="!column.headerTemplate" class="datatable-header-cell-wrapper">\n          <span class="datatable-header-cell-label draggable" (click)="onSort()" [innerHTML]="name"> </span>\n        </span>\n        <ng-template\n          *ngIf="column.headerTemplate"\n          [ngTemplateOutlet]="column.headerTemplate"\n          [ngTemplateOutletContext]="cellContext"\n        >\n        </ng-template>\n        <span (click)="onSort()" [class]="sortClass"> </span>\n      </ng-container>\n    </div>\n  ',
          host: { class: 'datatable-header-cell' },
          changeDetection: t.ChangeDetectionStrategy.OnPush
        }
      ]
    }
  ]),
    (ue.ctorParameters = function () {
      return [{ type: t.ChangeDetectorRef }];
    }),
    (ue.propDecorators = {
      sortType: [{ type: t.Input }],
      sortAscendingIcon: [{ type: t.Input }],
      sortDescendingIcon: [{ type: t.Input }],
      sortUnsetIcon: [{ type: t.Input }],
      isTarget: [{ type: t.Input }],
      targetMarkerTemplate: [{ type: t.Input }],
      targetMarkerContext: [{ type: t.Input }],
      allRowsSelected: [{ type: t.Input }],
      selectionType: [{ type: t.Input }],
      column: [{ type: t.Input }],
      headerHeight: [{ type: t.HostBinding, args: ['style.height.px'] }, { type: t.Input }],
      sorts: [{ type: t.Input }],
      sort: [{ type: t.Output }],
      select: [{ type: t.Output }],
      columnContextmenu: [{ type: t.Output }],
      filter: [{ type: t.Output }],
      columnCssClasses: [{ type: t.HostBinding, args: ['class'] }],
      name: [{ type: t.HostBinding, args: ['attr.title'] }],
      minWidth: [{ type: t.HostBinding, args: ['style.minWidth.px'] }],
      maxWidth: [{ type: t.HostBinding, args: ['style.maxWidth.px'] }],
      width: [{ type: t.HostBinding, args: ['style.width.px'] }],
      onContextmenu: [{ type: t.HostListener, args: ['contextmenu', ['$event']] }]
    });
  var pe = (function () {
      function e() {
        this.treeArray = [];
      }
      return (
        (e.prototype.clearCache = function () {
          this.treeArray = [];
        }),
        (e.prototype.initCache = function (e) {
          var t = e.rows,
            n = e.rowHeight,
            o = e.detailRowHeight,
            r = e.externalVirtual,
            i = e.rowCount,
            a = e.rowIndexes,
            s = e.rowExpansions,
            l = 'function' == typeof n,
            c = 'function' == typeof o;
          if (!l && isNaN(n))
            throw new Error(
              "Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (" +
                n +
                ") when 'scrollbarV' is enabled."
            );
          if (!c && isNaN(o))
            throw new Error(
              "Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (" +
                o +
                ") when 'scrollbarV' is enabled."
            );
          var u = r ? i : t.length;
          this.treeArray = new Array(u);
          for (var p = 0; p < u; ++p) this.treeArray[p] = 0;
          for (p = 0; p < u; ++p) {
            var h = t[p],
              d = n;
            l && (d = n(h));
            var g = s.has(h);
            if (h && g)
              if (c) d += o(h, a.get(h));
              else d += o;
            this.update(p, d);
          }
        }),
        (e.prototype.getRowIndex = function (e) {
          return 0 === e ? 0 : this.calcRowIndex(e);
        }),
        (e.prototype.update = function (e, t) {
          if (!this.treeArray.length)
            throw new Error(
              'Update at index ' + e + ' with value ' + t + ' failed:\n        Row Height cache not initialized.'
            );
          var n = this.treeArray.length;
          for (e |= 0; e < n; ) (this.treeArray[e] += t), (e |= e + 1);
        }),
        (e.prototype.query = function (e) {
          if (!this.treeArray.length)
            throw new Error('query at index ' + e + ' failed: Fenwick tree array not initialized.');
          var t = 0;
          for (e |= 0; e >= 0; ) (t += this.treeArray[e]), (e = (e & (e + 1)) - 1);
          return t;
        }),
        (e.prototype.queryBetween = function (e, t) {
          return this.query(t) - this.query(e - 1);
        }),
        (e.prototype.calcRowIndex = function (e) {
          if (!this.treeArray.length) return 0;
          for (var t = -1, n = this.treeArray.length, o = Math.pow(2, n.toString(2).length - 1); 0 !== o; o >>= 1) {
            var r = t + o;
            r < n && e >= this.treeArray[r] && ((e -= this.treeArray[r]), (t = r));
          }
          return t + 1;
        }),
        e
      );
    })(),
    he = (function () {
      function e(e) {
        var n = this;
        (this.cd = e),
          (this.selected = []),
          (this.scroll = new t.EventEmitter()),
          (this.page = new t.EventEmitter()),
          (this.activate = new t.EventEmitter()),
          (this.select = new t.EventEmitter()),
          (this.detailToggle = new t.EventEmitter()),
          (this.rowContextmenu = new t.EventEmitter(!1)),
          (this.treeAction = new t.EventEmitter()),
          (this.rowHeightsCache = new pe()),
          (this.temp = []),
          (this.offsetY = 0),
          (this.indexes = {}),
          (this.rowIndexes = new WeakMap()),
          (this.rowExpansions = []),
          (this.getDetailRowHeight = function (e, t) {
            if (!n.rowDetail) return 0;
            var o = n.rowDetail.rowHeight;
            return 'function' == typeof o ? o(e, t) : o;
          }),
          (this.rowTrackingFn = function (e, t) {
            var o = n.getRowIndex(t);
            return n.trackByProp ? t[n.trackByProp] : o;
          });
      }
      return (
        Object.defineProperty(e.prototype, 'pageSize', {
          get: function () {
            return this._pageSize;
          },
          set: function (e) {
            (this._pageSize = e), this.recalcLayout();
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'rows', {
          get: function () {
            return this._rows;
          },
          set: function (e) {
            (this._rows = e), this.recalcLayout();
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'columns', {
          get: function () {
            return this._columns;
          },
          set: function (e) {
            this._columns = e;
            var t = z(e);
            this.columnGroupWidths = M(t, e);
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'offset', {
          get: function () {
            return this._offset;
          },
          set: function (e) {
            (this._offset = e), (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) && this.recalcLayout();
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'rowCount', {
          get: function () {
            return this._rowCount;
          },
          set: function (e) {
            (this._rowCount = e), this.recalcLayout();
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'bodyWidth', {
          get: function () {
            return this.scrollbarH ? this.innerWidth + 'px' : '100%';
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'bodyHeight', {
          get: function () {
            return this._bodyHeight;
          },
          set: function (e) {
            this.scrollbarV ? (this._bodyHeight = e + 'px') : (this._bodyHeight = 'auto'), this.recalcLayout();
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'selectEnabled', {
          get: function () {
            return !!this.selectionType;
          },
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperty(e.prototype, 'scrollHeight', {
          get: function () {
            if (this.scrollbarV && this.virtualization && this.rowCount)
              return this.rowHeightsCache.query(this.rowCount - 1);
          },
          enumerable: !1,
          configurable: !0
        }),
        (e.prototype.ngOnInit = function () {
          var e = this;
          this.rowDetail &&
            (this.listener = this.rowDetail.toggle.subscribe(function (t) {
              var n = t.type,
                o = t.value;
              'row' === n && e.toggleRowExpansion(o),
                'all' === n && e.toggleAllRows(o),
                e.updateIndexes(),
                e.updateRows(),
                e.cd.markForCheck();
            })),
            this.groupHeader &&
              (this.listener = this.groupHeader.toggle.subscribe(function (t) {
                var n = t.type,
                  o = t.value;
                'group' === n && e.toggleRowExpansion(o),
                  'all' === n && e.toggleAllRows(o),
                  e.updateIndexes(),
                  e.updateRows(),
                  e.cd.markForCheck();
              }));
        }),
        (e.prototype.ngOnDestroy = function () {
          (this.rowDetail || this.groupHeader) && this.listener && this.listener.unsubscribe();
        }),
        (e.prototype.updateOffsetY = function (e) {
          if (this.scroller) {
            if (this.scrollbarV && this.virtualization && e) {
              var t = this.pageSize * e;
              e = this.rowHeightsCache.query(t - 1);
            } else this.scrollbarV && !this.virtualization && (e = 0);
            this.scroller.setOffset(e || 0);
          }
        }),
        (e.prototype.onBodyScroll = function (e) {
          var t = e.scrollYPos,
            n = e.scrollXPos;
          (this.offsetY === t && this.offsetX === n) || this.scroll.emit({ offsetY: t, offsetX: n }),
            (this.offsetY = t),
            (this.offsetX = n),
            this.updateIndexes(),
            this.updatePage(e.direction),
            this.updateRows();
        }),
        (e.prototype.updatePage = function (e) {
          var t = this.indexes.first / this.pageSize;
          'up' === e ? (t = Math.ceil(t)) : 'down' === e && (t = Math.floor(t)),
            void 0 === e || isNaN(t) || this.page.emit({ offset: t });
        }),
        (e.prototype.updateRows = function () {
          var e = this,
            t = this.indexes,
            n = t.first,
            o = t.last,
            r = n,
            i = 0,
            a = [];
          if (this.groupedRows) {
            for (
              1 === this.groupedRows.length && this.groupedRows[0].value.length;
              r < o && r < this.groupedRows.length;

            ) {
              var s = this.groupedRows[r];
              this.rowIndexes.set(s, r),
                s.value &&
                  s.value.forEach(function (t, n) {
                    var o = r + '-' + n;
                    e.rowIndexes.set(t, o);
                  }),
                (a[i] = s),
                i++,
                r++;
            }
          } else
            for (; r < o && r < this.rowCount; ) {
              var l = this.rows[r];
              l && (this.rowIndexes.set(l, r), (a[i] = l)), i++, r++;
            }
          this.temp = a;
        }),
        (e.prototype.getRowHeight = function (e) {
          return 'function' == typeof this.rowHeight ? this.rowHeight(e) : this.rowHeight;
        }),
        (e.prototype.getGroupHeight = function (e) {
          var t = 0;
          if (e.value) for (var n = 0; n < e.value.length; n++) t += this.getRowAndDetailHeight(e.value[n]);
          return t;
        }),
        (e.prototype.getRowAndDetailHeight = function (e) {
          var t = this.getRowHeight(e);
          return this.getRowExpanded(e) && (t += this.getDetailRowHeight(e)), t;
        }),
        (e.prototype.getRowsStyles = function (e) {
          var t = {};
          if ((this.groupedRows && (t.width = this.columnGroupWidths.total), this.scrollbarV && this.virtualization)) {
            var n = 0;
            if (this.groupedRows) {
              var o = e[e.length - 1];
              n = o ? this.getRowIndex(o) : 0;
            } else n = this.getRowIndex(e);
            Z(t, 0, this.rowHeightsCache.query(n - 1));
          }
          return t;
        }),
        (e.prototype.getBottomSummaryRowStyles = function () {
          if (!this.scrollbarV || !this.rows || !this.rows.length) return null;
          var e = { position: 'absolute' };
          return Z(e, 0, this.rowHeightsCache.query(this.rows.length - 1)), e;
        }),
        (e.prototype.hideIndicator = function () {
          var e = this;
          setTimeout(function () {
            return (e.loadingIndicator = !1);
          }, 500);
        }),
        (e.prototype.updateIndexes = function () {
          var e = 0,
            t = 0;
          if (this.scrollbarV)
            if (this.virtualization) {
              var n = parseInt(this.bodyHeight, 0);
              (e = this.rowHeightsCache.getRowIndex(this.offsetY)),
                (t = this.rowHeightsCache.getRowIndex(n + this.offsetY) + 1);
            } else (e = 0), (t = this.rowCount);
          else
            this.externalPaging || (e = Math.max(this.offset * this.pageSize, 0)),
              (t = Math.min(e + this.pageSize, this.rowCount));
          this.indexes = { first: e, last: t };
        }),
        (e.prototype.refreshRowHeightCache = function () {
          var e, t;
          if (
            this.scrollbarV &&
            (!this.scrollbarV || this.virtualization) &&
            (this.rowHeightsCache.clearCache(), this.rows && this.rows.length)
          ) {
            var n = new Set();
            try {
              for (var o = I(this.rows), r = o.next(); !r.done; r = o.next()) {
                var i = r.value;
                this.getRowExpanded(i) && n.add(i);
              }
            } catch (t) {
              e = { error: t };
            } finally {
              try {
                r && !r.done && (t = o.return) && t.call(o);
              } finally {
                if (e) throw e.error;
              }
            }
            this.rowHeightsCache.initCache({
              rows: this.rows,
              rowHeight: this.rowHeight,
              detailRowHeight: this.getDetailRowHeight,
              externalVirtual: this.scrollbarV && this.externalPaging,
              rowCount: this.rowCount,
              rowIndexes: this.rowIndexes,
              rowExpansions: n
            });
          }
        }),
        (e.prototype.getAdjustedViewPortIndex = function () {
          var e = this.indexes.first;
          return this.scrollbarV && this.virtualization && this.rowHeightsCache.query(e - 1) <= this.offsetY
            ? e - 1
            : e;
        }),
        (e.prototype.toggleRowExpansion = function (e) {
          var t = this.getAdjustedViewPortIndex(),
            n = this.getRowExpandedIdx(e, this.rowExpansions),
            o = n > -1;
          if (this.scrollbarV && this.virtualization) {
            var r = this.getDetailRowHeight(e) * (o ? -1 : 1),
              i = this.getRowIndex(e);
            this.rowHeightsCache.update(i, r);
          }
          o ? this.rowExpansions.splice(n, 1) : this.rowExpansions.push(e),
            this.detailToggle.emit({ rows: [e], currentIndex: t });
        }),
        (e.prototype.toggleAllRows = function (e) {
          var t, n;
          this.rowExpansions = [];
          var o = this.getAdjustedViewPortIndex();
          if (e)
            try {
              for (var r = I(this.rows), i = r.next(); !i.done; i = r.next()) {
                var a = i.value;
                this.rowExpansions.push(a);
              }
            } catch (e) {
              t = { error: e };
            } finally {
              try {
                i && !i.done && (n = r.return) && n.call(r);
              } finally {
                if (t) throw t.error;
              }
            }
          this.scrollbarV && this.recalcLayout(), this.detailToggle.emit({ rows: this.rows, currentIndex: o });
        }),
        (e.prototype.recalcLayout = function () {
          this.refreshRowHeightCache(), this.updateIndexes(), this.updateRows();
        }),
        (e.prototype.columnTrackingFn = function (e, t) {
          return t.$$id;
        }),
        (e.prototype.stylesByGroup = function (e) {
          var t = this.columnGroupWidths,
            n = this.offsetX,
            o = { width: t[e] + 'px' };
          if ('left' === e) Z(o, n, 0);
          else if ('right' === e) {
            var r = parseInt(this.innerWidth + '', 0);
            Z(o, -1 * (t.total - r - n), 0);
          }
          return o;
        }),
        (e.prototype.getRowExpanded = function (e) {
          var t, n;
          if (0 === this.rowExpansions.length && this.groupExpansionDefault)
            try {
              for (var o = I(this.groupedRows), r = o.next(); !r.done; r = o.next()) {
                var i = r.value;
                this.rowExpansions.push(i);
              }
            } catch (e) {
              t = { error: e };
            } finally {
              try {
                r && !r.done && (n = o.return) && n.call(o);
              } finally {
                if (t) throw t.error;
              }
            }
          return this.getRowExpandedIdx(e, this.rowExpansions) > -1;
        }),
        (e.prototype.getRowExpandedIdx = function (e, t) {
          var n = this;
          if (!t || !t.length) return -1;
          var o = this.rowIdentity(e);
          return t.findIndex(function (e) {
            return n.rowIdentity(e) === o;
          });
        }),
        (e.prototype.getRowIndex = function (e) {
          return this.rowIndexes.get(e) || 0;
        }),
        (e.prototype.onTreeAction = function (e) {
          this.treeAction.emit({ row: e });
        }),
        e
      );
    })();
  (he.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-body',
          template:
            '\n    <datatable-progress *ngIf="loadingIndicator"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]="selected"\n      [rows]="rows"\n      [selectCheck]="selectCheck"\n      [selectEnabled]="selectEnabled"\n      [selectionType]="selectionType"\n      [rowIdentity]="rowIdentity"\n      (select)="select.emit($event)"\n      (activate)="activate.emit($event)"\n    >\n      <datatable-scroller\n        *ngIf="rows?.length"\n        [scrollbarV]="scrollbarV"\n        [scrollbarH]="scrollbarH"\n        [scrollHeight]="scrollHeight"\n        [scrollWidth]="columnGroupWidths?.total"\n        (scroll)="onBodyScroll($event)"\n      >\n        <datatable-summary-row\n          *ngIf="summaryRow && summaryPosition === \'top\'"\n          [rowHeight]="summaryHeight"\n          [offsetX]="offsetX"\n          [innerWidth]="innerWidth"\n          [rows]="rows"\n          [columns]="columns"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]="groupedRows"\n          *ngFor="let group of temp; let i = index; trackBy: rowTrackingFn"\n          [innerWidth]="innerWidth"\n          [ngStyle]="getRowsStyles(group)"\n          [rowDetail]="rowDetail"\n          [groupHeader]="groupHeader"\n          [offsetX]="offsetX"\n          [detailRowHeight]="getDetailRowHeight(group && group[i], i)"\n          [row]="group"\n          [expanded]="getRowExpanded(group)"\n          [rowIndex]="getRowIndex(group && group[i])"\n          (rowContextmenu)="rowContextmenu.emit($event)"\n        >\n          <datatable-body-row\n            role="row"\n            *ngIf="!groupedRows; else groupedRowsTemplate"\n            tabindex="-1"\n            [isSelected]="selector.getRowSelected(group)"\n            [innerWidth]="innerWidth"\n            [offsetX]="offsetX"\n            [columns]="columns"\n            [rowDetail]="rowDetail"\n            [rowHeight]="getRowHeight(group)"\n            [row]="group"\n            [rowIndex]="getRowIndex(group)"\n            [expanded]="getRowExpanded(group)"\n            [rowClass]="rowClass"\n            [displayCheck]="displayCheck"\n            [treeStatus]="group && group.treeStatus"\n            (treeAction)="onTreeAction(group)"\n            (activate)="selector.onActivate($event, indexes.first + i)"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              role="row"\n              *ngFor="let row of group.value; let i = index; trackBy: rowTrackingFn"\n              tabindex="-1"\n              [isSelected]="selector.getRowSelected(row)"\n              [innerWidth]="innerWidth"\n              [offsetX]="offsetX"\n              [columns]="columns"\n              [rowHeight]="getRowHeight(row)"\n              [row]="row"\n              [group]="group.value"\n              [rowIndex]="getRowIndex(row)"\n              [expanded]="getRowExpanded(row)"\n              [rowClass]="rowClass"\n              (activate)="selector.onActivate($event, i)"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          role="row"\n          *ngIf="summaryRow && summaryPosition === \'bottom\'"\n          [ngStyle]="getBottomSummaryRowStyles()"\n          [rowHeight]="summaryHeight"\n          [offsetX]="offsetX"\n          [innerWidth]="innerWidth"\n          [rows]="rows"\n          [columns]="columns"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class="empty-row" *ngIf="!rows?.length && !loadingIndicator" [innerHTML]="emptyMessage"></div>\n    </datatable-selection>\n  ',
          changeDetection: t.ChangeDetectionStrategy.OnPush,
          host: { class: 'datatable-body' }
        }
      ]
    }
  ]),
    (he.ctorParameters = function () {
      return [{ type: t.ChangeDetectorRef }];
    }),
    (he.propDecorators = {
      scrollbarV: [{ type: t.Input }],
      scrollbarH: [{ type: t.Input }],
      loadingIndicator: [{ type: t.Input }],
      externalPaging: [{ type: t.Input }],
      rowHeight: [{ type: t.Input }],
      offsetX: [{ type: t.Input }],
      emptyMessage: [{ type: t.Input }],
      selectionType: [{ type: t.Input }],
      selected: [{ type: t.Input }],
      rowIdentity: [{ type: t.Input }],
      rowDetail: [{ type: t.Input }],
      groupHeader: [{ type: t.Input }],
      selectCheck: [{ type: t.Input }],
      displayCheck: [{ type: t.Input }],
      trackByProp: [{ type: t.Input }],
      rowClass: [{ type: t.Input }],
      groupedRows: [{ type: t.Input }],
      groupExpansionDefault: [{ type: t.Input }],
      innerWidth: [{ type: t.Input }],
      groupRowsBy: [{ type: t.Input }],
      virtualization: [{ type: t.Input }],
      summaryRow: [{ type: t.Input }],
      summaryPosition: [{ type: t.Input }],
      summaryHeight: [{ type: t.Input }],
      pageSize: [{ type: t.Input }],
      rows: [{ type: t.Input }],
      columns: [{ type: t.Input }],
      offset: [{ type: t.Input }],
      rowCount: [{ type: t.Input }],
      bodyWidth: [{ type: t.HostBinding, args: ['style.width'] }],
      bodyHeight: [{ type: t.Input }, { type: t.HostBinding, args: ['style.height'] }],
      scroll: [{ type: t.Output }],
      page: [{ type: t.Output }],
      activate: [{ type: t.Output }],
      select: [{ type: t.Output }],
      detailToggle: [{ type: t.Output }],
      rowContextmenu: [{ type: t.Output }],
      treeAction: [{ type: t.Output }],
      scroller: [{ type: t.ViewChild, args: [R] }]
    });
  var de = (function () {
    function e() {
      (this.selectedCount = 0), (this.page = new t.EventEmitter());
    }
    return (
      Object.defineProperty(e.prototype, 'isVisible', {
        get: function () {
          return this.rowCount / this.pageSize > 1;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(e.prototype, 'curPage', {
        get: function () {
          return this.offset + 1;
        },
        enumerable: !1,
        configurable: !0
      }),
      e
    );
  })();
  (de.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-footer',
          template:
            '\n    <div\n      class="datatable-footer-inner"\n      [ngClass]="{ \'selected-count\': selectedMessage }"\n      [style.height.px]="footerHeight"\n    >\n      <ng-template\n        *ngIf="footerTemplate"\n        [ngTemplateOutlet]="footerTemplate.template"\n        [ngTemplateOutletContext]="{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }"\n      >\n      </ng-template>\n      <div class="page-count" *ngIf="!footerTemplate">\n        <span *ngIf="selectedMessage"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf="!footerTemplate"\n        [pagerLeftArrowIcon]="pagerLeftArrowIcon"\n        [pagerRightArrowIcon]="pagerRightArrowIcon"\n        [pagerPreviousIcon]="pagerPreviousIcon"\n        [pagerNextIcon]="pagerNextIcon"\n        [page]="curPage"\n        [size]="pageSize"\n        [count]="rowCount"\n        [hidden]="!isVisible"\n        (change)="page.emit($event)"\n      >\n      </datatable-pager>\n    </div>\n  ',
          host: { class: 'datatable-footer' },
          changeDetection: t.ChangeDetectionStrategy.OnPush
        }
      ]
    }
  ]),
    (de.propDecorators = {
      footerHeight: [{ type: t.Input }],
      rowCount: [{ type: t.Input }],
      pageSize: [{ type: t.Input }],
      offset: [{ type: t.Input }],
      pagerLeftArrowIcon: [{ type: t.Input }],
      pagerRightArrowIcon: [{ type: t.Input }],
      pagerPreviousIcon: [{ type: t.Input }],
      pagerNextIcon: [{ type: t.Input }],
      totalMessage: [{ type: t.Input }],
      footerTemplate: [{ type: t.Input }],
      selectedCount: [{ type: t.Input }],
      selectedMessage: [{ type: t.Input }],
      page: [{ type: t.Output }]
    });
  var ge = (function () {
    function e() {
      (this.change = new t.EventEmitter()), (this._count = 0), (this._page = 1), (this._size = 0);
    }
    return (
      Object.defineProperty(e.prototype, 'size', {
        get: function () {
          return this._size;
        },
        set: function (e) {
          (this._size = e), (this.pages = this.calcPages());
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(e.prototype, 'count', {
        get: function () {
          return this._count;
        },
        set: function (e) {
          (this._count = e), (this.pages = this.calcPages());
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(e.prototype, 'page', {
        get: function () {
          return this._page;
        },
        set: function (e) {
          (this._page = e), (this.pages = this.calcPages());
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(e.prototype, 'totalPages', {
        get: function () {
          var e = this.size < 1 ? 1 : Math.ceil(this.count / this.size);
          return Math.max(e || 0, 1);
        },
        enumerable: !1,
        configurable: !0
      }),
      (e.prototype.canPrevious = function () {
        return this.page > 1;
      }),
      (e.prototype.canNext = function () {
        return this.page < this.totalPages;
      }),
      (e.prototype.prevPage = function () {
        this.selectPage(this.page - 1);
      }),
      (e.prototype.nextPage = function () {
        this.selectPage(this.page + 1);
      }),
      (e.prototype.selectPage = function (e) {
        e > 0 && e <= this.totalPages && e !== this.page && ((this.page = e), this.change.emit({ page: e }));
      }),
      (e.prototype.calcPages = function (e) {
        var t = [],
          n = 1,
          o = this.totalPages,
          r = 5 < this.totalPages;
        (e = e || this.page),
          r &&
            ((n = e - Math.floor(2.5)),
            (o = e + Math.floor(2.5)),
            n < 1
              ? ((n = 1), (o = Math.min(n + 5 - 1, this.totalPages)))
              : o > this.totalPages && ((n = Math.max(this.totalPages - 5 + 1, 1)), (o = this.totalPages)));
        for (var i = n; i <= o; i++) t.push({ number: i, text: i });
        return t;
      }),
      e
    );
  })();
  (ge.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-pager',
          template:
            '\n    <ul class="pager">\n      <li [class.disabled]="!canPrevious()">\n        <a role="button" aria-label="go to first page" href="javascript:void(0)" (click)="selectPage(1)">\n          <i class="{{ pagerPreviousIcon }}"></i>\n        </a>\n      </li>\n      <li [class.disabled]="!canPrevious()">\n        <a role="button" aria-label="go to previous page" href="javascript:void(0)" (click)="prevPage()">\n          <i class="{{ pagerLeftArrowIcon }}"></i>\n        </a>\n      </li>\n      <li\n        role="button"\n        [attr.aria-label]="\'page \' + pg.number"\n        class="pages"\n        *ngFor="let pg of pages"\n        [class.active]="pg.number === page"\n      >\n        <a href="javascript:void(0)" (click)="selectPage(pg.number)">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]="!canNext()">\n        <a role="button" aria-label="go to next page" href="javascript:void(0)" (click)="nextPage()">\n          <i class="{{ pagerRightArrowIcon }}"></i>\n        </a>\n      </li>\n      <li [class.disabled]="!canNext()">\n        <a role="button" aria-label="go to last page" href="javascript:void(0)" (click)="selectPage(totalPages)">\n          <i class="{{ pagerNextIcon }}"></i>\n        </a>\n      </li>\n    </ul>\n  ',
          host: { class: 'datatable-pager' },
          changeDetection: t.ChangeDetectionStrategy.OnPush
        }
      ]
    }
  ]),
    (ge.propDecorators = {
      pagerLeftArrowIcon: [{ type: t.Input }],
      pagerRightArrowIcon: [{ type: t.Input }],
      pagerPreviousIcon: [{ type: t.Input }],
      pagerNextIcon: [{ type: t.Input }],
      size: [{ type: t.Input }],
      count: [{ type: t.Input }],
      page: [{ type: t.Input }],
      change: [{ type: t.Output }]
    });
  var fe,
    ye = function () {};
  (ye.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-progress',
          template:
            '\n    <div class="progress-linear" role="progressbar">\n      <div class="container">\n        <div class="bar"></div>\n      </div>\n    </div>\n  ',
          changeDetection: t.ChangeDetectionStrategy.OnPush
        }
      ]
    }
  ]),
    ((fe = e.Keys || (e.Keys = {}))[(fe.up = 38)] = 'up'),
    (fe[(fe.down = 40)] = 'down'),
    (fe[(fe.return = 13)] = 'return'),
    (fe[(fe.escape = 27)] = 'escape'),
    (fe[(fe.left = 37)] = 'left'),
    (fe[(fe.right = 39)] = 'right');
  var me = (function () {
    function n(e, n, o, r) {
      (this.differs = e),
        (this.scrollbarHelper = n),
        (this.cd = o),
        (this.treeStatus = 'collapsed'),
        (this.activate = new t.EventEmitter()),
        (this.treeAction = new t.EventEmitter()),
        (this._groupStyles = { left: {}, center: {}, right: {} }),
        (this._element = r.nativeElement),
        (this._rowDiffer = e.find({}).create());
    }
    return (
      Object.defineProperty(n.prototype, 'columns', {
        get: function () {
          return this._columns;
        },
        set: function (e) {
          (this._columns = e), this.recalculateColumns(e), this.buildStylesByGroup();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'innerWidth', {
        get: function () {
          return this._innerWidth;
        },
        set: function (e) {
          if (this._columns) {
            var t = z(this._columns);
            this._columnGroupWidths = M(t, this._columns);
          }
          (this._innerWidth = e), this.recalculateColumns(), this.buildStylesByGroup();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'offsetX', {
        get: function () {
          return this._offsetX;
        },
        set: function (e) {
          (this._offsetX = e), this.buildStylesByGroup();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'cssClass', {
        get: function () {
          var e,
            t,
            n = 'datatable-body-row';
          if (
            (this.isSelected && (n += ' active'),
            this.rowIndex % 2 != 0 && (n += ' datatable-row-odd'),
            this.rowIndex % 2 == 0 && (n += ' datatable-row-even'),
            this.rowClass)
          ) {
            var o = this.rowClass(this.row);
            if ('string' == typeof o) n += ' ' + o;
            else if ('object' == typeof o) {
              var r = Object.keys(o);
              try {
                for (var i = I(r), a = i.next(); !a.done; a = i.next()) {
                  var s = a.value;
                  !0 === o[s] && (n += ' ' + s);
                }
              } catch (t) {
                e = { error: t };
              } finally {
                try {
                  a && !a.done && (t = i.return) && t.call(i);
                } finally {
                  if (e) throw e.error;
                }
              }
            }
          }
          return n;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'columnsTotalWidths', {
        get: function () {
          return this._columnGroupWidths.total;
        },
        enumerable: !1,
        configurable: !0
      }),
      (n.prototype.ngDoCheck = function () {
        this._rowDiffer.diff(this.row) && this.cd.markForCheck();
      }),
      (n.prototype.trackByGroups = function (e, t) {
        return t.type;
      }),
      (n.prototype.columnTrackingFn = function (e, t) {
        return t.$$id;
      }),
      (n.prototype.buildStylesByGroup = function () {
        (this._groupStyles.left = this.calcStylesByGroup('left')),
          (this._groupStyles.center = this.calcStylesByGroup('center')),
          (this._groupStyles.right = this.calcStylesByGroup('right')),
          this.cd.markForCheck();
      }),
      (n.prototype.calcStylesByGroup = function (e) {
        var t = this._columnGroupWidths,
          n = this.offsetX,
          o = { width: t[e] + 'px' };
        if ((this.row && this.row.detail && 'left' === e && (o.width = '100%'), 'left' === e)) Z(o, n, 0);
        else if ('right' === e) {
          var r = parseInt(this.innerWidth + '', 0);
          Z(o, -1 * (t.total - r - n + this.scrollbarHelper.width), 0);
        }
        return o;
      }),
      (n.prototype.onActivate = function (e, t) {
        (e.cellIndex = t), (e.rowElement = this._element), this.activate.emit(e);
      }),
      (n.prototype.onKeyDown = function (t) {
        var n = t.keyCode,
          o = t.target === this._element;
        (n === e.Keys.return || n === e.Keys.down || n === e.Keys.up || n === e.Keys.left || n === e.Keys.right) &&
          o &&
          (t.preventDefault(),
          t.stopPropagation(),
          this.activate.emit({ type: 'keydown', event: t, row: this.row, rowElement: this._element }));
      }),
      (n.prototype.onMouseenter = function (e) {
        this.activate.emit({ type: 'mouseenter', event: e, row: this.row, rowElement: this._element });
      }),
      (n.prototype.recalculateColumns = function (e) {
        void 0 === e && (e = this.columns), (this._columns = e);
        var t = z(this._columns);
        (this._columnsByPin = B(this._columns)), (this._columnGroupWidths = M(t, this._columns));
      }),
      (n.prototype.onTreeAction = function () {
        this.treeAction.emit();
      }),
      n
    );
  })();
  (me.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-body-row',
          changeDetection: t.ChangeDetectionStrategy.OnPush,
          template:
            '\n    <div\n      *ngFor="let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups"\n      class="datatable-row-{{ colGroup.type }} datatable-row-group"\n      [ngStyle]="_groupStyles[colGroup.type]"\n    >\n      <datatable-body-cell\n        role="cell"\n        *ngFor="let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn"\n        tabindex="-1"\n        [row]="row"\n        [group]="group"\n        [rowDetail]="rowDetail"\n        [expanded]="expanded"\n        [isSelected]="isSelected"\n        [rowIndex]="rowIndex"\n        [column]="column"\n        [rowHeight]="rowHeight"\n        [displayCheck]="displayCheck"\n        [treeStatus]="treeStatus"\n        (activate)="onActivate($event, ii)"\n        (treeAction)="onTreeAction()"\n      >\n      </datatable-body-cell>\n    </div>\n  '
        }
      ]
    }
  ]),
    (me.ctorParameters = function () {
      return [
        { type: t.KeyValueDiffers },
        { type: y, decorators: [{ type: t.SkipSelf }] },
        { type: t.ChangeDetectorRef },
        { type: t.ElementRef }
      ];
    }),
    (me.propDecorators = {
      columns: [{ type: t.Input }],
      innerWidth: [{ type: t.Input }],
      expanded: [{ type: t.Input }],
      rowClass: [{ type: t.Input }],
      row: [{ type: t.Input }],
      group: [{ type: t.Input }],
      isSelected: [{ type: t.Input }],
      rowIndex: [{ type: t.Input }],
      displayCheck: [{ type: t.Input }],
      treeStatus: [{ type: t.Input }],
      rowDetail: [{ type: t.Input }],
      offsetX: [{ type: t.Input }],
      cssClass: [{ type: t.HostBinding, args: ['class'] }],
      rowHeight: [{ type: t.HostBinding, args: ['style.height.px'] }, { type: t.Input }],
      columnsTotalWidths: [{ type: t.HostBinding, args: ['style.width.px'] }],
      activate: [{ type: t.Output }],
      treeAction: [{ type: t.Output }],
      onKeyDown: [{ type: t.HostListener, args: ['keydown', ['$event']] }],
      onMouseenter: [{ type: t.HostListener, args: ['mouseenter', ['$event']] }]
    });
  var be = (function () {
    function e(e, n) {
      (this.cd = e),
        (this.differs = n),
        (this.rowContextmenu = new t.EventEmitter(!1)),
        (this._expanded = !1),
        (this.groupContext = { group: this.row, expanded: this.expanded, rowIndex: this.rowIndex }),
        (this.rowContext = { row: this.row, expanded: this.expanded, rowIndex: this.rowIndex }),
        (this.rowDiffer = n.find({}).create());
    }
    return (
      Object.defineProperty(e.prototype, 'rowIndex', {
        get: function () {
          return this._rowIndex;
        },
        set: function (e) {
          (this._rowIndex = e),
            (this.rowContext.rowIndex = e),
            (this.groupContext.rowIndex = e),
            this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(e.prototype, 'expanded', {
        get: function () {
          return this._expanded;
        },
        set: function (e) {
          (this._expanded = e),
            (this.groupContext.expanded = e),
            (this.rowContext.expanded = e),
            this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      (e.prototype.ngDoCheck = function () {
        this.rowDiffer.diff(this.row) &&
          ((this.rowContext.row = this.row), (this.groupContext.group = this.row), this.cd.markForCheck());
      }),
      (e.prototype.onContextmenu = function (e) {
        this.rowContextmenu.emit({ event: e, row: this.row });
      }),
      (e.prototype.getGroupHeaderStyle = function () {
        var e = {};
        return (
          (e.transform = 'translate3d(' + this.offsetX + 'px, 0px, 0px)'),
          (e['backface-visibility'] = 'hidden'),
          (e.width = this.innerWidth),
          e
        );
      }),
      e
    );
  })();
  (be.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-row-wrapper',
          changeDetection: t.ChangeDetectionStrategy.OnPush,
          template:
            '\n    <div *ngIf="groupHeader && groupHeader.template" class="datatable-group-header" [ngStyle]="getGroupHeaderStyle()">\n      <ng-template\n        *ngIf="groupHeader && groupHeader.template"\n        [ngTemplateOutlet]="groupHeader.template"\n        [ngTemplateOutletContext]="groupContext"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf="(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template">\n    </ng-content>\n    <div\n      *ngIf="rowDetail && rowDetail.template && expanded"\n      [style.height.px]="detailRowHeight"\n      class="datatable-row-detail"\n    >\n      <ng-template\n        *ngIf="rowDetail && rowDetail.template"\n        [ngTemplateOutlet]="rowDetail.template"\n        [ngTemplateOutletContext]="rowContext"\n      >\n      </ng-template>\n    </div>\n  ',
          host: { class: 'datatable-row-wrapper' }
        }
      ]
    }
  ]),
    (be.ctorParameters = function () {
      return [{ type: t.ChangeDetectorRef }, { type: t.KeyValueDiffers }];
    }),
    (be.propDecorators = {
      innerWidth: [{ type: t.Input }],
      rowDetail: [{ type: t.Input }],
      groupHeader: [{ type: t.Input }],
      offsetX: [{ type: t.Input }],
      detailRowHeight: [{ type: t.Input }],
      row: [{ type: t.Input }],
      groupedRows: [{ type: t.Input }],
      rowContextmenu: [{ type: t.Output }],
      rowIndex: [{ type: t.Input }],
      expanded: [{ type: t.Input }],
      onContextmenu: [{ type: t.HostListener, args: ['contextmenu', ['$event']] }]
    });
  var ve = function (e) {
    this.template = e;
  };
  (ve.decorators = [{ type: t.Directive, args: [{ selector: '[ngx-datatable-row-detail-template]' }] }]),
    (ve.ctorParameters = function () {
      return [{ type: t.TemplateRef }];
    });
  var we = (function () {
    function e() {
      (this.rowHeight = 0), (this.toggle = new t.EventEmitter());
    }
    return (
      Object.defineProperty(e.prototype, 'template', {
        get: function () {
          return this._templateInput || this._templateQuery;
        },
        enumerable: !1,
        configurable: !0
      }),
      (e.prototype.toggleExpandRow = function (e) {
        this.toggle.emit({ type: 'row', value: e });
      }),
      (e.prototype.expandAllRows = function () {
        this.toggle.emit({ type: 'all', value: !0 });
      }),
      (e.prototype.collapseAllRows = function () {
        this.toggle.emit({ type: 'all', value: !1 });
      }),
      e
    );
  })();
  (we.decorators = [{ type: t.Directive, args: [{ selector: 'ngx-datatable-row-detail' }] }]),
    (we.propDecorators = {
      rowHeight: [{ type: t.Input }],
      _templateInput: [{ type: t.Input, args: ['template'] }],
      _templateQuery: [{ type: t.ContentChild, args: [ve, { read: t.TemplateRef, static: !0 }] }],
      toggle: [{ type: t.Output }]
    });
  var xe = function (e) {
    this.template = e;
  };
  (xe.decorators = [{ type: t.Directive, args: [{ selector: '[ngx-datatable-group-header-template]' }] }]),
    (xe.ctorParameters = function () {
      return [{ type: t.TemplateRef }];
    });
  var Ce = (function () {
    function e() {
      (this.rowHeight = 0), (this.toggle = new t.EventEmitter());
    }
    return (
      Object.defineProperty(e.prototype, 'template', {
        get: function () {
          return this._templateInput || this._templateQuery;
        },
        enumerable: !1,
        configurable: !0
      }),
      (e.prototype.toggleExpandGroup = function (e) {
        this.toggle.emit({ type: 'group', value: e });
      }),
      (e.prototype.expandAllGroups = function () {
        this.toggle.emit({ type: 'all', value: !0 });
      }),
      (e.prototype.collapseAllGroups = function () {
        this.toggle.emit({ type: 'all', value: !1 });
      }),
      e
    );
  })();
  (Ce.decorators = [{ type: t.Directive, args: [{ selector: 'ngx-datatable-group-header' }] }]),
    (Ce.propDecorators = {
      rowHeight: [{ type: t.Input }],
      _templateInput: [{ type: t.Input, args: ['template'] }],
      _templateQuery: [{ type: t.ContentChild, args: [xe, { read: t.TemplateRef, static: !0 }] }],
      toggle: [{ type: t.Output }]
    });
  var Ie = (function () {
    function n(e, n, o) {
      (this.cd = n),
        (this.sanitizer = o),
        (this.activate = new t.EventEmitter()),
        (this.treeAction = new t.EventEmitter()),
        (this._isEditable = {}),
        (this.isFocused = !1),
        (this.onCheckboxChangeFn = this.onCheckboxChange.bind(this)),
        (this.activateFn = this.activate.emit.bind(this.activate)),
        (this.cellContext = {
          onCheckboxChangeFn: this.onCheckboxChangeFn,
          activateFn: this.activateFn,
          row: this.row,
          group: this.group,
          value: this.value,
          column: this.column,
          rowHeight: this.rowHeight,
          isSelected: this.isSelected,
          rowIndex: this.rowIndex,
          treeStatus: this.treeStatus,
          onTreeAction: this.onTreeAction.bind(this)
        }),
        (this._element = e.nativeElement);
    }
    return (
      Object.defineProperty(n.prototype, 'rowDetail', {
        get: function () {
          return this._rowDetail;
        },
        set: function (e) {
          this._rowDetail = e;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'group', {
        get: function () {
          return this._group;
        },
        set: function (e) {
          (this._group = e), (this.cellContext.group = e), this.checkValueUpdates(), this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'rowHeight', {
        get: function () {
          return this._rowHeight;
        },
        set: function (e) {
          (this._rowHeight = e), (this.cellContext.rowHeight = e), this.checkValueUpdates(), this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isSelected', {
        get: function () {
          return this._isSelected;
        },
        set: function (e) {
          (this._isSelected = e), (this.cellContext.isSelected = e), this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'expanded', {
        get: function () {
          return this._expanded;
        },
        set: function (e) {
          (this._expanded = e), (this.cellContext.expanded = e), this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'rowIndex', {
        get: function () {
          return this._rowIndex;
        },
        set: function (e) {
          (this._rowIndex = e), (this.cellContext.rowIndex = e), this.checkValueUpdates(), this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'column', {
        get: function () {
          return this._column;
        },
        set: function (e) {
          (this._column = e), (this.cellContext.column = e), this.checkValueUpdates(), this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'row', {
        get: function () {
          return this._row;
        },
        set: function (e) {
          (this._row = e), (this.cellContext.row = e), this.checkValueUpdates(), this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'sorts', {
        get: function () {
          return this._sorts;
        },
        set: function (e) {
          (this._sorts = e), (this.calcSortDir = this.calcSortDir(e));
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'treeStatus', {
        get: function () {
          return this._treeStatus;
        },
        set: function (e) {
          (this._treeStatus =
            'collapsed' !== e && 'expanded' !== e && 'loading' !== e && 'disabled' !== e ? 'collapsed' : e),
            (this.cellContext.treeStatus = this._treeStatus),
            this.checkValueUpdates(),
            this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'columnCssClasses', {
        get: function () {
          var t,
            n,
            o = 'datatable-body-cell';
          if (this.column.cellClass)
            if ('string' == typeof this.column.cellClass) o += ' ' + this.column.cellClass;
            else if ('function' == typeof this.column.cellClass) {
              var r = this.column.cellClass({
                row: this.row,
                group: this.group,
                column: this.column,
                value: this.value,
                rowHeight: this.rowHeight
              });
              if ('string' == typeof r) o += ' ' + r;
              else if ('object' == typeof r) {
                var i = Object.keys(r);
                try {
                  for (var a = I(i), s = a.next(); !s.done; s = a.next()) {
                    var l = s.value;
                    !0 === r[l] && (o += ' ' + l);
                  }
                } catch (e) {
                  t = { error: e };
                } finally {
                  try {
                    s && !s.done && (n = a.return) && n.call(a);
                  } finally {
                    if (t) throw t.error;
                  }
                }
              }
            }
          return (
            this.sortDir || (o += ' sort-active'),
            this.isFocused && !this.column.icons && (o += ' active'),
            this.sortDir === e.SortDirection.asc && (o += ' sort-asc'),
            this.sortDir === e.SortDirection.desc && (o += ' sort-desc'),
            o
          );
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'width', {
        get: function () {
          return this.column.width;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'minWidth', {
        get: function () {
          return this.column.minWidth;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'maxWidth', {
        get: function () {
          return this.column.maxWidth;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'height', {
        get: function () {
          var e = this.rowHeight;
          return isNaN(e) ? e : e + 'px';
        },
        enumerable: !1,
        configurable: !0
      }),
      (n.prototype.ngDoCheck = function () {
        this.checkValueUpdates();
      }),
      (n.prototype.ngOnDestroy = function () {
        this.cellTemplate && this.cellTemplate.clear();
      }),
      (n.prototype.checkValueUpdates = function () {
        var e = '';
        if (this.row && this.column) {
          var t = this.column.$$valueGetter(this.row, this.column.prop),
            n = this.column.pipe;
          n ? (e = n.transform(t)) : void 0 !== e && (e = t);
        } else e = '';
        this.value !== e &&
          ((this.value = e),
          (this.cellContext.value = e),
          (this.sanitizedValue = null != e ? this.stripHtml(e) : e),
          this.cd.markForCheck());
      }),
      (n.prototype.onFocus = function () {
        this.isFocused = !0;
      }),
      (n.prototype.onBlur = function () {
        this.isFocused = !1;
      }),
      (n.prototype.onClick = function (e) {
        this.activate.emit({
          type: 'click',
          event: e,
          row: this.row,
          group: this.group,
          rowHeight: this.rowHeight,
          column: this.column,
          value: this.value,
          cellElement: this._element
        });
      }),
      (n.prototype.middleclickEvent = function (e) {
        2 === e.which &&
          this.activate.emit({
            type: 'middleclick',
            event: e,
            row: this.row,
            group: this.group,
            rowHeight: this.rowHeight,
            column: this.column,
            value: this.value,
            cellElement: this._element
          });
      }),
      (n.prototype.onDblClick = function (e) {
        this.activate.emit({
          type: 'dblclick',
          event: e,
          row: this.row,
          group: this.group,
          rowHeight: this.rowHeight,
          column: this.column,
          value: this.value,
          cellElement: this._element
        });
      }),
      (n.prototype.onKeyDown = function (t) {
        var n = t.keyCode,
          o = t.target === this._element;
        (n === e.Keys.return || n === e.Keys.down || n === e.Keys.up || n === e.Keys.left || n === e.Keys.right) &&
          o &&
          (t.preventDefault(),
          t.stopPropagation(),
          this.activate.emit({
            type: 'keydown',
            event: t,
            row: this.row,
            group: this.group,
            rowHeight: this.rowHeight,
            column: this.column,
            value: this.value,
            cellElement: this._element
          }));
      }),
      (n.prototype.onCheckboxChange = function (e) {
        this.activate.emit({
          type: 'checkbox',
          event: e,
          row: this.row,
          group: this.group,
          rowHeight: this.rowHeight,
          column: this.column,
          value: this.value,
          cellElement: this._element,
          treeStatus: 'collapsed'
        });
      }),
      (n.prototype.calcSortDir = function (e) {
        var t = this;
        if (e) {
          var n = e.find(function (e) {
            return e.prop === t.column.prop;
          });
          return n ? n.dir : void 0;
        }
      }),
      (n.prototype.stripHtml = function (e) {
        return e.replace ? e.replace(/<\/?[^>]+(>|$)/g, '') : e;
      }),
      (n.prototype.onTreeAction = function () {
        this.treeAction.emit(this.row);
      }),
      (n.prototype.calcLeftMargin = function (e, t) {
        var n = null != e.treeLevelIndent ? e.treeLevelIndent : 50;
        return e.isTreeColumn ? t.level * n : 0;
      }),
      (n.prototype.hasToShowToolTip = function (e, t) {
        return e && t && t.tooltip && t.tooltip.length > 0 && !!this.getTooltipValue(null, e, t);
      }),
      (n.prototype.getTooltipValue = function (e, t, n) {
        return t && n && n.tooltip && n.tooltip.length > 0 ? t['' + n.tooltip] || (!n.canHideTooltip && n.tooltip) : e;
      }),
      (n.prototype.getIcons = function (e, t) {
        if (e && t) {
          var n = t.split('.');
          return n.length > 1 && e[n[0]] ? e[n[0]][n[1]] : e[t];
        }
        return null;
      }),
      (n.prototype.selectFieldValue = function (e, t) {
        if (e && t) {
          var n = t.split('.');
          return n.length > 1 && e[n[0]] ? e[n[0]][n[1]] : e[t];
        }
        return ' ';
      }),
      (n.prototype.onClickRowActionButton = function (e, t, n) {
        t && n && (e.preventDefault(), e.stopPropagation(), t.action(n));
      }),
      (n.prototype.sanatizeHtml = function (e) {
        return this.sanitizer.bypassSecurityTrustHtml(e);
      }),
      (n.prototype.isEditable = function (e, t) {
        return e && t
          ? (this._isEditable[e.prop + t.id] || (this._isEditable[e.prop + t.id] = e.editable(t)),
            this._isEditable[e.prop + t.id])
          : s.of(!1);
      }),
      (n.prototype.updateSelect = function (e, t, n) {
        t[e.prop] !== n && ((t[e.prop] = n), e.onEdit && e.onEdit(t));
      }),
      (n.prototype.editField = function (e, t, n) {
        var o;
        e.onEdit(Object.assign(Object.assign({}, t), (((o = {})[e.prop] = n), o)));
      }),
      (n.prototype.toggleExpandRow = function (e, t) {
        t.preventDefault(), t.stopPropagation(), this.rowDetail && this.rowDetail.toggleExpandRow(e);
      }),
      (n.prototype.onClickField = function (e, t, n) {
        e && t && (n.preventDefault(), n.stopPropagation(), t(e));
      }),
      n
    );
  })();
  function Te(e, t, n) {
    var o = n(t, e);
    return o > -1 ? e.splice(o, 1) : e.push(t), e;
  }
  function Se(e, t, n, o, r) {
    for (var i = n < o, a = 0; a < t.length; a++) {
      var s = t[a],
        l = { start: 0, end: 0 };
      (l = i ? { start: n, end: o } : { start: o, end: n + 1 }),
        ((i && a <= o && a >= n) || (!i && a >= o && a <= n)) && a >= l.start && a <= l.end && e.push(s);
    }
    return e;
  }
  (Ie.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-body-cell',
          changeDetection: t.ChangeDetectionStrategy.OnPush,
          template:
            '\n    <div\n      class="datatable-body-cell-label"\n      style="display: flex; align-items:center; height: 100%;"\n      [style.margin-left.px]="calcLeftMargin(column, row)"\n    >\n      <a\n        *ngIf="column?.prop === \'ice-expandable\' && row?.detail?.length > 0"\n        href="javascript:void(0)"\n        [class.datatable-icon-down]="!expanded"\n        [class.datatable-icon-up]="expanded"\n        style="font-size: 18px; display: flex; align-items: center;"\n        title="Expand/Collapse Row"\n        (dblclick)="toggleExpandRow(row, $event)"\n        (click)="toggleExpandRow(row, $event)"\n      >\n      </a>\n      <ng-container *ngIf="column?.prop !== \'ice-expandable\'">\n        <label\n          *ngIf="column.checkboxable && (!displayCheck || displayCheck(row, column, value))"\n          class="datatable-checkbox"\n        >\n          <input type="checkbox" [checked]="isSelected" (click)="onCheckboxChange($event)" />\n        </label>\n        <ng-container *ngIf="column.isTreeColumn">\n          <button\n            *ngIf="!column.treeToggleTemplate"\n            class="datatable-tree-button"\n            [disabled]="treeStatus === \'disabled\'"\n            (click)="onTreeAction()"\n          >\n            <span>\n              <i *ngIf="treeStatus === \'loading\'" class="icon datatable-icon-collapse"></i>\n              <i *ngIf="treeStatus === \'collapsed\'" class="icon datatable-icon-up"></i>\n              <i *ngIf="treeStatus === \'expanded\' || treeStatus === \'disabled\'" class="icon datatable-icon-down"></i>\n            </span>\n          </button>\n          <ng-template\n            *ngIf="column.treeToggleTemplate"\n            [ngTemplateOutlet]="column.treeToggleTemplate"\n            [ngTemplateOutletContext]="{ cellContext: cellContext }"\n          >\n          </ng-template>\n        </ng-container>\n\n        <div\n          *ngIf="column.icons && getIcons(row, column.icons)"\n          style="display: flex; flex-direction: column; margin-right: 10px;"\n        >\n          <mat-icon\n            *ngFor="let i of getIcons(row, column.icons)"\n            [innerHTML]="i.icon"\n            [matTooltip]="i.text"\n            (click)="\n              !!i.onClickAction\n                ? onClickField(row, column.onClickAction || column.action, $event)\n                : i.action && i.action(row)\n            "\n            [style.cursor]="i.action ? \'pointer\' : \'auto\'"\n            class="{{ i.class }} mat-icon material-icons ice-ml-10"\n          ></mat-icon>\n        </div>\n\n        <mat-icon\n          *ngIf="\n            column.iconCustomTooltipHtmlText &&\n            column.prop &&\n            selectFieldValue(row, column.iconCustomTooltipHtmlText) as customHtml\n          "\n          iceCustomHtmlToolTip\n          [iceTooltipHtmlText]="sanatizeHtml(customHtml)"\n          [duration]="1500"\n          class="material-icons"\n          [ngClass]="column.prop && selectFieldValue(row, column.iconColor)"\n          >priority_high</mat-icon\n        >\n\n        <mat-icon\n          *ngIf="column.prop && row[column.prop.toString() + \'InfoTooltip\']"\n          [matTooltip]="column.prop && row[column.prop.toString() + \'InfoTooltip\']"\n          class="mat-icon material-icons"\n          >info</mat-icon\n        >\n\n        <mat-icon\n          *ngIf="column.prop && row[column.prop.toString() + \'Excluded\']"\n          [matTooltip]="column.prop && row[column.prop.toString() + \'Excluded\']"\n          class="mat-icon material-icons"\n          >block</mat-icon\n        >\n\n        <span\n          *ngIf="\n            !column.actionButtonIcon &&\n            !column.hideTextProperty &&\n            !column.cellTemplate &&\n            (!column.selectOptions || (column.hideIfEmpty && column.hideIfEmpty(row))) &&\n            (!column.editable || !(isEditable(column, row) | async))\n          "\n          class="ice-data-table-row"\n          iceCustomHtmlToolTip\n          [iceTooltipHtmlText]="getTooltipValue(value, row, column)"\n          [duration]="column.tooltipDuration"\n          [showToolTipOnTextOverflow]="true"\n          [showToolTip]="hasToShowToolTip(row, column)"\n          [innerHTML]="value"\n          (click)="onClickField(row, column.onClickAction || column.action, $event)"\n        ></span>\n\n        <button\n          *ngIf="column.actionButtonIcon && !(column.hideActionButton && column.hideActionButton(row) | async)"\n          mat-icon-button\n          [matTooltip]="column.actionButtonTooltip"\n          (click)="onClickRowActionButton($event, column, row)"\n        >\n          <mat-icon class="mat-icon material-icons">{{ column.actionButtonIcon }}</mat-icon>\n        </button>\n\n        <ice-datatable-row-select\n          style="width:100%;"\n          [ngClass]="column.cellClass"\n          (update)="updateSelect(column, row, $event)"\n          [options]="column.selectOptions(row)"\n          [value]="value"\n          [defaultValue]="column.defaultValue"\n          [selectDisabled]="column.disabled"\n          *ngIf="column.selectOptions && !(column.hideIfEmpty && column.hideIfEmpty(row))"\n        ></ice-datatable-row-select>\n\n        <ng-container *ngIf="!column.selectOptions && (column.editable && isEditable(column, row) | async)">\n          <mat-icon class="mat-icon material-icons" *ngIf="!column.hideEditIcon">edit</mat-icon>\n          <ice-editable-text\n            [ngClass]="column.cellClass"\n            (update)="editField(column, row, $event)"\n            [errorText]="selectFieldValue(row, column.errorMessageField)"\n            [value]="value"\n          >\n            {{ value }}\n          </ice-editable-text>\n        </ng-container>\n\n        <ng-template\n          #cellTemplate\n          *ngIf="column.cellTemplate"\n          [ngTemplateOutlet]="column.cellTemplate"\n          [ngTemplateOutletContext]="cellContext"\n        >\n        </ng-template>\n      </ng-container>\n    </div>\n  '
        }
      ]
    }
  ]),
    (Ie.ctorParameters = function () {
      return [{ type: t.ElementRef }, { type: t.ChangeDetectorRef }, { type: u.DomSanitizer }];
    }),
    (Ie.propDecorators = {
      displayCheck: [{ type: t.Input }],
      rowDetail: [{ type: t.Input }],
      group: [{ type: t.Input }],
      rowHeight: [{ type: t.Input }],
      isSelected: [{ type: t.Input }],
      expanded: [{ type: t.Input }],
      rowIndex: [{ type: t.Input }],
      column: [{ type: t.Input }],
      row: [{ type: t.Input }],
      sorts: [{ type: t.Input }],
      treeStatus: [{ type: t.Input }],
      activate: [{ type: t.Output }],
      treeAction: [{ type: t.Output }],
      cellTemplate: [{ type: t.ViewChild, args: ['cellTemplate', { read: t.ViewContainerRef, static: !0 }] }],
      columnCssClasses: [{ type: t.HostBinding, args: ['class'] }],
      width: [{ type: t.HostBinding, args: ['style.width.px'] }],
      minWidth: [{ type: t.HostBinding, args: ['style.minWidth.px'] }],
      maxWidth: [{ type: t.HostBinding, args: ['style.maxWidth.px'] }],
      height: [{ type: t.HostBinding, args: ['style.height'] }],
      onFocus: [{ type: t.HostListener, args: ['focus'] }],
      onBlur: [{ type: t.HostListener, args: ['blur'] }],
      onClick: [{ type: t.HostListener, args: ['click', ['$event']] }],
      middleclickEvent: [{ type: t.HostListener, args: ['mouseup', ['$event']] }],
      onDblClick: [{ type: t.HostListener, args: ['dblclick', ['$event']] }],
      onKeyDown: [{ type: t.HostListener, args: ['keydown', ['$event']] }]
    });
  var Ee = (function () {
    function n() {
      (this.activate = new t.EventEmitter()), (this.select = new t.EventEmitter());
    }
    return (
      (n.prototype.selectRow = function (t, n, o) {
        var r;
        if (this.selectEnabled) {
          var i = this.selectionType === e.SelectionType.checkbox,
            a = this.selectionType === e.SelectionType.multi,
            s = this.selectionType === e.SelectionType.multiClick,
            l = [];
          (l =
            a || i || s
              ? t.shiftKey
                ? Se([], this.rows, n, this.prevIndex, this.getRowSelectedIdx.bind(this))
                : t.ctrlKey || t.metaKey || s || i
                ? Te(S(this.selected), o, this.getRowSelectedIdx.bind(this))
                : Te([], o, this.getRowSelectedIdx.bind(this))
              : Te([], o, this.getRowSelectedIdx.bind(this))),
            'function' == typeof this.selectCheck && (l = l.filter(this.selectCheck.bind(this))),
            this.selected.splice(0, this.selected.length),
            (r = this.selected).push.apply(r, S(l)),
            (this.prevIndex = n),
            this.select.emit({ selected: l });
        }
      }),
      (n.prototype.onActivate = function (t, n) {
        var o = t.type,
          r = t.event,
          i = t.row,
          a = this.selectionType === e.SelectionType.checkbox;
        (!a && ('click' === o || 'dblclick' === o)) || (a && 'checkbox' === o)
          ? this.selectRow(r, n, i)
          : 'keydown' === o && (r.keyCode === e.Keys.return ? this.selectRow(r, n, i) : this.onKeyboardFocus(t)),
          this.activate.emit(t);
      }),
      (n.prototype.onKeyboardFocus = function (t) {
        var n = t.event.keyCode;
        if (n === e.Keys.up || n === e.Keys.down || n === e.Keys.right || n === e.Keys.left) {
          var o = this.selectionType === e.SelectionType.cell;
          t.cellElement && o
            ? o && this.focusCell(t.cellElement, t.rowElement, n, t.cellIndex)
            : this.focusRow(t.rowElement, n);
        }
      }),
      (n.prototype.focusRow = function (e, t) {
        var n = this.getPrevNextRow(e, t);
        n && n.focus();
      }),
      (n.prototype.getPrevNextRow = function (t, n) {
        var o = t.parentElement;
        if (o) {
          var r = void 0;
          if (
            (n === e.Keys.up ? (r = o.previousElementSibling) : n === e.Keys.down && (r = o.nextElementSibling),
            r && r.children.length)
          )
            return r.children[0];
        }
      }),
      (n.prototype.focusCell = function (t, n, o, r) {
        var i;
        if (o === e.Keys.left) i = t.previousElementSibling;
        else if (o === e.Keys.right) i = t.nextElementSibling;
        else if (o === e.Keys.up || o === e.Keys.down) {
          var a = this.getPrevNextRow(n, o);
          if (a) {
            var s = a.getElementsByClassName('datatable-body-cell');
            s.length && (i = s[r]);
          }
        }
        i && i.focus();
      }),
      (n.prototype.getRowSelected = function (e) {
        return this.getRowSelectedIdx(e, this.selected) > -1;
      }),
      (n.prototype.getRowSelectedIdx = function (e, t) {
        var n = this;
        if (!t || !t.length) return -1;
        var o = this.rowIdentity(e);
        return t.findIndex(function (e) {
          return n.rowIdentity(e) === o;
        });
      }),
      n
    );
  })();
  (Ee.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-selection',
          template: ' <ng-content></ng-content> ',
          changeDetection: t.ChangeDetectionStrategy.OnPush
        }
      ]
    }
  ]),
    (Ee.propDecorators = {
      rows: [{ type: t.Input }],
      selected: [{ type: t.Input }],
      selectEnabled: [{ type: t.Input }],
      selectionType: [{ type: t.Input }],
      rowIdentity: [{ type: t.Input }],
      selectCheck: [{ type: t.Input }],
      activate: [{ type: t.Output }],
      select: [{ type: t.Output }]
    });
  var Pe = (function () {
    function e() {}
    return (
      Object.defineProperty(e.prototype, 'template', {
        get: function () {
          return this._templateInput || this._templateQuery;
        },
        enumerable: !1,
        configurable: !0
      }),
      e
    );
  })();
  function Re(e) {
    var t = e.filter(function (e) {
      return !!e;
    });
    return t.length
      ? t.some(function (e) {
          return 'number' != typeof e;
        })
        ? null
        : t.reduce(function (e, t) {
            return e + t;
          })
      : null;
  }
  function De(e) {
    return null;
  }
  (Pe.decorators = [{ type: t.Directive, args: [{ selector: 'ngx-datatable-footer' }] }]),
    (Pe.propDecorators = {
      footerHeight: [{ type: t.Input }],
      totalMessage: [{ type: t.Input }],
      selectedMessage: [{ type: t.Input }],
      pagerLeftArrowIcon: [{ type: t.Input }],
      pagerRightArrowIcon: [{ type: t.Input }],
      pagerPreviousIcon: [{ type: t.Input }],
      pagerNextIcon: [{ type: t.Input }],
      _templateInput: [{ type: t.Input, args: ['template'] }],
      _templateQuery: [{ type: t.ContentChild, args: [v, { read: t.TemplateRef }] }]
    });
  var Oe = (function () {
    function e() {
      this.summaryRow = {};
    }
    return (
      (e.prototype.ngOnChanges = function () {
        this.columns && this.rows && (this.updateInternalColumns(), this.updateValues());
      }),
      (e.prototype.updateInternalColumns = function () {
        this._internalColumns = this.columns.map(function (e) {
          return Object.assign(Object.assign({}, e), { cellTemplate: e.summaryTemplate });
        });
      }),
      (e.prototype.updateValues = function () {
        var e = this;
        (this.summaryRow = {}),
          this.columns
            .filter(function (e) {
              return !e.summaryTemplate;
            })
            .forEach(function (t) {
              var n = e.rows.map(function (e) {
                  return e[t.prop];
                }),
                o = e.getSummaryFunction(t);
              e.summaryRow[t.prop] = t.pipe ? t.pipe.transform(o(n)) : o(n);
            });
      }),
      (e.prototype.getSummaryFunction = function (e) {
        return void 0 === e.summaryFunc ? Re : null === e.summaryFunc ? De : e.summaryFunc;
      }),
      e
    );
  })();
  (Oe.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'datatable-summary-row',
          template:
            '\n    <datatable-body-row\n      *ngIf="summaryRow && _internalColumns"\n      tabindex="-1"\n      [innerWidth]="innerWidth"\n      [offsetX]="offsetX"\n      [columns]="_internalColumns"\n      [rowHeight]="rowHeight"\n      [row]="summaryRow"\n      [rowIndex]="-1"\n    >\n    </datatable-body-row>\n  ',
          host: { class: 'datatable-summary-row' }
        }
      ]
    }
  ]),
    (Oe.propDecorators = {
      rows: [{ type: t.Input }],
      columns: [{ type: t.Input }],
      rowHeight: [{ type: t.Input }],
      offsetX: [{ type: t.Input }],
      innerWidth: [{ type: t.Input }]
    });
  var He = (function () {
    function e() {}
    return (
      (e.prototype.hide = function () {
        this.onMouseLeave && this.onMouseLeave();
      }),
      (e.prototype.show = function () {
        this.onMouseEnter && this.onMouseEnter();
      }),
      e
    );
  })();
  (He.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'ice-custom-tooltip',
          template:
            '<div>\r\n  <div class="tooltip-container">\r\n    <div [innerHTML]="text"></div>\r\n  </div>\r\n</div>\r\n',
          encapsulation: t.ViewEncapsulation.None,
          host: { class: 'ice-custom-tooltip' },
          styles: [
            '.ice-custom-tooltip .tooltip-container{background:#616161;border:1px solid grey;border-radius:2px;border-radius:5px;color:#fff;padding:1px 5px 4px}.ice-custom-tooltip .tooltip-table{border-collapse:collapse}.ice-custom-tooltip .tooltip-header-row{border-bottom:1pt solid #fff}.ice-custom-tooltip .text-align-left{text-align:left}.ice-custom-tooltip .text-align-vertical-center{vertical-align:middle!important}.ice-custom-tooltip .cell-padding{margin:5px;padding:5px}'
          ]
        }
      ]
    }
  ]),
    (He.propDecorators = {
      text: [{ type: t.Input }],
      onMouseLeave: [{ type: t.Input }],
      onMouseEnter: [{ type: t.Input }],
      hide: [{ type: t.HostListener, args: ['mouseleave'] }],
      show: [{ type: t.HostListener, args: ['mouseenter'] }]
    });
  var ke = (function () {
    function e() {}
    return (
      (e.prototype.setToolbar = function (e, t, n, o, r) {
        var i = this;
        if (!this._overlayRef) {
          var a = t
            .flexibleConnectedTo(n)
            .withPositions([{ originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', offsetY: -5 }]);
          this._overlayRef = e.create({ positionStrategy: a });
        }
        if (!this._overlayRef.hasAttached()) {
          var s = this._overlayRef.attach(new p.ComponentPortal(He));
          (this.componentInstance = s),
            (this.componentInstance.instance.text = o),
            (this.componentInstance.instance.onMouseLeave = function () {
              i.clearTimeout(), i.setTimeout(r);
            }),
            (this.componentInstance.instance.onMouseEnter = function () {
              return i.clearTimeout();
            });
        }
      }),
      (e.prototype.clearTimeout = function () {
        this.timeout && clearTimeout(this.timeout);
      }),
      (e.prototype.setTimeout = function (e) {
        var t = this;
        this.timeout = setTimeout(function () {
          t.closeToolTip();
        }, e);
      }),
      (e.prototype.destroy = function () {
        this.clearTimeout(), this.closeToolTip(), (this._overlayRef = null);
      }),
      (e.prototype.closeToolTip = function () {
        this._overlayRef && (this._overlayRef.detach(), (this.componentInstance = null));
      }),
      e
    );
  })();
  ke.decorators = [{ type: t.Injectable }];
  var _e = (function () {
    function e(e, t, n, o) {
      (this._overlay = e),
        (this._overlayPositionBuilder = t),
        (this._elementRef = n),
        (this.toolbarService = o),
        (this.showToolTip = !0),
        (this.showToolTipOnTextOverflow = !1),
        (this.duration = 0);
    }
    return (
      (e.prototype.show = function () {
        this.toolbarService.destroy(),
          ((this.showToolTipOnTextOverflow &&
            this._elementRef.nativeElement.offsetWidth < this._elementRef.nativeElement.scrollWidth) ||
            this.showToolTip) &&
            this.toolbarService.setToolbar(
              this._overlay,
              this._overlayPositionBuilder,
              this._elementRef,
              this.iceTooltipHtmlText,
              this.duration
            );
      }),
      (e.prototype.hide = function () {
        this.toolbarService.setTimeout(this.duration);
      }),
      (e.prototype.ngOnDestroy = function () {
        this.toolbarService.destroy();
      }),
      e
    );
  })();
  (_e.decorators = [{ type: t.Directive, args: [{ selector: '[iceCustomHtmlToolTip]' }] }]),
    (_e.ctorParameters = function () {
      return [{ type: i.Overlay }, { type: i.OverlayPositionBuilder }, { type: t.ElementRef }, { type: ke }];
    }),
    (_e.propDecorators = {
      iceTooltipHtmlText: [{ type: t.Input }],
      showToolTip: [{ type: t.Input }],
      showToolTipOnTextOverflow: [{ type: t.Input }],
      duration: [{ type: t.Input }],
      show: [{ type: t.HostListener, args: ['mouseenter'] }],
      hide: [{ type: t.HostListener, args: ['mouseleave'] }]
    });
  var ze = (function () {
    function e() {
      (this.editing = !1),
        (this.active = !1),
        (this.rows = []),
        (this.align = 'left'),
        (this.focusOnEnter = !1),
        (this.editOnFocus = !1),
        (this.selectDisabled = !1),
        (this.update = new t.EventEmitter()),
        (this.currentClass = 'initial');
    }
    return (
      Object.defineProperty(e.prototype, 'options', {
        set: function (e) {
          var t = this;
          this._options ||
            ((this.currentClass = (
              e.find(function (e) {
                return e.value === t.value;
              }) || { class: 'none' }
            ).class),
            (this._options = e));
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(e.prototype, 'value', {
        get: function () {
          return this._value;
        },
        set: function (e) {
          (this.currentClass = (
            this._options.find(function (t) {
              return t.value === e;
            }) || { class: 'none' }
          ).class),
            (this._value = e);
        },
        enumerable: !1,
        configurable: !0
      }),
      (e.prototype.ngOnInit = function () {
        this.value || (this.value = this.defaultValue), this.value && this.update.emit(this.value);
      }),
      (e.prototype.emitUpdate = function (e) {
        (this.currentClass = (
          this._options.find(function (t) {
            return t.value === e;
          }) || { class: 'none' }
        ).class),
          this.update.emit(e);
      }),
      e
    );
  })();
  (ze.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'ice-datatable-row-select',
          template:
            '<select *ngIf="_options" style="width: 100%;" [ngClass]="currentClass" #selectElement (change)="emitUpdate(selectElement.value)" [(ngModel)]="value" [disabled]="selectDisabled">\r\n      <option *ngFor="let item of _options" [value]="item.value" [disabled]="item.disabled" [ngClass]="item.class || \'black\'">{{ item.label }}</option>\r\n</select>\r\n\r\n\r\n \x3c!-- <mat-form-field appearance="fill">\r\n  <mat-select>\r\n    <ng-container *ngFor="let item of options">\r\n    <mat-option  [value]="item.value">{{ item.label }}</mat-option>\r\n  </ng-container>\r\n  </mat-select>\r\n</mat-form-field> --\x3e\r\n',
          changeDetection: t.ChangeDetectionStrategy.OnPush
        }
      ]
    }
  ]),
    (ze.propDecorators = {
      align: [{ type: t.Input }],
      focusOnEnter: [{ type: t.Input }],
      defaultValue: [{ type: t.Input }],
      editOnFocus: [{ type: t.Input }],
      selectDisabled: [{ type: t.Input }],
      title: [{ type: t.Input }],
      update: [{ type: t.Output }],
      options: [{ type: t.Input }],
      default: [{ type: t.Input }],
      value: [{ type: t.Input }],
      selectEl: [{ type: t.ViewChildren, args: ['selectElement'] }]
    });
  var Me = (function () {
    function e() {
      (this.editing = !1),
        (this.active = !1),
        (this.align = 'left'),
        (this.editOnSpace = !0),
        (this.editOnClick = !0),
        (this.focusOnEnter = !0),
        (this.editOnFocus = !1),
        (this.disabled = !1),
        (this.errorText = ''),
        (this.focus = new t.EventEmitter()),
        (this.toggleEditing = new t.EventEmitter()),
        (this.toggleActive = new t.EventEmitter()),
        (this.update = new t.EventEmitter());
    }
    return (
      (e.prototype.emitUpdate = function (e) {
        this.disabled || this.update.emit(e);
      }),
      (e.prototype.emitToggleEditing = function (e) {
        e.stopPropagation(), this.disabled || (this.editing = !this.editing);
      }),
      (e.prototype.emitFocus = function () {
        this.focus && this.focus.emit(null);
      }),
      (e.prototype.emitToggleActive = function (e) {
        e.stopPropagation(), this.disabled || (this.active = !this.active);
      }),
      (e.prototype.ngAfterViewInit = function () {
        this.inputEl.changes.subscribe(function (e) {
          return e.last && e.last.nativeElement.focus();
        }),
          null == this.value &&
            (this.value =
              this.content &&
              this.content.nativeElement.childNodes.length > 0 &&
              this.content.nativeElement.childNodes[0].data);
      }),
      e
    );
  })();
  function Fe(e) {
    return (
      e &&
      function (t) {
        return oe(e)(t, e);
      }
    );
  }
  function je(e, t, n) {
    if (t && n) {
      var o = {},
        r = e.length,
        i = null;
      o[0] = new We();
      for (
        var a = e.reduce(function (e, t) {
            var o = n(t);
            return -1 === e.indexOf(o) && e.push(o), e;
          }, []),
          s = 0;
        s < r;
        s++
      )
        o[n(e[s])] = new We(e[s]);
      for (s = 0; s < r; s++) {
        var l = 0,
          c = t((i = o[n(e[s])]).row);
        c && a.indexOf(c) > -1 && (l = c),
          (i.parent = o[l]),
          (i.row.level = i.parent.row.level + 1),
          i.parent.children.push(i);
      }
      var u = [];
      return (
        o[0].flatten(function () {
          u = S(u, [this.row]);
        }, !0),
        u
      );
    }
    return e;
  }
  (Me.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'ice-editable-text',
          template:
            '<button\r\n  class="button-as-text mb-0"\r\n  #contentWrapper\r\n  *ngIf="!editing"\r\n  [disabled]="disabled"\r\n  [class.active]="active"\r\n  (keyup.space)="editOnSpace && emitToggleEditing($event)"\r\n  (focus)="emitFocus(); editOnFocus && emitToggleEditing($event)"\r\n  (click)="emitToggleActive($event); editOnClick && emitToggleEditing($event)"\r\n>\r\n  <ng-content></ng-content>\r\n</button>\r\n<div *ngIf="editing" class="editable-text-container">\r\n  <div>\r\n    <input\r\n      type="text"\r\n      class="editable-text-input"\r\n      #inputElement\r\n      [disabled]="disabled"\r\n      [class.active]="active"\r\n      [value]="value"\r\n      (keyup.escape)="emitToggleEditing($event)"\r\n      (keyup.enter)="emitUpdate(inputElement.value)"\r\n      (change)="emitUpdate(inputElement.value)"\r\n      (blur)="emitToggleEditing($event)"\r\n    />\r\n  </div>\r\n</div>\r\n<div *ngIf="errorText" class="editable-text-container ice-pt-10">\r\n  <label class="ice-error-msg">{{ errorText }}</label>\r\n</div>\r\n',
          encapsulation: t.ViewEncapsulation.None,
          host: { class: 'ice-editable-text' },
          changeDetection: t.ChangeDetectionStrategy.OnPush,
          styles: [
            '.ice-editable-text .inherit-all{all:inherit}.ice-editable-text .active{background-color:hsla(0,0%,100%,.3)!important}.ice-editable-text .button-as-text{background:inherit;border:none;border-bottom:1px dashed #aaa!important;border-radius:.2rem;color:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;margin:inherit;min-height:20px;min-width:50px;padding:inherit;text-align:inherit}.ice-editable-text .button-as-text:hover{background-color:hsla(0,0%,100%,.2)!important}.ice-editable-text .editable-text-input{border-bottom:1px dashed #aaa!important}'
          ]
        }
      ]
    }
  ]),
    (Me.propDecorators = {
      align: [{ type: t.Input }],
      editOnSpace: [{ type: t.Input }],
      editOnClick: [{ type: t.Input }],
      focusOnEnter: [{ type: t.Input }],
      editOnFocus: [{ type: t.Input }],
      disabled: [{ type: t.Input }],
      value: [{ type: t.Input }],
      errorText: [{ type: t.Input }],
      focus: [{ type: t.Output }],
      toggleEditing: [{ type: t.Output }],
      toggleActive: [{ type: t.Output }],
      update: [{ type: t.Output }],
      inputEl: [{ type: t.ViewChildren, args: ['inputElement'] }],
      content: [{ type: t.ViewChild, args: ['contentWrapper', { static: !1 }] }]
    });
  var Be,
    Ae,
    We = (function () {
      function e(e) {
        void 0 === e && (e = null),
          e || (e = { level: -1, treeStatus: 'expanded' }),
          (this.row = e),
          (this.parent = null),
          (this.children = []);
      }
      return (
        (e.prototype.flatten = function (e, t) {
          if ('expanded' === this.row.treeStatus)
            for (var n = 0, o = this.children.length; n < o; n++) {
              var r = this.children[n];
              e.apply(r, Array.prototype.slice.call(arguments, 2)), t && r.flatten.apply(r, arguments);
            }
        }),
        e
      );
    })();
  function Ve() {
    return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);
  }
  function $e(e) {
    var t, n;
    if (e) {
      var o = !1;
      try {
        for (var r = I(e), i = r.next(); !i.done; i = r.next()) {
          var a = i.value;
          a.$$id || (a.$$id = Ve()),
            Le(a.prop) && a.name && (a.prop = A(a.name)),
            a.$$valueGetter || (a.$$valueGetter = oe(a.prop)),
            !Le(a.prop) && Le(a.name) && (a.name = W(String(a.prop))),
            Le(a.prop) && Le(a.name) && (a.name = ''),
            a.hasOwnProperty('resizeable') || (a.resizeable = !0),
            a.hasOwnProperty('sortable') || (a.sortable = !0),
            a.hasOwnProperty('draggable') || (a.draggable = !0),
            a.hasOwnProperty('canAutoResize') || (a.canAutoResize = !0),
            a.hasOwnProperty('width') || (a.width = 150),
            a.hasOwnProperty('isTreeColumn') && a.isTreeColumn && !o ? (o = !0) : (a.isTreeColumn = !1);
        }
      } catch (e) {
        t = { error: e };
      } finally {
        try {
          i && !i.done && (n = r.return) && n.call(r);
        } finally {
          if (t) throw t.error;
        }
      }
    }
  }
  function Le(e) {
    return null == e;
  }
  function Ge(e) {
    var t,
      n,
      o,
      r,
      i = [];
    try {
      for (var a = I(e), s = a.next(); !s.done; s = a.next()) {
        var l = s.value,
          c = {},
          u = Object.getOwnPropertyNames(l);
        try {
          for (var p = ((o = void 0), I(u)), h = p.next(); !h.done; h = p.next()) {
            var d = h.value;
            c[d] = l[d];
          }
        } catch (e) {
          o = { error: e };
        } finally {
          try {
            h && !h.done && (r = p.return) && r.call(p);
          } finally {
            if (o) throw o.error;
          }
        }
        l.headerTemplate && (c.headerTemplate = l.headerTemplate),
          l.cellTemplate && (c.cellTemplate = l.cellTemplate),
          l.summaryFunc && (c.summaryFunc = l.summaryFunc),
          l.summaryTemplate && (c.summaryTemplate = l.summaryTemplate),
          i.push(c);
      }
    } catch (e) {
      t = { error: e };
    } finally {
      try {
        s && !s.done && (n = a.return) && n.call(a);
      } finally {
        if (t) throw t.error;
      }
    }
    return i;
  }
  function Xe(e, t, n) {
    var o, r, i;
    n = n || {};
    var a = null,
      s = 0;
    function l() {
      (s = !1 === n.leading ? 0 : +new Date()), (a = null), (i = e.apply(o, r));
    }
    return function () {
      var c = +new Date();
      s || !1 !== n.leading || (s = c);
      var u = t - (c - s);
      return (
        (o = this),
        (r = arguments),
        u <= 0
          ? (clearTimeout(a), (a = null), (s = c), (i = e.apply(o, r)))
          : a || !1 === n.trailing || (a = setTimeout(l, u)),
        i
      );
    };
  }
  function Ne(e, t) {
    return function (n, o, r) {
      return {
        configurable: !0,
        enumerable: r.enumerable,
        get: function () {
          return (
            Object.defineProperty(this, o, { configurable: !0, enumerable: r.enumerable, value: Xe(r.value, e, t) }),
            this[o]
          );
        }
      };
    };
  }
  function Ye(e) {
    var t,
      n,
      o = 0;
    try {
      for (var r = I(e), i = r.next(); !i.done; i = r.next()) {
        o += i.value.flexGrow || 0;
      }
    } catch (e) {
      t = { error: e };
    } finally {
      try {
        i && !i.done && (n = r.return) && n.call(r);
      } finally {
        if (t) throw t.error;
      }
    }
    return o;
  }
  function Ke(e, t) {
    var n = j(e),
      o = Ye(e),
      r = z(e);
    n !== t &&
      (function (e, t, n) {
        var o, r, i, a;
        for (var s in e)
          try {
            for (var l = ((o = void 0), I(e[s])), c = l.next(); !c.done; c = l.next()) {
              (f = c.value).canAutoResize ? (f.width = 0) : ((t -= f.width), (n -= f.flexGrow ? f.flexGrow : 0));
            }
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              c && !c.done && (r = l.return) && r.call(l);
            } finally {
              if (o) throw o.error;
            }
          }
        var u = {},
          p = t;
        do {
          var h = p / n;
          for (var s in ((p = 0), e))
            try {
              for (var d = ((i = void 0), I(e[s])), g = d.next(); !g.done; g = d.next()) {
                var f;
                if ((f = g.value).canAutoResize && !u[f.prop]) {
                  var y = f.width + f.flexGrow * h;
                  void 0 !== f.minWidth && y < f.minWidth
                    ? ((p += y - f.minWidth), (f.width = f.minWidth), (u[f.prop] = !0))
                    : (f.width = y);
                }
              }
            } catch (e) {
              i = { error: e };
            } finally {
              try {
                g && !g.done && (a = d.return) && a.call(d);
              } finally {
                if (i) throw i.error;
              }
            }
        } while (0 !== p);
      })(r, t, o);
  }
  function Ue(e, t, n, o, r) {
    var i, a, s, l;
    void 0 === r && (r = 300);
    var c = e.slice(n + 1, e.length).filter(function (e) {
      return !1 !== e.canAutoResize;
    });
    try {
      for (var u = I(c), p = u.next(); !p.done; p = u.next()) {
        (v = p.value).$$oldWidth || (v.$$oldWidth = v.width);
      }
    } catch (e) {
      i = { error: e };
    } finally {
      try {
        p && !p.done && (a = u.return) && a.call(u);
      } finally {
        if (i) throw i.error;
      }
    }
    var h = 0,
      d = !1,
      g = Qe(e, r),
      f = t - g,
      y = [];
    do {
      (h = f / c.length), (d = g >= t);
      try {
        for (var m = ((s = void 0), I(c)), b = m.next(); !b.done; b = m.next()) {
          var v = b.value;
          if (d && o) v.width = v.$$oldWidth || v.width || r;
          else {
            var w = (v.width || r) + h;
            v.minWidth && w < v.minWidth
              ? ((v.width = v.minWidth), y.push(v))
              : v.maxWidth && w > v.maxWidth
              ? ((v.width = v.maxWidth), y.push(v))
              : (v.width = w);
          }
          v.width = Math.max(0, v.width);
        }
      } catch (e) {
        s = { error: e };
      } finally {
        try {
          b && !b.done && (l = m.return) && l.call(m);
        } finally {
          if (s) throw s.error;
        }
      }
      (f = t - (g = Qe(e))), qe(c, y);
    } while (f > 1 && 0 !== c.length);
  }
  function qe(e, t) {
    var n, o;
    try {
      for (var r = I(t), i = r.next(); !i.done; i = r.next()) {
        var a = i.value,
          s = e.indexOf(a);
        e.splice(s, 1);
      }
    } catch (e) {
      n = { error: e };
    } finally {
      try {
        i && !i.done && (o = r.return) && o.call(r);
      } finally {
        if (n) throw n.error;
      }
    }
  }
  function Qe(e, t) {
    var n, o;
    void 0 === t && (t = 300);
    var r = 0;
    try {
      for (var i = I(e), a = i.next(); !a.done; a = i.next()) {
        r += a.value.width || t;
      }
    } catch (e) {
      n = { error: e };
    } finally {
      try {
        a && !a.done && (o = i.return) && o.call(i);
      } finally {
        if (n) throw n.error;
      }
    }
    return r;
  }
  ((Be = e.ColumnMode || (e.ColumnMode = {})).standard = 'standard'),
    (Be.flex = 'flex'),
    (Be.force = 'force'),
    ((Ae = e.ContextmenuType || (e.ContextmenuType = {})).header = 'header'),
    (Ae.body = 'body');
  var Ze = (function () {
    function n(n, o, r, i, a, l, c) {
      var u = this;
      (this.scrollbarHelper = n),
        (this.dimensionsHelper = o),
        (this.cd = r),
        (this.columnChangesService = l),
        (this.configuration = c),
        (this.expandable = !1),
        (this.selected = []),
        (this.scrollbarV = !1),
        (this.scrollbarH = !1),
        (this.rowHeight = 30),
        (this.columnMode = e.ColumnMode.standard),
        (this.headerHeight = 30),
        (this.footerHeight = 0),
        (this.externalPaging = !1),
        (this.externalSorting = !1),
        (this.loadingIndicator = !1),
        (this.reorderable = !0),
        (this.swapColumns = !0),
        (this.sortType = e.SortType.single),
        (this.sorts = []),
        (this.cssClasses = {
          sortAscending: 'datatable-icon-up',
          sortDescending: 'datatable-icon-down',
          sortUnset: 'datatable-icon-sort-unset',
          pagerLeftArrow: 'datatable-icon-left',
          pagerRightArrow: 'datatable-icon-right',
          pagerPrevious: 'datatable-icon-prev',
          pagerNext: 'datatable-icon-skip'
        }),
        (this.messages = { emptyMessage: 'No data to display', totalMessage: 'total', selectedMessage: 'selected' }),
        (this.groupExpansionDefault = !1),
        (this.selectAllRowsOnPage = !1),
        (this.virtualization = !0),
        (this.summaryRow = !1),
        (this.summaryHeight = 30),
        (this.summaryPosition = 'top'),
        (this.scroll = new t.EventEmitter()),
        (this.activate = new t.EventEmitter()),
        (this.select = new t.EventEmitter()),
        (this.sort = new t.EventEmitter()),
        (this.filter = new t.EventEmitter()),
        (this.page = new t.EventEmitter()),
        (this.reorder = new t.EventEmitter()),
        (this.resize = new t.EventEmitter()),
        (this.tableContextmenu = new t.EventEmitter(!1)),
        (this.treeAction = new t.EventEmitter()),
        (this.rowCount = 0),
        (this._offsetX = new s.BehaviorSubject(0)),
        (this._count = 0),
        (this._offset = 0),
        (this._subscriptions = []),
        (this.recalculate$ = new s.Subject()),
        (this.rowIdentity = function (e) {
          return u._groupRowsBy ? e.key : e;
        }),
        (this.element = i.nativeElement),
        (this.rowDiffer = a.find({}).create()),
        this.configuration &&
          this.configuration.messages &&
          (this.messages = Object.assign({}, this.configuration.messages));
    }
    return (
      Object.defineProperty(n.prototype, 'rows', {
        get: function () {
          return this._rows;
        },
        set: function (e) {
          (this._rows = e),
            e && (this._internalRows = S(e)),
            this.externalSorting || this.sortInternalRows(),
            (this._internalRows = je(this._internalRows, Fe(this.treeFromRelation), Fe(this.treeToRelation))),
            this.recalculate(),
            this._rows && this._groupRowsBy && (this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy)),
            this.cd.markForCheck();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'groupRowsBy', {
        get: function () {
          return this._groupRowsBy;
        },
        set: function (e) {
          e &&
            ((this._groupRowsBy = e),
            this._rows && this._groupRowsBy && (this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy)));
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'columns', {
        get: function () {
          return this._columns;
        },
        set: function (e) {
          (e = S(
            this.expandable
              ? [
                  {
                    width: 50,
                    prop: 'ice-expandable',
                    name: '',
                    resizeable: !1,
                    canAutoResize: !1,
                    draggable: !1,
                    sortable: !1
                  }
                ]
              : [],
            e
          )) && ((this._internalColumns = S(e)), $e(this._internalColumns), this.recalculateColumns()),
            (this._columns = e);
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'limit', {
        get: function () {
          return this._limit;
        },
        set: function (e) {
          (this._limit = e), this.recalculate();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'count', {
        get: function () {
          return this._count;
        },
        set: function (e) {
          (this._count = e), this.recalculate();
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'offset', {
        get: function () {
          return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);
        },
        set: function (e) {
          this._offset = e;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isFixedHeader', {
        get: function () {
          var e = this.headerHeight;
          return 'string' != typeof e || 'auto' !== e;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isFixedRow', {
        get: function () {
          return 'auto' !== this.rowHeight;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isVertScroll', {
        get: function () {
          return this.scrollbarV;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isVirtualized', {
        get: function () {
          return this.virtualization;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isHorScroll', {
        get: function () {
          return this.scrollbarH;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isSelectable', {
        get: function () {
          return void 0 !== this.selectionType;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isCheckboxSelection', {
        get: function () {
          return this.selectionType === e.SelectionType.checkbox;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isCellSelection', {
        get: function () {
          return this.selectionType === e.SelectionType.cell;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isSingleSelection', {
        get: function () {
          return this.selectionType === e.SelectionType.single;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isMultiSelection', {
        get: function () {
          return this.selectionType === e.SelectionType.multi;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'isMultiClickSelection', {
        get: function () {
          return this.selectionType === e.SelectionType.multiClick;
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'columnTemplates', {
        get: function () {
          return this._columnTemplates;
        },
        set: function (e) {
          (this._columnTemplates = e), this.translateColumns(e);
        },
        enumerable: !1,
        configurable: !0
      }),
      Object.defineProperty(n.prototype, 'allRowsSelected', {
        get: function () {
          var e = this.rows && this.selected && this.selected.length === this.rows.length;
          if (this.bodyComponent && this.selectAllRowsOnPage) {
            var t = this.bodyComponent.indexes,
              n = t.last - t.first;
            e = this.selected.length === n;
          }
          return this.selected && this.rows && 0 !== this.rows.length && e;
        },
        enumerable: !1,
        configurable: !0
      }),
      (n.prototype.ngOnInit = function () {
        var e = this;
        this.recalculate(),
          g.ResizeSensor &&
            (this.resizeSensor = new g.ResizeSensor(this.element, function () {
              return e.recalculate$.next();
            })),
          this._subscriptions.push(
            this.recalculate$
              .pipe(l.throttleTime(250, s.asyncScheduler, { leading: !0, trailing: !0 }), l.delay(100))
              .subscribe(function () {
                return e.recalculate();
              })
          );
      }),
      (n.prototype.ngAfterViewInit = function () {
        var e = this;
        this.externalSorting || this.sortInternalRows(),
          'undefined' != typeof requestAnimationFrame &&
            requestAnimationFrame(function () {
              e.recalculate(),
                e.externalPaging &&
                  e.scrollbarV &&
                  e.page.emit({ count: e.count, pageSize: e.pageSize, limit: e.limit, offset: 0 });
            });
      }),
      (n.prototype.ngAfterContentInit = function () {
        var e = this;
        this.columnTemplates.changes.subscribe(function (t) {
          return e.translateColumns(t);
        }),
          this.listenForColumnInputChanges();
      }),
      (n.prototype.translateColumns = function (e) {
        if (e) {
          var t = e.toArray();
          t.length &&
            ((this._internalColumns = Ge(t)),
            $e(this._internalColumns),
            this.recalculateColumns(),
            this.sortInternalRows(),
            this.cd.markForCheck());
        }
      }),
      (n.prototype.groupArrayBy = function (e, t) {
        var n = new Map();
        e.forEach(function (e) {
          var o = e[t];
          n.has(o) ? n.get(o).push(e) : n.set(o, [e]);
        });
        return Array.from(n, function (e) {
          return (t = e[0]), (n = e[1]), { key: t, value: n };
          var t, n;
        });
      }),
      (n.prototype.ngDoCheck = function () {
        this.rowDiffer.diff(this.rows) &&
          (this.externalSorting ? (this._internalRows = S(this.rows)) : this.sortInternalRows(),
          (this._internalRows = je(this._internalRows, Fe(this.treeFromRelation), Fe(this.treeToRelation))),
          this.recalculatePages(),
          this.cd.markForCheck());
      }),
      (n.prototype.recalculate = function () {
        this.recalculateDims(), this.recalculateColumns(), this.cd.markForCheck();
      }),
      (n.prototype.onWindowResize = function () {
        this.recalculate();
      }),
      (n.prototype.recalculateColumns = function (t, n, o) {
        if (
          (void 0 === t && (t = this._internalColumns),
          void 0 === n && (n = -1),
          void 0 === o && (o = this.scrollbarH),
          t)
        ) {
          var r = this._innerWidth;
          return (
            this.scrollbarV && (r -= this.scrollbarHelper.width),
            this.columnMode === e.ColumnMode.force ? Ue(t, r, n, o) : this.columnMode === e.ColumnMode.flex && Ke(t, r),
            t
          );
        }
      }),
      (n.prototype.recalculateDims = function () {
        var e = this.dimensionsHelper.getDimensions(this.element);
        if (((this._innerWidth = Math.floor(e.width)), this.scrollbarV)) {
          var t = e.height;
          this.headerHeight && (t -= this.headerHeight),
            this.footerHeight && (t -= this.footerHeight),
            (this.bodyHeight = t);
        }
        this.recalculatePages();
      }),
      (n.prototype.recalculatePages = function () {
        (this.pageSize = this.calcPageSize()), (this.rowCount = this.calcRowCount());
      }),
      (n.prototype.onBodyPage = function (e) {
        var t = e.offset;
        (this.externalPaging && !this.virtualization) ||
          ((this.offset = t),
          this.page.emit({ count: this.count, pageSize: this.pageSize, limit: this.limit, offset: this.offset }));
      }),
      (n.prototype.onBodyScroll = function (e) {
        this._offsetX.next(e.offsetX), this.scroll.emit(e), this.cd.detectChanges();
      }),
      (n.prototype.onFooterPage = function (e) {
        (this.offset = e.page - 1),
          this.bodyComponent.updateOffsetY(this.offset),
          this.page.emit({ count: this.count, pageSize: this.pageSize, limit: this.limit, offset: this.offset }),
          this.selectAllRowsOnPage && ((this.selected = []), this.select.emit({ selected: this.selected }));
      }),
      (n.prototype.calcPageSize = function (e) {
        if ((void 0 === e && (e = this.rows), this.scrollbarV && this.virtualization)) {
          var t = Math.ceil(this.bodyHeight / this.rowHeight);
          return Math.max(t, 0);
        }
        return void 0 !== this.limit ? this.limit : e ? e.length : 0;
      }),
      (n.prototype.calcRowCount = function (e) {
        return (
          void 0 === e && (e = this.rows),
          this.externalPaging
            ? this.count
            : e
            ? this.groupedRows
              ? this.groupedRows.length
              : null != this.treeFromRelation && null != this.treeToRelation
              ? this._internalRows.length
              : e.length
            : 0
        );
      }),
      (n.prototype.onColumnContextmenu = function (t) {
        var n = t.event,
          o = t.column;
        this.tableContextmenu.emit({ event: n, type: e.ContextmenuType.header, content: o });
      }),
      (n.prototype.onRowContextmenu = function (t) {
        var n = t.event,
          o = t.row;
        this.tableContextmenu.emit({ event: n, type: e.ContextmenuType.body, content: o });
      }),
      (n.prototype.onColumnResize = function (e) {
        var t = e.column,
          n = e.newValue;
        if (void 0 !== t) {
          var o,
            r = this._internalColumns.map(function (e, r) {
              return (e = Object.assign({}, e)).$$id === t.$$id && ((o = r), (e.width = n), (e.$$oldWidth = n)), e;
            });
          this.recalculateColumns(r, o), (this._internalColumns = r), this.resize.emit({ column: t, newValue: n });
        }
      }),
      (n.prototype.onColumnReorder = function (e) {
        var t = e.column,
          n = e.newValue,
          o = e.prevValue,
          r = this._internalColumns.map(function (e) {
            return Object.assign({}, e);
          });
        if (this.swapColumns) {
          var i = r[n];
          (r[n] = t), (r[o] = i);
        } else if (n > o) {
          for (var a = r[o], s = o; s < n; s++) r[s] = r[s + 1];
          r[n] = a;
        } else {
          for (a = r[o], s = o; s > n; s--) r[s] = r[s - 1];
          r[n] = a;
        }
        (this._internalColumns = r), this.reorder.emit({ column: t, newValue: n, prevValue: o });
      }),
      (n.prototype.onColumnFilter = function (e) {
        this.filter.emit(e);
      }),
      (n.prototype.onColumnSort = function (e) {
        this.selectAllRowsOnPage && ((this.selected = []), this.select.emit({ selected: this.selected })),
          (this.sorts = e.sorts),
          !1 === this.externalSorting && this.sortInternalRows(),
          (this._internalRows = je(this._internalRows, Fe(this.treeFromRelation), Fe(this.treeToRelation))),
          (this.offset = 0),
          this.bodyComponent.updateOffsetY(this.offset),
          this.sort.emit(e);
      }),
      (n.prototype.onHeaderSelect = function (e) {
        var t, n;
        if (this.bodyComponent && this.selectAllRowsOnPage) {
          var o = this.bodyComponent.indexes.first,
            r = this.bodyComponent.indexes.last,
            i = this.selected.length === r - o;
          (this.selected = []), i || (t = this.selected).push.apply(t, S(this._internalRows.slice(o, r)));
        } else {
          i = this.selected.length === this.rows.length;
          (this.selected = []), i || (n = this.selected).push.apply(n, S(this.rows));
        }
        this.select.emit({ selected: this.selected });
      }),
      (n.prototype.onBodySelect = function (e) {
        this.select.emit(e);
      }),
      (n.prototype.onTreeAction = function (e) {
        var t = this,
          n = e.row,
          o = this._rows.findIndex(function (n) {
            return n[t.treeToRelation] === e.row[t.treeToRelation];
          });
        this.treeAction.emit({ row: n, rowIndex: o });
      }),
      (n.prototype.ngOnDestroy = function () {
        this._subscriptions.forEach(function (e) {
          return e.unsubscribe();
        }),
          this.resizeSensor && this.resizeSensor.detach();
      }),
      (n.prototype.listenForColumnInputChanges = function () {
        var e = this;
        this._subscriptions.push(
          this.columnChangesService.columnInputChanges$.subscribe(function () {
            e.columnTemplates && e.columnTemplates.notifyOnChanges();
          })
        );
      }),
      (n.prototype.sortInternalRows = function () {
        this._internalRows = ce(this._internalRows, this._internalColumns, this.sorts);
      }),
      n
    );
  })();
  (Ze.decorators = [
    {
      type: t.Component,
      args: [
        {
          selector: 'ngx-datatable',
          template:
            '<div role="table" visibilityObserver (visible)="recalculate()">\r\n  <datatable-header\r\n    role="rowgroup"\r\n    *ngIf="headerHeight"\r\n    [sorts]="sorts"\r\n    [sortType]="sortType"\r\n    [scrollbarH]="scrollbarH"\r\n    [innerWidth]="_innerWidth"\r\n    [offsetX]="_offsetX | async"\r\n    [dealsWithGroup]="groupedRows !== undefined"\r\n    [columns]="_internalColumns"\r\n    [headerHeight]="headerHeight"\r\n    [reorderable]="reorderable"\r\n    [targetMarkerTemplate]="targetMarkerTemplate"\r\n    [sortAscendingIcon]="cssClasses.sortAscending"\r\n    [sortDescendingIcon]="cssClasses.sortDescending"\r\n    [sortUnsetIcon]="cssClasses.sortUnset"\r\n    [allRowsSelected]="allRowsSelected"\r\n    [selectionType]="selectionType"\r\n    (sort)="onColumnSort($event)"\r\n    (filter)="onColumnFilter($event)"\r\n    (resize)="onColumnResize($event)"\r\n    (reorder)="onColumnReorder($event)"\r\n    (select)="onHeaderSelect($event)"\r\n    (columnContextmenu)="onColumnContextmenu($event)"\r\n  >\r\n  </datatable-header>\r\n  <datatable-body\r\n    role="rowgroup"\r\n    [groupRowsBy]="groupRowsBy"\r\n    [groupedRows]="groupedRows"\r\n    [rows]="_internalRows"\r\n    [groupExpansionDefault]="groupExpansionDefault"\r\n    [scrollbarV]="scrollbarV"\r\n    [scrollbarH]="scrollbarH"\r\n    [virtualization]="virtualization"\r\n    [loadingIndicator]="loadingIndicator"\r\n    [externalPaging]="externalPaging"\r\n    [rowHeight]="rowHeight"\r\n    [rowCount]="rowCount"\r\n    [offset]="offset"\r\n    [trackByProp]="trackByProp"\r\n    [columns]="_internalColumns"\r\n    [pageSize]="pageSize"\r\n    [offsetX]="_offsetX | async"\r\n    [rowDetail]="rowDetail"\r\n    [groupHeader]="groupHeader"\r\n    [selected]="selected"\r\n    [innerWidth]="_innerWidth"\r\n    [bodyHeight]="bodyHeight"\r\n    [selectionType]="selectionType"\r\n    [emptyMessage]="messages.emptyMessage"\r\n    [rowIdentity]="rowIdentity"\r\n    [rowClass]="rowClass"\r\n    [selectCheck]="selectCheck"\r\n    [displayCheck]="displayCheck"\r\n    [summaryRow]="summaryRow"\r\n    [summaryHeight]="summaryHeight"\r\n    [summaryPosition]="summaryPosition"\r\n    (page)="onBodyPage($event)"\r\n    (activate)="activate.emit($event)"\r\n    (rowContextmenu)="onRowContextmenu($event)"\r\n    (select)="onBodySelect($event)"\r\n    (scroll)="onBodyScroll($event)"\r\n    (treeAction)="onTreeAction($event)"\r\n  >\r\n  </datatable-body>\r\n  <datatable-footer\r\n    *ngIf="footerHeight"\r\n    [rowCount]="rowCount"\r\n    [pageSize]="pageSize"\r\n    [offset]="offset"\r\n    [footerHeight]="footerHeight"\r\n    [footerTemplate]="footer"\r\n    [totalMessage]="messages.totalMessage"\r\n    [pagerLeftArrowIcon]="cssClasses.pagerLeftArrow"\r\n    [pagerRightArrowIcon]="cssClasses.pagerRightArrow"\r\n    [pagerPreviousIcon]="cssClasses.pagerPrevious"\r\n    [selectedCount]="selected.length"\r\n    [selectedMessage]="!!selectionType && messages.selectedMessage"\r\n    [pagerNextIcon]="cssClasses.pagerNext"\r\n    (page)="onFooterPage($event)"\r\n  >\r\n  </datatable-footer>\r\n</div>\r\n',
          changeDetection: t.ChangeDetectionStrategy.OnPush,
          encapsulation: t.ViewEncapsulation.None,
          host: { class: 'ngx-datatable' },
          styles: [
            '.ngx-datatable{display:block;justify-content:center;overflow:hidden;position:relative;transform:translateZ(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{-webkit-overflow-scrolling:touch;overflow-x:auto}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{-o-flex-flow:row;display:flex;flex-direction:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{display:inline-block;line-height:1.625;overflow-x:hidden;vertical-align:top}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{-webkit-align-items:stretch;align-items:stretch}.ngx-datatable .datatable-header .filter-template-wrap{padding:0 0 0 .9rem!important}.ngx-datatable .datatable-header .datatable-header-cell{display:inline-block;position:relative}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{cursor:pointer;display:inline-block;line-height:100%;vertical-align:middle}.ngx-datatable .datatable-header .datatable-header-cell .filter-header{padding-top:5px}.ngx-datatable .datatable-header .datatable-header-cell .filter-header .mat-form-field-flex{height:40px}.ngx-datatable .datatable-header .datatable-header-cell .filter-header .mat-form-field-label-wrapper{font-size:12px;font-weight:500;top:-1.01em}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{bottom:0;display:inline-block;padding:0 4px;position:absolute;right:0;top:0;visibility:hidden;width:5px}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{bottom:0;position:absolute;top:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{display:block;position:relative;z-index:10}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;overflow:auto;width:100%}.ngx-datatable .datatable-footer .datatable-footer-inner{align-items:center;display:flex;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{display:inline-block;list-style:none;margin:0;padding:0}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}'
          ]
        }
      ]
    }
  ]),
    (Ze.ctorParameters = function () {
      return [
        { type: y, decorators: [{ type: t.SkipSelf }] },
        { type: m, decorators: [{ type: t.SkipSelf }] },
        { type: t.ChangeDetectorRef },
        { type: t.ElementRef },
        { type: t.KeyValueDiffers },
        { type: b },
        { type: void 0, decorators: [{ type: t.Optional }, { type: t.Inject, args: ['configuration'] }] }
      ];
    }),
    (Ze.propDecorators = {
      targetMarkerTemplate: [{ type: t.Input }],
      rows: [{ type: t.Input }],
      groupRowsBy: [{ type: t.Input }],
      groupedRows: [{ type: t.Input }],
      expandable: [{ type: t.Input }],
      columns: [{ type: t.Input }],
      selected: [{ type: t.Input }],
      scrollbarV: [{ type: t.Input }],
      scrollbarH: [{ type: t.Input }],
      rowHeight: [{ type: t.Input }],
      columnMode: [{ type: t.Input }],
      headerHeight: [{ type: t.Input }],
      footerHeight: [{ type: t.Input }],
      externalPaging: [{ type: t.Input }],
      externalSorting: [{ type: t.Input }],
      limit: [{ type: t.Input }],
      count: [{ type: t.Input }],
      offset: [{ type: t.Input }],
      loadingIndicator: [{ type: t.Input }],
      selectionType: [{ type: t.Input }],
      reorderable: [{ type: t.Input }],
      swapColumns: [{ type: t.Input }],
      sortType: [{ type: t.Input }],
      sorts: [{ type: t.Input }],
      cssClasses: [{ type: t.Input }],
      messages: [{ type: t.Input }],
      rowClass: [{ type: t.Input }],
      selectCheck: [{ type: t.Input }],
      displayCheck: [{ type: t.Input }],
      groupExpansionDefault: [{ type: t.Input }],
      trackByProp: [{ type: t.Input }],
      selectAllRowsOnPage: [{ type: t.Input }],
      virtualization: [{ type: t.Input }],
      treeFromRelation: [{ type: t.Input }],
      treeToRelation: [{ type: t.Input }],
      summaryRow: [{ type: t.Input }],
      summaryHeight: [{ type: t.Input }],
      summaryPosition: [{ type: t.Input }],
      scroll: [{ type: t.Output }],
      activate: [{ type: t.Output }],
      select: [{ type: t.Output }],
      sort: [{ type: t.Output }],
      filter: [{ type: t.Output }],
      page: [{ type: t.Output }],
      reorder: [{ type: t.Output }],
      resize: [{ type: t.Output }],
      tableContextmenu: [{ type: t.Output }],
      treeAction: [{ type: t.Output }],
      isFixedHeader: [{ type: t.HostBinding, args: ['class.fixed-header'] }],
      isFixedRow: [{ type: t.HostBinding, args: ['class.fixed-row'] }],
      isVertScroll: [{ type: t.HostBinding, args: ['class.scroll-vertical'] }],
      isVirtualized: [{ type: t.HostBinding, args: ['class.virtualized'] }],
      isHorScroll: [{ type: t.HostBinding, args: ['class.scroll-horz'] }],
      isSelectable: [{ type: t.HostBinding, args: ['class.selectable'] }],
      isCheckboxSelection: [{ type: t.HostBinding, args: ['class.checkbox-selection'] }],
      isCellSelection: [{ type: t.HostBinding, args: ['class.cell-selection'] }],
      isSingleSelection: [{ type: t.HostBinding, args: ['class.single-selection'] }],
      isMultiSelection: [{ type: t.HostBinding, args: ['class.multi-selection'] }],
      isMultiClickSelection: [{ type: t.HostBinding, args: ['class.multi-click-selection'] }],
      columnTemplates: [{ type: t.ContentChildren, args: [_] }],
      rowDetail: [{ type: t.ContentChild, args: [we] }],
      groupHeader: [{ type: t.ContentChild, args: [Ce] }],
      footer: [{ type: t.ContentChild, args: [Pe] }],
      bodyComponent: [{ type: t.ViewChild, args: [he] }],
      headerComponent: [{ type: t.ViewChild, args: [te] }],
      rowIdentity: [{ type: t.Input }],
      onWindowResize: [{ type: t.HostListener, args: ['window:resize'] }]
    }),
    (function (e, t, n, o) {
      var r,
        i = arguments.length,
        a = i < 3 ? t : null === o ? (o = Object.getOwnPropertyDescriptor(t, n)) : o;
      if ('object' == typeof Reflect && 'function' == typeof Reflect.decorate) a = Reflect.decorate(e, t, n, o);
      else
        for (var s = e.length - 1; s >= 0; s--) (r = e[s]) && (a = (i < 3 ? r(a) : i > 3 ? r(t, n, a) : r(t, n)) || a);
      i > 3 && a && Object.defineProperty(t, n, a);
    })([Ne(5)], Ze.prototype, 'onWindowResize', null);
  var Je,
    et = (function () {
      function e() {}
      return (
        (e.forRoot = function (t) {
          return { ngModule: e, providers: [{ provide: 'configuration', useValue: t }] };
        }),
        e
      );
    })();
  function tt(e, t) {
    for (var n, o, r, i = [], a = []; (n = document.elementFromPoint(e, t)) && -1 === i.indexOf(n) && null != n; )
      i.push(n),
        a.push({
          value: n.style.getPropertyValue('pointer-events'),
          priority: n.style.getPropertyPriority('pointer-events')
        }),
        n.style.setProperty('pointer-events', 'none', 'important');
    for (o = a.length; (r = a[--o]); ) i[o].style.setProperty('pointer-events', r.value ? r.value : '', r.priority);
    return i;
  }
  (et.decorators = [
    {
      type: t.NgModule,
      args: [
        {
          imports: [
            n.CommonModule,
            a.MatTooltipModule,
            i.OverlayModule,
            o.MatIconModule,
            r.MatButtonModule,
            d.MatInputModule,
            c.MatFormFieldModule,
            f.MatSelectModule,
            h.FormsModule,
            h.ReactiveFormsModule
          ],
          providers: [y, m, b, ke],
          declarations: [
            v,
            w,
            x,
            C,
            E,
            P,
            _e,
            R,
            Ze,
            _,
            te,
            ue,
            he,
            de,
            ge,
            ye,
            me,
            be,
            He,
            ze,
            Me,
            we,
            Ce,
            ve,
            Ie,
            Ee,
            D,
            O,
            H,
            Pe,
            xe,
            Oe
          ],
          exports: [Ze, we, Ce, ve, _, D, O, H, v, Pe, ge, xe],
          entryComponents: [He]
        }
      ]
    }
  ]),
    ((Je = e.ClickType || (e.ClickType = {})).single = 'single'),
    (Je.double = 'double'),
    'undefined' == typeof document || document.elementsFromPoint || (document.elementsFromPoint = tt),
    (e.ColumnChangesService = b),
    (e.DataTableBodyCellComponent = Ie),
    (e.DataTableBodyComponent = he),
    (e.DataTableBodyRowComponent = me),
    (e.DataTableColumnCellDirective = O),
    (e.DataTableColumnCellTreeToggle = H),
    (e.DataTableColumnDirective = _),
    (e.DataTableColumnHeaderDirective = D),
    (e.DataTableFooterComponent = de),
    (e.DataTableFooterTemplateDirective = v),
    (e.DataTableHeaderCellComponent = ue),
    (e.DataTableHeaderComponent = te),
    (e.DataTablePagerComponent = ge),
    (e.DataTableRowWrapperComponent = be),
    (e.DataTableSelectionComponent = Ee),
    (e.DataTableSummaryRowComponent = Oe),
    (e.DatatableComponent = Ze),
    (e.DatatableFooterDirective = Pe),
    (e.DatatableGroupHeaderDirective = Ce),
    (e.DatatableGroupHeaderTemplateDirective = xe),
    (e.DatatableRowDetailDirective = we),
    (e.DatatableRowDetailTemplateDirective = ve),
    (e.DimensionsHelper = m),
    (e.DraggableDirective = x),
    (e.LongPressDirective = P),
    (e.NgxDatatableModule = et),
    (e.OrderableDirective = E),
    (e.ProgressBarComponent = ye),
    (e.ResizeableDirective = C),
    (e.RowHeightCache = pe),
    (e.ScrollbarHelper = y),
    (e.ScrollerComponent = R),
    (e.VisibilityDirective = w),
    (e.adjustColumnWidths = Ke),
    (e.camelCase = A),
    (e.columnGroupWidths = M),
    (e.columnTotalWidth = F),
    (e.columnsByPin = z),
    (e.columnsByPinArr = B),
    (e.columnsTotalWidth = j),
    (e.deCamelCase = W),
    (e.deepValueGetter = ae),
    (e.elementsFromPoint = tt),
    (e.emptyStringGetter = ne),
    (e.forceFillColumnWidths = Ue),
    (e.getTotalFlexGrow = Ye),
    (e.getVendorPrefixedName = X),
    (e.getterForProp = oe),
    (e.groupRowsByParents = je),
    (e.id = Ve),
    (e.isNullOrUndefined = Le),
    (e.nextSortDir = se),
    (e.numericIndexGetter = re),
    (e.optionalGetterForProp = Fe),
    (e.orderByComparator = le),
    (e.selectRows = Te),
    (e.selectRowsBetween = Se),
    (e.setColumnDefaults = $e),
    (e.shallowValueGetter = ie),
    (e.sortRows = ce),
    (e.throttle = Xe),
    (e.throttleable = Ne),
    (e.translateTemplates = Ge),
    (e.translateXY = Z),
    (e.ɵ0 = L),
    (e.ɵa = ke),
    (e.ɵb = _e),
    (e.ɵc = He),
    (e.ɵd = ze),
    (e.ɵe = Me),
    Object.defineProperty(e, '__esModule', { value: !0 });
});
//# sourceMappingURL=stage-ngx-datatable.umd.min.js.map
